//
// Generated by Bluespec Compiler (build 7d25cde)
//
// On Thu Aug 24 17:24:33 PDT 2023
//
//
// Ports:
// Name                         I/O  size props
// ctrl_user_dataReceive          O    52 reg
// RDY_ctrl_user_dataReceive      O     1 reg
// ctrl_user_dataReq              O    51 reg
// RDY_ctrl_user_dataReq          O     1 reg
// RDY_ctrl_user_dataSend         O     1 reg
// RDY_ctrl_user_dmaWriteReq      O     1 reg
// RDY_ctrl_user_dmaWriteData     O     1 reg
// RDY_ctrl_user_dmaReadReq       O     1 reg
// ctrl_user_dmaReadWord          O   128 reg
// RDY_ctrl_user_dmaReadWord      O     1 reg
// RDY_ctrl_user_assertInterrupt  O     1
// RDY_ctrl_user_assertUptrain    O     1
// ctrl_user_debug_data           O    32
// RDY_ctrl_user_debug_data       O     1 const
// pins_TXN                       O     8
// pins_TXP                       O     8
// CLK_ctrl_user_user_clk         O     1 clock
// CLK_GATE_ctrl_user_user_clk    O     1 const
// CLK_sys_clk_o                  O     1 clock
// CLK_GATE_sys_clk_o             O     1 const
// RST_N_ctrl_user_user_rst       O     1 reset
// RST_N_sys_rst_n_o              O     1 reset
// CLK_sys_clk_p                  I     1 clock
// CLK_sys_clk_n                  I     1 clock
// RST_N_sys_rst_n                I     1 reset
// CLK_emcclk                     I     1 clock
// ctrl_user_dataSend_ioreq       I    51
// ctrl_user_dataSend_data        I    32 reg
// ctrl_user_dmaWriteReq_addr     I    32 reg
// ctrl_user_dmaWriteReq_words    I    10 reg
// ctrl_user_dmaWriteData_data    I   128 reg
// ctrl_user_dmaReadReq_addr      I    32 reg
// ctrl_user_dmaReadReq_words     I    10 reg
// pins_rxn_i                     I     8
// pins_rxp_i                     I     8
// EN_ctrl_user_dataSend          I     1
// EN_ctrl_user_dmaWriteReq       I     1
// EN_ctrl_user_dmaWriteData      I     1
// EN_ctrl_user_dmaReadReq        I     1
// EN_ctrl_user_assertInterrupt   I     1
// EN_ctrl_user_assertUptrain     I     1
// EN_ctrl_user_dataReceive       I     1
// EN_ctrl_user_dataReq           I     1
// EN_ctrl_user_dmaReadWord       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPcieEngine(CLK_sys_clk_p,
		    CLK_sys_clk_n,
		    RST_N_sys_rst_n,
		    CLK_emcclk,

		    EN_ctrl_user_dataReceive,
		    ctrl_user_dataReceive,
		    RDY_ctrl_user_dataReceive,

		    EN_ctrl_user_dataReq,
		    ctrl_user_dataReq,
		    RDY_ctrl_user_dataReq,

		    ctrl_user_dataSend_ioreq,
		    ctrl_user_dataSend_data,
		    EN_ctrl_user_dataSend,
		    RDY_ctrl_user_dataSend,

		    ctrl_user_dmaWriteReq_addr,
		    ctrl_user_dmaWriteReq_words,
		    EN_ctrl_user_dmaWriteReq,
		    RDY_ctrl_user_dmaWriteReq,

		    ctrl_user_dmaWriteData_data,
		    EN_ctrl_user_dmaWriteData,
		    RDY_ctrl_user_dmaWriteData,

		    ctrl_user_dmaReadReq_addr,
		    ctrl_user_dmaReadReq_words,
		    EN_ctrl_user_dmaReadReq,
		    RDY_ctrl_user_dmaReadReq,

		    EN_ctrl_user_dmaReadWord,
		    ctrl_user_dmaReadWord,
		    RDY_ctrl_user_dmaReadWord,

		    EN_ctrl_user_assertInterrupt,
		    RDY_ctrl_user_assertInterrupt,

		    EN_ctrl_user_assertUptrain,
		    RDY_ctrl_user_assertUptrain,

		    ctrl_user_debug_data,
		    RDY_ctrl_user_debug_data,

		    pins_rxn_i,

		    pins_rxp_i,

		    pins_TXN,

		    pins_TXP,

		    CLK_ctrl_user_user_clk,
		    CLK_GATE_ctrl_user_user_clk,

		    CLK_sys_clk_o,
		    CLK_GATE_sys_clk_o,

		    RST_N_ctrl_user_user_rst,
		    RST_N_sys_rst_n_o);
  input  CLK_sys_clk_p;
  input  CLK_sys_clk_n;
  input  RST_N_sys_rst_n;
  input  CLK_emcclk;

  // actionvalue method ctrl_user_dataReceive
  input  EN_ctrl_user_dataReceive;
  output [51 : 0] ctrl_user_dataReceive;
  output RDY_ctrl_user_dataReceive;

  // actionvalue method ctrl_user_dataReq
  input  EN_ctrl_user_dataReq;
  output [50 : 0] ctrl_user_dataReq;
  output RDY_ctrl_user_dataReq;

  // action method ctrl_user_dataSend
  input  [50 : 0] ctrl_user_dataSend_ioreq;
  input  [31 : 0] ctrl_user_dataSend_data;
  input  EN_ctrl_user_dataSend;
  output RDY_ctrl_user_dataSend;

  // action method ctrl_user_dmaWriteReq
  input  [31 : 0] ctrl_user_dmaWriteReq_addr;
  input  [9 : 0] ctrl_user_dmaWriteReq_words;
  input  EN_ctrl_user_dmaWriteReq;
  output RDY_ctrl_user_dmaWriteReq;

  // action method ctrl_user_dmaWriteData
  input  [127 : 0] ctrl_user_dmaWriteData_data;
  input  EN_ctrl_user_dmaWriteData;
  output RDY_ctrl_user_dmaWriteData;

  // action method ctrl_user_dmaReadReq
  input  [31 : 0] ctrl_user_dmaReadReq_addr;
  input  [9 : 0] ctrl_user_dmaReadReq_words;
  input  EN_ctrl_user_dmaReadReq;
  output RDY_ctrl_user_dmaReadReq;

  // actionvalue method ctrl_user_dmaReadWord
  input  EN_ctrl_user_dmaReadWord;
  output [127 : 0] ctrl_user_dmaReadWord;
  output RDY_ctrl_user_dmaReadWord;

  // action method ctrl_user_assertInterrupt
  input  EN_ctrl_user_assertInterrupt;
  output RDY_ctrl_user_assertInterrupt;

  // action method ctrl_user_assertUptrain
  input  EN_ctrl_user_assertUptrain;
  output RDY_ctrl_user_assertUptrain;

  // value method ctrl_user_debug_data
  output [31 : 0] ctrl_user_debug_data;
  output RDY_ctrl_user_debug_data;

  // action method pins_rxn_in
  input  [7 : 0] pins_rxn_i;

  // action method pins_rxp_in
  input  [7 : 0] pins_rxp_i;

  // value method pins_txn_out
  output [7 : 0] pins_TXN;

  // value method pins_txp_out
  output [7 : 0] pins_TXP;

  // oscillator and gates for output clock CLK_ctrl_user_user_clk
  output CLK_ctrl_user_user_clk;
  output CLK_GATE_ctrl_user_user_clk;

  // oscillator and gates for output clock CLK_sys_clk_o
  output CLK_sys_clk_o;
  output CLK_GATE_sys_clk_o;

  // output resets
  output RST_N_ctrl_user_user_rst;
  output RST_N_sys_rst_n_o;

  // signals for module outputs
  wire [127 : 0] ctrl_user_dmaReadWord;
  wire [51 : 0] ctrl_user_dataReceive;
  wire [50 : 0] ctrl_user_dataReq;
  wire [31 : 0] ctrl_user_debug_data;
  wire [7 : 0] pins_TXN, pins_TXP;
  wire CLK_GATE_ctrl_user_user_clk,
       CLK_GATE_sys_clk_o,
       CLK_ctrl_user_user_clk,
       CLK_sys_clk_o,
       RDY_ctrl_user_assertInterrupt,
       RDY_ctrl_user_assertUptrain,
       RDY_ctrl_user_dataReceive,
       RDY_ctrl_user_dataReq,
       RDY_ctrl_user_dataSend,
       RDY_ctrl_user_debug_data,
       RDY_ctrl_user_dmaReadReq,
       RDY_ctrl_user_dmaReadWord,
       RDY_ctrl_user_dmaWriteData,
       RDY_ctrl_user_dmaWriteReq,
       RST_N_ctrl_user_user_rst,
       RST_N_sys_rst_n_o;

  // inlined wires
  wire [135 : 0] pcieCtrl_dmaReadWordQ_wDataIn_wget,
		 pcieCtrl_dmaReadWordQ_wDataOut_wget;
  wire [128 : 0] pcieCtrl_doneShifter_outputFifo_rv_port0__write_1,
		 pcieCtrl_doneShifter_outputFifo_rv_port1__read,
		 pcieCtrl_doneShifter_outputFifo_rv_port2__read,
		 pcieCtrl_orderShifter_outputFifo_rv_port0__write_1,
		 pcieCtrl_orderShifter_outputFifo_rv_port1__read,
		 pcieCtrl_orderShifter_outputFifo_rv_port2__read;
  wire [127 : 0] pcieCtrl_dmaReadOutQ_wDataOut_wget;
  wire [51 : 0] pcieCtrl_userWriteQ_wDataOut_wget;
  wire [50 : 0] pcieCtrl_userReadQ1_wDataOut_wget;
  wire [31 : 0] pcieCtrl_configBuffer_serverAdapterA_outData_outData_wget,
		pcieCtrl_configBuffer_serverAdapterB_outData_outData_wget;
  wire [19 : 0] pcieCtrl_tagMap_serverAdapterB_outData_outData_wget;
  wire [17 : 0] pcieCtrl_doneMap_serverAdapterB_outData_outData_wget;
  wire [7 : 0] pcieCtrl_freeWriteTagQ_wDataOut_wget;
  wire [1 : 0] pcieCtrl_configBuffer_serverAdapterA_s1_1_wget,
	       pcieCtrl_configBuffer_serverAdapterA_writeWithResp_wget,
	       pcieCtrl_tagMap_serverAdapterB_s1_1_wget,
	       pcieCtrl_tagMap_serverAdapterB_writeWithResp_wget;
  wire pcieCtrl_configBuffer_serverAdapterA_cnt_1_whas,
       pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas,
       pcieCtrl_configBuffer_serverAdapterA_outData_enqData_whas,
       pcieCtrl_configBuffer_serverAdapterA_outData_outData_whas,
       pcieCtrl_configBuffer_serverAdapterA_writeWithResp_whas,
       pcieCtrl_configBuffer_serverAdapterB_outData_enqData_whas,
       pcieCtrl_configBuffer_serverAdapterB_outData_outData_whas,
       pcieCtrl_dmaReadOutQ_pwDequeue_whas,
       pcieCtrl_dmaReadTagOrderQ_pwDequeue_whas,
       pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas,
       pcieCtrl_dmaReadWordQ_pwDequeue_whas,
       pcieCtrl_dmaReadWordQ_pwEnqueue_whas,
       pcieCtrl_dmaReadWordQ_wDataIn_whas,
       pcieCtrl_doneMap_serverAdapterA_outData_enqData_whas,
       pcieCtrl_doneMap_serverAdapterA_writeWithResp_whas,
       pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas,
       pcieCtrl_doneMap_serverAdapterB_outData_enqData_whas,
       pcieCtrl_doneMap_serverAdapterB_outData_outData_whas,
       pcieCtrl_doneShifter_outputFifo_rv_EN_port0__write,
       pcieCtrl_freeReadTagQ_pwEnqueue_whas,
       pcieCtrl_freeReadTagQ_wDataIn_whas,
       pcieCtrl_freeWriteTagQ_pwDequeue_whas,
       pcieCtrl_freeWriteTagQ_pwEnqueue_whas,
       pcieCtrl_freeWriteTagQ_wDataIn_whas,
       pcieCtrl_orderShifter_outputFifo_rv_EN_port0__write,
       pcieCtrl_orderShifter_outputFifo_rv_EN_port1__write,
       pcieCtrl_readReorder_serverAdapterA_outData_enqData_whas,
       pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas,
       pcieCtrl_readReorder_serverAdapterB_outData_enqData_whas,
       pcieCtrl_readReorder_serverAdapterB_outData_outData_whas,
       pcieCtrl_tagMap_serverAdapterA_outData_enqData_whas,
       pcieCtrl_tagMap_serverAdapterB_cnt_1_whas,
       pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas,
       pcieCtrl_tagMap_serverAdapterB_outData_enqData_whas,
       pcieCtrl_tagMap_serverAdapterB_outData_outData_whas,
       pcieCtrl_tagMap_serverAdapterB_writeWithResp_whas,
       pcieCtrl_userReadQ1_pwDequeue_whas,
       pcieCtrl_userReadQ1_pwEnqueue_whas,
       pcieCtrl_userWriteQ_pwDequeue_whas,
       pcieCtrl_userWriteQ_pwEnqueue_whas;

  // register pcieCtrl_busyWriteTagQ_rCache
  reg [17 : 0] pcieCtrl_busyWriteTagQ_rCache;
  wire [17 : 0] pcieCtrl_busyWriteTagQ_rCache_D_IN;
  wire pcieCtrl_busyWriteTagQ_rCache_EN;

  // register pcieCtrl_busyWriteTagQ_rRdPtr
  reg [8 : 0] pcieCtrl_busyWriteTagQ_rRdPtr;
  wire [8 : 0] pcieCtrl_busyWriteTagQ_rRdPtr_D_IN;
  wire pcieCtrl_busyWriteTagQ_rRdPtr_EN;

  // register pcieCtrl_busyWriteTagQ_rWrPtr
  reg [8 : 0] pcieCtrl_busyWriteTagQ_rWrPtr;
  wire [8 : 0] pcieCtrl_busyWriteTagQ_rWrPtr_D_IN;
  wire pcieCtrl_busyWriteTagQ_rWrPtr_EN;

  // register pcieCtrl_completionRecvLength
  reg [9 : 0] pcieCtrl_completionRecvLength;
  wire [9 : 0] pcieCtrl_completionRecvLength_D_IN;
  wire pcieCtrl_completionRecvLength_EN;

  // register pcieCtrl_completionRecvTag
  reg [7 : 0] pcieCtrl_completionRecvTag;
  wire [7 : 0] pcieCtrl_completionRecvTag_D_IN;
  wire pcieCtrl_completionRecvTag_EN;

  // register pcieCtrl_configBuffer_serverAdapterA_cnt
  reg [2 : 0] pcieCtrl_configBuffer_serverAdapterA_cnt;
  wire [2 : 0] pcieCtrl_configBuffer_serverAdapterA_cnt_D_IN;
  wire pcieCtrl_configBuffer_serverAdapterA_cnt_EN;

  // register pcieCtrl_configBuffer_serverAdapterA_s1
  reg [1 : 0] pcieCtrl_configBuffer_serverAdapterA_s1;
  wire [1 : 0] pcieCtrl_configBuffer_serverAdapterA_s1_D_IN;
  wire pcieCtrl_configBuffer_serverAdapterA_s1_EN;

  // register pcieCtrl_configBuffer_serverAdapterB_cnt
  reg [2 : 0] pcieCtrl_configBuffer_serverAdapterB_cnt;
  wire [2 : 0] pcieCtrl_configBuffer_serverAdapterB_cnt_D_IN;
  wire pcieCtrl_configBuffer_serverAdapterB_cnt_EN;

  // register pcieCtrl_configBuffer_serverAdapterB_s1
  reg [1 : 0] pcieCtrl_configBuffer_serverAdapterB_s1;
  wire [1 : 0] pcieCtrl_configBuffer_serverAdapterB_s1_D_IN;
  wire pcieCtrl_configBuffer_serverAdapterB_s1_EN;

  // register pcieCtrl_curOrderTag
  reg [128 : 0] pcieCtrl_curOrderTag;
  wire [128 : 0] pcieCtrl_curOrderTag_D_IN;
  wire pcieCtrl_curOrderTag_EN;

  // register pcieCtrl_dataWordsRemain
  reg [9 : 0] pcieCtrl_dataWordsRemain;
  wire [9 : 0] pcieCtrl_dataWordsRemain_D_IN;
  wire pcieCtrl_dataWordsRemain_EN;

  // register pcieCtrl_debugCode
  reg [31 : 0] pcieCtrl_debugCode;
  wire [31 : 0] pcieCtrl_debugCode_D_IN;
  wire pcieCtrl_debugCode_EN;

  // register pcieCtrl_dmaReadBuffer
  reg [31 : 0] pcieCtrl_dmaReadBuffer;
  wire [31 : 0] pcieCtrl_dmaReadBuffer_D_IN;
  wire pcieCtrl_dmaReadBuffer_EN;

  // register pcieCtrl_dmaReadOutCntDn
  reg [7 : 0] pcieCtrl_dmaReadOutCntDn;
  wire [7 : 0] pcieCtrl_dmaReadOutCntDn_D_IN;
  wire pcieCtrl_dmaReadOutCntDn_EN;

  // register pcieCtrl_dmaReadOutCntUp
  reg [7 : 0] pcieCtrl_dmaReadOutCntUp;
  wire [7 : 0] pcieCtrl_dmaReadOutCntUp_D_IN;
  wire pcieCtrl_dmaReadOutCntUp_EN;

  // register pcieCtrl_dmaReadOutQ_rCache
  reg [136 : 0] pcieCtrl_dmaReadOutQ_rCache;
  wire [136 : 0] pcieCtrl_dmaReadOutQ_rCache_D_IN;
  wire pcieCtrl_dmaReadOutQ_rCache_EN;

  // register pcieCtrl_dmaReadOutQ_rRdPtr
  reg [7 : 0] pcieCtrl_dmaReadOutQ_rRdPtr;
  wire [7 : 0] pcieCtrl_dmaReadOutQ_rRdPtr_D_IN;
  wire pcieCtrl_dmaReadOutQ_rRdPtr_EN;

  // register pcieCtrl_dmaReadOutQ_rWrPtr
  reg [7 : 0] pcieCtrl_dmaReadOutQ_rWrPtr;
  wire [7 : 0] pcieCtrl_dmaReadOutQ_rWrPtr_D_IN;
  wire pcieCtrl_dmaReadOutQ_rWrPtr_EN;

  // register pcieCtrl_dmaReadStartAddr
  reg [31 : 0] pcieCtrl_dmaReadStartAddr;
  wire [31 : 0] pcieCtrl_dmaReadStartAddr_D_IN;
  wire pcieCtrl_dmaReadStartAddr_EN;

  // register pcieCtrl_dmaReadTag
  reg [7 : 0] pcieCtrl_dmaReadTag;
  wire [7 : 0] pcieCtrl_dmaReadTag_D_IN;
  wire pcieCtrl_dmaReadTag_EN;

  // register pcieCtrl_dmaReadTagOrderQ_rCache
  reg [17 : 0] pcieCtrl_dmaReadTagOrderQ_rCache;
  wire [17 : 0] pcieCtrl_dmaReadTagOrderQ_rCache_D_IN;
  wire pcieCtrl_dmaReadTagOrderQ_rCache_EN;

  // register pcieCtrl_dmaReadTagOrderQ_rRdPtr
  reg [8 : 0] pcieCtrl_dmaReadTagOrderQ_rRdPtr;
  wire [8 : 0] pcieCtrl_dmaReadTagOrderQ_rRdPtr_D_IN;
  wire pcieCtrl_dmaReadTagOrderQ_rRdPtr_EN;

  // register pcieCtrl_dmaReadTagOrderQ_rWrPtr
  reg [8 : 0] pcieCtrl_dmaReadTagOrderQ_rWrPtr;
  wire [8 : 0] pcieCtrl_dmaReadTagOrderQ_rWrPtr_D_IN;
  wire pcieCtrl_dmaReadTagOrderQ_rWrPtr_EN;

  // register pcieCtrl_dmaReadWordQ_rCache
  reg [145 : 0] pcieCtrl_dmaReadWordQ_rCache;
  wire [145 : 0] pcieCtrl_dmaReadWordQ_rCache_D_IN;
  wire pcieCtrl_dmaReadWordQ_rCache_EN;

  // register pcieCtrl_dmaReadWordQ_rRdPtr
  reg [8 : 0] pcieCtrl_dmaReadWordQ_rRdPtr;
  wire [8 : 0] pcieCtrl_dmaReadWordQ_rRdPtr_D_IN;
  wire pcieCtrl_dmaReadWordQ_rRdPtr_EN;

  // register pcieCtrl_dmaReadWordQ_rWrPtr
  reg [8 : 0] pcieCtrl_dmaReadWordQ_rWrPtr;
  wire [8 : 0] pcieCtrl_dmaReadWordQ_rWrPtr_D_IN;
  wire pcieCtrl_dmaReadWordQ_rWrPtr_EN;

  // register pcieCtrl_dmaReadWords
  reg [9 : 0] pcieCtrl_dmaReadWords;
  wire [9 : 0] pcieCtrl_dmaReadWords_D_IN;
  wire pcieCtrl_dmaReadWords_EN;

  // register pcieCtrl_dmaSendWords
  reg [9 : 0] pcieCtrl_dmaSendWords;
  wire [9 : 0] pcieCtrl_dmaSendWords_D_IN;
  wire pcieCtrl_dmaSendWords_EN;

  // register pcieCtrl_dmaStartAddr
  reg [31 : 0] pcieCtrl_dmaStartAddr;
  wire [31 : 0] pcieCtrl_dmaStartAddr_D_IN;
  wire pcieCtrl_dmaStartAddr_EN;

  // register pcieCtrl_dmaWriteBuf
  reg [127 : 0] pcieCtrl_dmaWriteBuf;
  wire [127 : 0] pcieCtrl_dmaWriteBuf_D_IN;
  wire pcieCtrl_dmaWriteBuf_EN;

  // register pcieCtrl_dmaWriteWordIn
  reg [9 : 0] pcieCtrl_dmaWriteWordIn;
  wire [9 : 0] pcieCtrl_dmaWriteWordIn_D_IN;
  wire pcieCtrl_dmaWriteWordIn_EN;

  // register pcieCtrl_dmaWriteWordOut
  reg [9 : 0] pcieCtrl_dmaWriteWordOut;
  wire [9 : 0] pcieCtrl_dmaWriteWordOut_D_IN;
  wire pcieCtrl_dmaWriteWordOut_EN;

  // register pcieCtrl_doneMap_serverAdapterA_cnt
  reg [2 : 0] pcieCtrl_doneMap_serverAdapterA_cnt;
  wire [2 : 0] pcieCtrl_doneMap_serverAdapterA_cnt_D_IN;
  wire pcieCtrl_doneMap_serverAdapterA_cnt_EN;

  // register pcieCtrl_doneMap_serverAdapterA_s1
  reg [1 : 0] pcieCtrl_doneMap_serverAdapterA_s1;
  wire [1 : 0] pcieCtrl_doneMap_serverAdapterA_s1_D_IN;
  wire pcieCtrl_doneMap_serverAdapterA_s1_EN;

  // register pcieCtrl_doneMap_serverAdapterB_cnt
  reg [2 : 0] pcieCtrl_doneMap_serverAdapterB_cnt;
  wire [2 : 0] pcieCtrl_doneMap_serverAdapterB_cnt_D_IN;
  wire pcieCtrl_doneMap_serverAdapterB_cnt_EN;

  // register pcieCtrl_doneMap_serverAdapterB_s1
  reg [1 : 0] pcieCtrl_doneMap_serverAdapterB_s1;
  wire [1 : 0] pcieCtrl_doneMap_serverAdapterB_s1_D_IN;
  wire pcieCtrl_doneMap_serverAdapterB_s1_EN;

  // register pcieCtrl_doneShifter_outputFifo_rv
  reg [128 : 0] pcieCtrl_doneShifter_outputFifo_rv;
  wire [128 : 0] pcieCtrl_doneShifter_outputFifo_rv_D_IN;
  wire pcieCtrl_doneShifter_outputFifo_rv_EN;

  // register pcieCtrl_doneTagMap
  reg [127 : 0] pcieCtrl_doneTagMap;
  wire [127 : 0] pcieCtrl_doneTagMap_D_IN;
  wire pcieCtrl_doneTagMap_EN;

  // register pcieCtrl_freeReadTagQ_rCache
  reg [17 : 0] pcieCtrl_freeReadTagQ_rCache;
  wire [17 : 0] pcieCtrl_freeReadTagQ_rCache_D_IN;
  wire pcieCtrl_freeReadTagQ_rCache_EN;

  // register pcieCtrl_freeReadTagQ_rRdPtr
  reg [8 : 0] pcieCtrl_freeReadTagQ_rRdPtr;
  wire [8 : 0] pcieCtrl_freeReadTagQ_rRdPtr_D_IN;
  wire pcieCtrl_freeReadTagQ_rRdPtr_EN;

  // register pcieCtrl_freeReadTagQ_rWrPtr
  reg [8 : 0] pcieCtrl_freeReadTagQ_rWrPtr;
  wire [8 : 0] pcieCtrl_freeReadTagQ_rWrPtr_D_IN;
  wire pcieCtrl_freeReadTagQ_rWrPtr_EN;

  // register pcieCtrl_freeTagCnt
  reg [7 : 0] pcieCtrl_freeTagCnt;
  wire [7 : 0] pcieCtrl_freeTagCnt_D_IN;
  wire pcieCtrl_freeTagCnt_EN;

  // register pcieCtrl_freeWriteTagQ_rCache
  reg [17 : 0] pcieCtrl_freeWriteTagQ_rCache;
  wire [17 : 0] pcieCtrl_freeWriteTagQ_rCache_D_IN;
  wire pcieCtrl_freeWriteTagQ_rCache_EN;

  // register pcieCtrl_freeWriteTagQ_rRdPtr
  reg [8 : 0] pcieCtrl_freeWriteTagQ_rRdPtr;
  wire [8 : 0] pcieCtrl_freeWriteTagQ_rRdPtr_D_IN;
  wire pcieCtrl_freeWriteTagQ_rRdPtr_EN;

  // register pcieCtrl_freeWriteTagQ_rWrPtr
  reg [8 : 0] pcieCtrl_freeWriteTagQ_rWrPtr;
  wire [8 : 0] pcieCtrl_freeWriteTagQ_rWrPtr_D_IN;
  wire pcieCtrl_freeWriteTagQ_rWrPtr_EN;

  // register pcieCtrl_keepBuffer
  reg [15 : 0] pcieCtrl_keepBuffer;
  wire [15 : 0] pcieCtrl_keepBuffer_D_IN;
  wire pcieCtrl_keepBuffer_EN;

  // register pcieCtrl_leddata_0
  reg pcieCtrl_leddata_0;
  wire pcieCtrl_leddata_0_D_IN, pcieCtrl_leddata_0_EN;

  // register pcieCtrl_leddata_1
  reg pcieCtrl_leddata_1;
  wire pcieCtrl_leddata_1_D_IN, pcieCtrl_leddata_1_EN;

  // register pcieCtrl_leddata_2
  reg pcieCtrl_leddata_2;
  wire pcieCtrl_leddata_2_D_IN, pcieCtrl_leddata_2_EN;

  // register pcieCtrl_leddata_3
  reg pcieCtrl_leddata_3;
  wire pcieCtrl_leddata_3_D_IN, pcieCtrl_leddata_3_EN;

  // register pcieCtrl_orderShifter_outputFifo_rv
  reg [128 : 0] pcieCtrl_orderShifter_outputFifo_rv;
  wire [128 : 0] pcieCtrl_orderShifter_outputFifo_rv_D_IN;
  wire pcieCtrl_orderShifter_outputFifo_rv_EN;

  // register pcieCtrl_orderTagMap
  reg [127 : 0] pcieCtrl_orderTagMap;
  wire [127 : 0] pcieCtrl_orderTagMap_D_IN;
  wire pcieCtrl_orderTagMap_EN;

  // register pcieCtrl_partBuffer
  reg [128 : 0] pcieCtrl_partBuffer;
  wire [128 : 0] pcieCtrl_partBuffer_D_IN;
  wire pcieCtrl_partBuffer_EN;

  // register pcieCtrl_partOffset
  reg [4 : 0] pcieCtrl_partOffset;
  wire [4 : 0] pcieCtrl_partOffset_D_IN;
  wire pcieCtrl_partOffset_EN;

  // register pcieCtrl_read32data
  reg [31 : 0] pcieCtrl_read32data;
  wire [31 : 0] pcieCtrl_read32data_D_IN;
  wire pcieCtrl_read32data_EN;

  // register pcieCtrl_readCompletionsb_datav_0
  reg [7 : 0] pcieCtrl_readCompletionsb_datav_0;
  wire [7 : 0] pcieCtrl_readCompletionsb_datav_0_D_IN;
  wire pcieCtrl_readCompletionsb_datav_0_EN;

  // register pcieCtrl_readCompletionsb_datav_1
  reg [7 : 0] pcieCtrl_readCompletionsb_datav_1;
  wire [7 : 0] pcieCtrl_readCompletionsb_datav_1_D_IN;
  wire pcieCtrl_readCompletionsb_datav_1_EN;

  // register pcieCtrl_readCompletionsb_datav_2
  reg [7 : 0] pcieCtrl_readCompletionsb_datav_2;
  wire [7 : 0] pcieCtrl_readCompletionsb_datav_2_D_IN;
  wire pcieCtrl_readCompletionsb_datav_2_EN;

  // register pcieCtrl_readCompletionsb_datav_3
  reg [7 : 0] pcieCtrl_readCompletionsb_datav_3;
  wire [7 : 0] pcieCtrl_readCompletionsb_datav_3_D_IN;
  wire pcieCtrl_readCompletionsb_datav_3_EN;

  // register pcieCtrl_readCompletionsb_deqoff
  reg [1 : 0] pcieCtrl_readCompletionsb_deqoff;
  wire [1 : 0] pcieCtrl_readCompletionsb_deqoff_D_IN;
  wire pcieCtrl_readCompletionsb_deqoff_EN;

  // register pcieCtrl_readCompletionsb_enqoff
  reg [1 : 0] pcieCtrl_readCompletionsb_enqoff;
  wire [1 : 0] pcieCtrl_readCompletionsb_enqoff_D_IN;
  wire pcieCtrl_readCompletionsb_enqoff_EN;

  // register pcieCtrl_readFlushTag
  reg [27 : 0] pcieCtrl_readFlushTag;
  wire [27 : 0] pcieCtrl_readFlushTag_D_IN;
  wire pcieCtrl_readFlushTag_EN;

  // register pcieCtrl_readReorder_serverAdapterA_cnt
  reg [2 : 0] pcieCtrl_readReorder_serverAdapterA_cnt;
  wire [2 : 0] pcieCtrl_readReorder_serverAdapterA_cnt_D_IN;
  wire pcieCtrl_readReorder_serverAdapterA_cnt_EN;

  // register pcieCtrl_readReorder_serverAdapterA_s1
  reg [1 : 0] pcieCtrl_readReorder_serverAdapterA_s1;
  wire [1 : 0] pcieCtrl_readReorder_serverAdapterA_s1_D_IN;
  wire pcieCtrl_readReorder_serverAdapterA_s1_EN;

  // register pcieCtrl_readReorder_serverAdapterB_cnt
  reg [2 : 0] pcieCtrl_readReorder_serverAdapterB_cnt;
  wire [2 : 0] pcieCtrl_readReorder_serverAdapterB_cnt_D_IN;
  wire pcieCtrl_readReorder_serverAdapterB_cnt_EN;

  // register pcieCtrl_readReorder_serverAdapterB_s1
  reg [1 : 0] pcieCtrl_readReorder_serverAdapterB_s1;
  wire [1 : 0] pcieCtrl_readReorder_serverAdapterB_s1_D_IN;
  wire pcieCtrl_readReorder_serverAdapterB_s1_EN;

  // register pcieCtrl_rxOffset
  reg [9 : 0] pcieCtrl_rxOffset;
  wire [9 : 0] pcieCtrl_rxOffset_D_IN;
  wire pcieCtrl_rxOffset_EN;

  // register pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio
  reg pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio;
  wire pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio_D_IN,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio_EN;

  // register pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio
  reg pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio;
  wire pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio_D_IN,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio_EN;

  // register pcieCtrl_sendTLPm_ma_0_mb_prio
  reg pcieCtrl_sendTLPm_ma_0_mb_prio;
  wire pcieCtrl_sendTLPm_ma_0_mb_prio_D_IN, pcieCtrl_sendTLPm_ma_0_mb_prio_EN;

  // register pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio
  reg pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio;
  wire pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio_D_IN,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio_EN;

  // register pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio
  reg pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio;
  wire pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio_D_IN,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio_EN;

  // register pcieCtrl_sendTLPm_ma_1_mb_prio
  reg pcieCtrl_sendTLPm_ma_1_mb_prio;
  wire pcieCtrl_sendTLPm_ma_1_mb_prio_D_IN, pcieCtrl_sendTLPm_ma_1_mb_prio_EN;

  // register pcieCtrl_sendTLPm_mb_prio
  reg pcieCtrl_sendTLPm_mb_prio;
  wire pcieCtrl_sendTLPm_mb_prio_D_IN, pcieCtrl_sendTLPm_mb_prio_EN;

  // register pcieCtrl_tagMap_serverAdapterA_cnt
  reg [2 : 0] pcieCtrl_tagMap_serverAdapterA_cnt;
  wire [2 : 0] pcieCtrl_tagMap_serverAdapterA_cnt_D_IN;
  wire pcieCtrl_tagMap_serverAdapterA_cnt_EN;

  // register pcieCtrl_tagMap_serverAdapterA_s1
  reg [1 : 0] pcieCtrl_tagMap_serverAdapterA_s1;
  wire [1 : 0] pcieCtrl_tagMap_serverAdapterA_s1_D_IN;
  wire pcieCtrl_tagMap_serverAdapterA_s1_EN;

  // register pcieCtrl_tagMap_serverAdapterB_cnt
  reg [2 : 0] pcieCtrl_tagMap_serverAdapterB_cnt;
  wire [2 : 0] pcieCtrl_tagMap_serverAdapterB_cnt_D_IN;
  wire pcieCtrl_tagMap_serverAdapterB_cnt_EN;

  // register pcieCtrl_tagMap_serverAdapterB_s1
  reg [1 : 0] pcieCtrl_tagMap_serverAdapterB_s1;
  wire [1 : 0] pcieCtrl_tagMap_serverAdapterB_s1_D_IN;
  wire pcieCtrl_tagMap_serverAdapterB_s1_EN;

  // register pcieCtrl_tagWordsLeft
  reg [47 : 0] pcieCtrl_tagWordsLeft;
  wire [47 : 0] pcieCtrl_tagWordsLeft_D_IN;
  wire pcieCtrl_tagWordsLeft_EN;

  // register pcieCtrl_tlpCount
  reg [31 : 0] pcieCtrl_tlpCount;
  wire [31 : 0] pcieCtrl_tlpCount_D_IN;
  wire pcieCtrl_tlpCount_EN;

  // register pcieCtrl_userReadEmit
  reg [31 : 0] pcieCtrl_userReadEmit;
  wire [31 : 0] pcieCtrl_userReadEmit_D_IN;
  wire pcieCtrl_userReadEmit_EN;

  // register pcieCtrl_userReadQ1_rCache
  reg [62 : 0] pcieCtrl_userReadQ1_rCache;
  wire [62 : 0] pcieCtrl_userReadQ1_rCache_D_IN;
  wire pcieCtrl_userReadQ1_rCache_EN;

  // register pcieCtrl_userReadQ1_rRdPtr
  reg [10 : 0] pcieCtrl_userReadQ1_rRdPtr;
  wire [10 : 0] pcieCtrl_userReadQ1_rRdPtr_D_IN;
  wire pcieCtrl_userReadQ1_rRdPtr_EN;

  // register pcieCtrl_userReadQ1_rWrPtr
  reg [10 : 0] pcieCtrl_userReadQ1_rWrPtr;
  wire [10 : 0] pcieCtrl_userReadQ1_rWrPtr_D_IN;
  wire pcieCtrl_userReadQ1_rWrPtr_EN;

  // register pcieCtrl_userWriteBudget
  reg [15 : 0] pcieCtrl_userWriteBudget;
  wire [15 : 0] pcieCtrl_userWriteBudget_D_IN;
  wire pcieCtrl_userWriteBudget_EN;

  // register pcieCtrl_userWriteEmit
  reg [31 : 0] pcieCtrl_userWriteEmit;
  wire [31 : 0] pcieCtrl_userWriteEmit_D_IN;
  wire pcieCtrl_userWriteEmit_EN;

  // register pcieCtrl_userWriteQ_rCache
  reg [63 : 0] pcieCtrl_userWriteQ_rCache;
  wire [63 : 0] pcieCtrl_userWriteQ_rCache_D_IN;
  wire pcieCtrl_userWriteQ_rCache_EN;

  // register pcieCtrl_userWriteQ_rRdPtr
  reg [10 : 0] pcieCtrl_userWriteQ_rRdPtr;
  wire [10 : 0] pcieCtrl_userWriteQ_rRdPtr_D_IN;
  wire pcieCtrl_userWriteQ_rRdPtr_EN;

  // register pcieCtrl_userWriteQ_rWrPtr
  reg [10 : 0] pcieCtrl_userWriteQ_rWrPtr;
  wire [10 : 0] pcieCtrl_userWriteQ_rWrPtr_D_IN;
  wire pcieCtrl_userWriteQ_rWrPtr_EN;

  // ports of submodule pcie
  wire [127 : 0] pcie_m_axis_rx_tdata, pcie_s_axis_tx_tdata;
  wire [31 : 0] pcie_debug_data;
  wire [21 : 0] pcie_m_axis_rx_tuser;
  wire [15 : 0] pcie_cfg_completer_id,
		pcie_m_axis_rx_tkeep,
		pcie_s_axis_tx_tkeep;
  wire [7 : 0] pcie_pci_exp_rxn,
	       pcie_pci_exp_rxp,
	       pcie_pci_exp_txn,
	       pcie_pci_exp_txp;
  wire pcie_asser_uptrain_data,
       pcie_assert_interrupt,
       pcie_assert_interrupt_data,
       pcie_assert_interrupt_rdy,
       pcie_assert_uptrain,
       pcie_m_axis_rx_tready,
       pcie_m_axis_rx_tvalid,
       pcie_rx_en_keep,
       pcie_rx_en_last,
       pcie_rx_en_user,
       pcie_s_axis_tx_tlast,
       pcie_s_axis_tx_tready,
       pcie_s_axis_tx_tvalid,
       pcie_sys_clk_o,
       pcie_sys_rst_n_o,
       pcie_tx_en_keep,
       pcie_tx_en_last,
       pcie_user_clk,
       pcie_user_reset_n;

  // ports of submodule pcieCtrl_bufidxRequestedWriteQ
  wire pcieCtrl_bufidxRequestedWriteQ_CLR,
       pcieCtrl_bufidxRequestedWriteQ_DEQ,
       pcieCtrl_bufidxRequestedWriteQ_D_IN,
       pcieCtrl_bufidxRequestedWriteQ_D_OUT,
       pcieCtrl_bufidxRequestedWriteQ_EMPTY_N,
       pcieCtrl_bufidxRequestedWriteQ_ENQ,
       pcieCtrl_bufidxRequestedWriteQ_FULL_N;

  // ports of submodule pcieCtrl_burstUpdReqQ
  wire [17 : 0] pcieCtrl_burstUpdReqQ_D_IN, pcieCtrl_burstUpdReqQ_D_OUT;
  wire pcieCtrl_burstUpdReqQ_CLR,
       pcieCtrl_burstUpdReqQ_DEQ,
       pcieCtrl_burstUpdReqQ_EMPTY_N,
       pcieCtrl_burstUpdReqQ_ENQ,
       pcieCtrl_burstUpdReqQ_FULL_N;

  // ports of submodule pcieCtrl_busyWriteTagQ_memory
  wire [7 : 0] pcieCtrl_busyWriteTagQ_memory_ADDRA,
	       pcieCtrl_busyWriteTagQ_memory_ADDRB,
	       pcieCtrl_busyWriteTagQ_memory_DIA,
	       pcieCtrl_busyWriteTagQ_memory_DIB,
	       pcieCtrl_busyWriteTagQ_memory_DOB;
  wire pcieCtrl_busyWriteTagQ_memory_ENA,
       pcieCtrl_busyWriteTagQ_memory_ENB,
       pcieCtrl_busyWriteTagQ_memory_WEA,
       pcieCtrl_busyWriteTagQ_memory_WEB;

  // ports of submodule pcieCtrl_configBuffer_memory
  wire [31 : 0] pcieCtrl_configBuffer_memory_DIA,
		pcieCtrl_configBuffer_memory_DIB,
		pcieCtrl_configBuffer_memory_DOA,
		pcieCtrl_configBuffer_memory_DOB;
  wire [11 : 0] pcieCtrl_configBuffer_memory_ADDRA,
		pcieCtrl_configBuffer_memory_ADDRB;
  wire pcieCtrl_configBuffer_memory_ENA,
       pcieCtrl_configBuffer_memory_ENB,
       pcieCtrl_configBuffer_memory_WEA,
       pcieCtrl_configBuffer_memory_WEB;

  // ports of submodule pcieCtrl_configBuffer_serverAdapterA_outDataCore
  wire [31 : 0] pcieCtrl_configBuffer_serverAdapterA_outDataCore_D_IN,
		pcieCtrl_configBuffer_serverAdapterA_outDataCore_D_OUT;
  wire pcieCtrl_configBuffer_serverAdapterA_outDataCore_CLR,
       pcieCtrl_configBuffer_serverAdapterA_outDataCore_DEQ,
       pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N,
       pcieCtrl_configBuffer_serverAdapterA_outDataCore_ENQ,
       pcieCtrl_configBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_configBuffer_serverAdapterB_outDataCore
  wire [31 : 0] pcieCtrl_configBuffer_serverAdapterB_outDataCore_D_IN,
		pcieCtrl_configBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pcieCtrl_configBuffer_serverAdapterB_outDataCore_CLR,
       pcieCtrl_configBuffer_serverAdapterB_outDataCore_DEQ,
       pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pcieCtrl_configBuffer_serverAdapterB_outDataCore_ENQ,
       pcieCtrl_configBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_dmaPageReadReqQ
  wire [49 : 0] pcieCtrl_dmaPageReadReqQ_D_IN, pcieCtrl_dmaPageReadReqQ_D_OUT;
  wire pcieCtrl_dmaPageReadReqQ_CLR,
       pcieCtrl_dmaPageReadReqQ_DEQ,
       pcieCtrl_dmaPageReadReqQ_EMPTY_N,
       pcieCtrl_dmaPageReadReqQ_ENQ,
       pcieCtrl_dmaPageReadReqQ_FULL_N;

  // ports of submodule pcieCtrl_dmaPageWriteReqQ
  wire [49 : 0] pcieCtrl_dmaPageWriteReqQ_D_IN,
		pcieCtrl_dmaPageWriteReqQ_D_OUT;
  wire pcieCtrl_dmaPageWriteReqQ_CLR,
       pcieCtrl_dmaPageWriteReqQ_DEQ,
       pcieCtrl_dmaPageWriteReqQ_EMPTY_N,
       pcieCtrl_dmaPageWriteReqQ_ENQ,
       pcieCtrl_dmaPageWriteReqQ_FULL_N;

  // ports of submodule pcieCtrl_dmaReadBufAddrQ
  wire [31 : 0] pcieCtrl_dmaReadBufAddrQ_D_IN, pcieCtrl_dmaReadBufAddrQ_D_OUT;
  wire pcieCtrl_dmaReadBufAddrQ_CLR,
       pcieCtrl_dmaReadBufAddrQ_DEQ,
       pcieCtrl_dmaReadBufAddrQ_EMPTY_N,
       pcieCtrl_dmaReadBufAddrQ_ENQ,
       pcieCtrl_dmaReadBufAddrQ_FULL_N;

  // ports of submodule pcieCtrl_dmaReadOutQ_memory
  wire [127 : 0] pcieCtrl_dmaReadOutQ_memory_DIA,
		 pcieCtrl_dmaReadOutQ_memory_DIB,
		 pcieCtrl_dmaReadOutQ_memory_DOB;
  wire [6 : 0] pcieCtrl_dmaReadOutQ_memory_ADDRA,
	       pcieCtrl_dmaReadOutQ_memory_ADDRB;
  wire pcieCtrl_dmaReadOutQ_memory_ENA,
       pcieCtrl_dmaReadOutQ_memory_ENB,
       pcieCtrl_dmaReadOutQ_memory_WEA,
       pcieCtrl_dmaReadOutQ_memory_WEB;

  // ports of submodule pcieCtrl_dmaReadOutRQ
  wire [127 : 0] pcieCtrl_dmaReadOutRQ_D_IN, pcieCtrl_dmaReadOutRQ_D_OUT;
  wire pcieCtrl_dmaReadOutRQ_CLR,
       pcieCtrl_dmaReadOutRQ_DEQ,
       pcieCtrl_dmaReadOutRQ_EMPTY_N,
       pcieCtrl_dmaReadOutRQ_ENQ,
       pcieCtrl_dmaReadOutRQ_FULL_N;

  // ports of submodule pcieCtrl_dmaReadReqQ
  wire [49 : 0] pcieCtrl_dmaReadReqQ_D_IN, pcieCtrl_dmaReadReqQ_D_OUT;
  wire pcieCtrl_dmaReadReqQ_CLR,
       pcieCtrl_dmaReadReqQ_DEQ,
       pcieCtrl_dmaReadReqQ_EMPTY_N,
       pcieCtrl_dmaReadReqQ_ENQ,
       pcieCtrl_dmaReadReqQ_FULL_N;

  // ports of submodule pcieCtrl_dmaReadTagOrderQ_memory
  wire [7 : 0] pcieCtrl_dmaReadTagOrderQ_memory_ADDRA,
	       pcieCtrl_dmaReadTagOrderQ_memory_ADDRB,
	       pcieCtrl_dmaReadTagOrderQ_memory_DIA,
	       pcieCtrl_dmaReadTagOrderQ_memory_DIB,
	       pcieCtrl_dmaReadTagOrderQ_memory_DOB;
  wire pcieCtrl_dmaReadTagOrderQ_memory_ENA,
       pcieCtrl_dmaReadTagOrderQ_memory_ENB,
       pcieCtrl_dmaReadTagOrderQ_memory_WEA,
       pcieCtrl_dmaReadTagOrderQ_memory_WEB;

  // ports of submodule pcieCtrl_dmaReadWordQ_memory
  wire [135 : 0] pcieCtrl_dmaReadWordQ_memory_DIA,
		 pcieCtrl_dmaReadWordQ_memory_DIB,
		 pcieCtrl_dmaReadWordQ_memory_DOB;
  wire [7 : 0] pcieCtrl_dmaReadWordQ_memory_ADDRA,
	       pcieCtrl_dmaReadWordQ_memory_ADDRB;
  wire pcieCtrl_dmaReadWordQ_memory_ENA,
       pcieCtrl_dmaReadWordQ_memory_ENB,
       pcieCtrl_dmaReadWordQ_memory_WEA,
       pcieCtrl_dmaReadWordQ_memory_WEB;

  // ports of submodule pcieCtrl_dmaReadWordRQ
  wire [135 : 0] pcieCtrl_dmaReadWordRQ_D_IN, pcieCtrl_dmaReadWordRQ_D_OUT;
  wire pcieCtrl_dmaReadWordRQ_CLR,
       pcieCtrl_dmaReadWordRQ_DEQ,
       pcieCtrl_dmaReadWordRQ_EMPTY_N,
       pcieCtrl_dmaReadWordRQ_ENQ,
       pcieCtrl_dmaReadWordRQ_FULL_N;

  // ports of submodule pcieCtrl_dmaWriteBufAddrQ
  wire [31 : 0] pcieCtrl_dmaWriteBufAddrQ_D_IN,
		pcieCtrl_dmaWriteBufAddrQ_D_OUT;
  wire pcieCtrl_dmaWriteBufAddrQ_CLR,
       pcieCtrl_dmaWriteBufAddrQ_DEQ,
       pcieCtrl_dmaWriteBufAddrQ_EMPTY_N,
       pcieCtrl_dmaWriteBufAddrQ_ENQ,
       pcieCtrl_dmaWriteBufAddrQ_FULL_N;

  // ports of submodule pcieCtrl_dmaWriteReqQ
  wire [49 : 0] pcieCtrl_dmaWriteReqQ_D_IN, pcieCtrl_dmaWriteReqQ_D_OUT;
  wire pcieCtrl_dmaWriteReqQ_CLR,
       pcieCtrl_dmaWriteReqQ_DEQ,
       pcieCtrl_dmaWriteReqQ_EMPTY_N,
       pcieCtrl_dmaWriteReqQ_ENQ,
       pcieCtrl_dmaWriteReqQ_FULL_N;

  // ports of submodule pcieCtrl_dmaWriteWordQ
  wire [127 : 0] pcieCtrl_dmaWriteWordQ_D_IN, pcieCtrl_dmaWriteWordQ_D_OUT;
  wire pcieCtrl_dmaWriteWordQ_CLR,
       pcieCtrl_dmaWriteWordQ_DEQ,
       pcieCtrl_dmaWriteWordQ_EMPTY_N,
       pcieCtrl_dmaWriteWordQ_ENQ,
       pcieCtrl_dmaWriteWordQ_FULL_N;

  // ports of submodule pcieCtrl_doneMap_memory
  wire [17 : 0] pcieCtrl_doneMap_memory_DIA,
		pcieCtrl_doneMap_memory_DIB,
		pcieCtrl_doneMap_memory_DOA,
		pcieCtrl_doneMap_memory_DOB;
  wire [7 : 0] pcieCtrl_doneMap_memory_ADDRA, pcieCtrl_doneMap_memory_ADDRB;
  wire pcieCtrl_doneMap_memory_ENA,
       pcieCtrl_doneMap_memory_ENB,
       pcieCtrl_doneMap_memory_WEA,
       pcieCtrl_doneMap_memory_WEB;

  // ports of submodule pcieCtrl_doneMap_serverAdapterA_outDataCore
  wire [17 : 0] pcieCtrl_doneMap_serverAdapterA_outDataCore_D_IN;
  wire pcieCtrl_doneMap_serverAdapterA_outDataCore_CLR,
       pcieCtrl_doneMap_serverAdapterA_outDataCore_DEQ,
       pcieCtrl_doneMap_serverAdapterA_outDataCore_ENQ,
       pcieCtrl_doneMap_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_doneMap_serverAdapterB_outDataCore
  wire [17 : 0] pcieCtrl_doneMap_serverAdapterB_outDataCore_D_IN,
		pcieCtrl_doneMap_serverAdapterB_outDataCore_D_OUT;
  wire pcieCtrl_doneMap_serverAdapterB_outDataCore_CLR,
       pcieCtrl_doneMap_serverAdapterB_outDataCore_DEQ,
       pcieCtrl_doneMap_serverAdapterB_outDataCore_EMPTY_N,
       pcieCtrl_doneMap_serverAdapterB_outDataCore_ENQ,
       pcieCtrl_doneMap_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_doneReorderedTagQ
  wire [7 : 0] pcieCtrl_doneReorderedTagQ_D_IN,
	       pcieCtrl_doneReorderedTagQ_D_OUT;
  wire pcieCtrl_doneReorderedTagQ_CLR,
       pcieCtrl_doneReorderedTagQ_DEQ,
       pcieCtrl_doneReorderedTagQ_EMPTY_N,
       pcieCtrl_doneReorderedTagQ_ENQ,
       pcieCtrl_doneReorderedTagQ_FULL_N;

  // ports of submodule pcieCtrl_doneShifter_stageFifos_0
  wire [134 : 0] pcieCtrl_doneShifter_stageFifos_0_D_IN,
		 pcieCtrl_doneShifter_stageFifos_0_D_OUT;
  wire pcieCtrl_doneShifter_stageFifos_0_CLR,
       pcieCtrl_doneShifter_stageFifos_0_DEQ,
       pcieCtrl_doneShifter_stageFifos_0_EMPTY_N,
       pcieCtrl_doneShifter_stageFifos_0_ENQ,
       pcieCtrl_doneShifter_stageFifos_0_FULL_N;

  // ports of submodule pcieCtrl_doneShifter_stageFifos_1
  wire [134 : 0] pcieCtrl_doneShifter_stageFifos_1_D_IN,
		 pcieCtrl_doneShifter_stageFifos_1_D_OUT;
  wire pcieCtrl_doneShifter_stageFifos_1_CLR,
       pcieCtrl_doneShifter_stageFifos_1_DEQ,
       pcieCtrl_doneShifter_stageFifos_1_EMPTY_N,
       pcieCtrl_doneShifter_stageFifos_1_ENQ,
       pcieCtrl_doneShifter_stageFifos_1_FULL_N;

  // ports of submodule pcieCtrl_doneShifter_stageFifos_2
  wire [134 : 0] pcieCtrl_doneShifter_stageFifos_2_D_IN,
		 pcieCtrl_doneShifter_stageFifos_2_D_OUT;
  wire pcieCtrl_doneShifter_stageFifos_2_CLR,
       pcieCtrl_doneShifter_stageFifos_2_DEQ,
       pcieCtrl_doneShifter_stageFifos_2_EMPTY_N,
       pcieCtrl_doneShifter_stageFifos_2_ENQ,
       pcieCtrl_doneShifter_stageFifos_2_FULL_N;

  // ports of submodule pcieCtrl_doneShifter_stageFifos_3
  wire [134 : 0] pcieCtrl_doneShifter_stageFifos_3_D_IN,
		 pcieCtrl_doneShifter_stageFifos_3_D_OUT;
  wire pcieCtrl_doneShifter_stageFifos_3_CLR,
       pcieCtrl_doneShifter_stageFifos_3_DEQ,
       pcieCtrl_doneShifter_stageFifos_3_EMPTY_N,
       pcieCtrl_doneShifter_stageFifos_3_ENQ,
       pcieCtrl_doneShifter_stageFifos_3_FULL_N;

  // ports of submodule pcieCtrl_doneShifter_stageFifos_4
  wire [134 : 0] pcieCtrl_doneShifter_stageFifos_4_D_IN,
		 pcieCtrl_doneShifter_stageFifos_4_D_OUT;
  wire pcieCtrl_doneShifter_stageFifos_4_CLR,
       pcieCtrl_doneShifter_stageFifos_4_DEQ,
       pcieCtrl_doneShifter_stageFifos_4_EMPTY_N,
       pcieCtrl_doneShifter_stageFifos_4_ENQ,
       pcieCtrl_doneShifter_stageFifos_4_FULL_N;

  // ports of submodule pcieCtrl_doneShifter_stageFifos_5
  wire [134 : 0] pcieCtrl_doneShifter_stageFifos_5_D_IN,
		 pcieCtrl_doneShifter_stageFifos_5_D_OUT;
  wire pcieCtrl_doneShifter_stageFifos_5_CLR,
       pcieCtrl_doneShifter_stageFifos_5_DEQ,
       pcieCtrl_doneShifter_stageFifos_5_EMPTY_N,
       pcieCtrl_doneShifter_stageFifos_5_ENQ,
       pcieCtrl_doneShifter_stageFifos_5_FULL_N;

  // ports of submodule pcieCtrl_doneShifter_stageFifos_6
  wire [134 : 0] pcieCtrl_doneShifter_stageFifos_6_D_IN,
		 pcieCtrl_doneShifter_stageFifos_6_D_OUT;
  wire pcieCtrl_doneShifter_stageFifos_6_CLR,
       pcieCtrl_doneShifter_stageFifos_6_DEQ,
       pcieCtrl_doneShifter_stageFifos_6_EMPTY_N,
       pcieCtrl_doneShifter_stageFifos_6_ENQ,
       pcieCtrl_doneShifter_stageFifos_6_FULL_N;

  // ports of submodule pcieCtrl_freeReadTagFQ
  wire [7 : 0] pcieCtrl_freeReadTagFQ_D_IN, pcieCtrl_freeReadTagFQ_D_OUT;
  wire pcieCtrl_freeReadTagFQ_CLR,
       pcieCtrl_freeReadTagFQ_DEQ,
       pcieCtrl_freeReadTagFQ_EMPTY_N,
       pcieCtrl_freeReadTagFQ_ENQ,
       pcieCtrl_freeReadTagFQ_FULL_N;

  // ports of submodule pcieCtrl_freeReadTagQ_memory
  wire [7 : 0] pcieCtrl_freeReadTagQ_memory_ADDRA,
	       pcieCtrl_freeReadTagQ_memory_ADDRB,
	       pcieCtrl_freeReadTagQ_memory_DIA,
	       pcieCtrl_freeReadTagQ_memory_DIB,
	       pcieCtrl_freeReadTagQ_memory_DOB;
  wire pcieCtrl_freeReadTagQ_memory_ENA,
       pcieCtrl_freeReadTagQ_memory_ENB,
       pcieCtrl_freeReadTagQ_memory_WEA,
       pcieCtrl_freeReadTagQ_memory_WEB;

  // ports of submodule pcieCtrl_freeWriteTagQ_memory
  wire [7 : 0] pcieCtrl_freeWriteTagQ_memory_ADDRA,
	       pcieCtrl_freeWriteTagQ_memory_ADDRB,
	       pcieCtrl_freeWriteTagQ_memory_DIA,
	       pcieCtrl_freeWriteTagQ_memory_DIB,
	       pcieCtrl_freeWriteTagQ_memory_DOB;
  wire pcieCtrl_freeWriteTagQ_memory_ENA,
       pcieCtrl_freeWriteTagQ_memory_ENB,
       pcieCtrl_freeWriteTagQ_memory_WEA,
       pcieCtrl_freeWriteTagQ_memory_WEB;

  // ports of submodule pcieCtrl_freeWriteTagStageQ
  wire [7 : 0] pcieCtrl_freeWriteTagStageQ_D_IN,
	       pcieCtrl_freeWriteTagStageQ_D_OUT;
  wire pcieCtrl_freeWriteTagStageQ_CLR,
       pcieCtrl_freeWriteTagStageQ_DEQ,
       pcieCtrl_freeWriteTagStageQ_EMPTY_N,
       pcieCtrl_freeWriteTagStageQ_ENQ,
       pcieCtrl_freeWriteTagStageQ_FULL_N;

  // ports of submodule pcieCtrl_ioReadQ
  wire [50 : 0] pcieCtrl_ioReadQ_D_IN, pcieCtrl_ioReadQ_D_OUT;
  wire pcieCtrl_ioReadQ_CLR,
       pcieCtrl_ioReadQ_DEQ,
       pcieCtrl_ioReadQ_EMPTY_N,
       pcieCtrl_ioReadQ_ENQ,
       pcieCtrl_ioReadQ_FULL_N;

  // ports of submodule pcieCtrl_orderShiftedQ
  wire [127 : 0] pcieCtrl_orderShiftedQ_D_IN, pcieCtrl_orderShiftedQ_D_OUT;
  wire pcieCtrl_orderShiftedQ_CLR,
       pcieCtrl_orderShiftedQ_DEQ,
       pcieCtrl_orderShiftedQ_EMPTY_N,
       pcieCtrl_orderShiftedQ_ENQ,
       pcieCtrl_orderShiftedQ_FULL_N;

  // ports of submodule pcieCtrl_orderShifter_stageFifos_0
  wire [134 : 0] pcieCtrl_orderShifter_stageFifos_0_D_IN,
		 pcieCtrl_orderShifter_stageFifos_0_D_OUT;
  wire pcieCtrl_orderShifter_stageFifos_0_CLR,
       pcieCtrl_orderShifter_stageFifos_0_DEQ,
       pcieCtrl_orderShifter_stageFifos_0_EMPTY_N,
       pcieCtrl_orderShifter_stageFifos_0_ENQ,
       pcieCtrl_orderShifter_stageFifos_0_FULL_N;

  // ports of submodule pcieCtrl_orderShifter_stageFifos_1
  wire [134 : 0] pcieCtrl_orderShifter_stageFifos_1_D_IN,
		 pcieCtrl_orderShifter_stageFifos_1_D_OUT;
  wire pcieCtrl_orderShifter_stageFifos_1_CLR,
       pcieCtrl_orderShifter_stageFifos_1_DEQ,
       pcieCtrl_orderShifter_stageFifos_1_EMPTY_N,
       pcieCtrl_orderShifter_stageFifos_1_ENQ,
       pcieCtrl_orderShifter_stageFifos_1_FULL_N;

  // ports of submodule pcieCtrl_orderShifter_stageFifos_2
  wire [134 : 0] pcieCtrl_orderShifter_stageFifos_2_D_IN,
		 pcieCtrl_orderShifter_stageFifos_2_D_OUT;
  wire pcieCtrl_orderShifter_stageFifos_2_CLR,
       pcieCtrl_orderShifter_stageFifos_2_DEQ,
       pcieCtrl_orderShifter_stageFifos_2_EMPTY_N,
       pcieCtrl_orderShifter_stageFifos_2_ENQ,
       pcieCtrl_orderShifter_stageFifos_2_FULL_N;

  // ports of submodule pcieCtrl_orderShifter_stageFifos_3
  wire [134 : 0] pcieCtrl_orderShifter_stageFifos_3_D_IN,
		 pcieCtrl_orderShifter_stageFifos_3_D_OUT;
  wire pcieCtrl_orderShifter_stageFifos_3_CLR,
       pcieCtrl_orderShifter_stageFifos_3_DEQ,
       pcieCtrl_orderShifter_stageFifos_3_EMPTY_N,
       pcieCtrl_orderShifter_stageFifos_3_ENQ,
       pcieCtrl_orderShifter_stageFifos_3_FULL_N;

  // ports of submodule pcieCtrl_orderShifter_stageFifos_4
  wire [134 : 0] pcieCtrl_orderShifter_stageFifos_4_D_IN,
		 pcieCtrl_orderShifter_stageFifos_4_D_OUT;
  wire pcieCtrl_orderShifter_stageFifos_4_CLR,
       pcieCtrl_orderShifter_stageFifos_4_DEQ,
       pcieCtrl_orderShifter_stageFifos_4_EMPTY_N,
       pcieCtrl_orderShifter_stageFifos_4_ENQ,
       pcieCtrl_orderShifter_stageFifos_4_FULL_N;

  // ports of submodule pcieCtrl_orderShifter_stageFifos_5
  wire [134 : 0] pcieCtrl_orderShifter_stageFifos_5_D_IN,
		 pcieCtrl_orderShifter_stageFifos_5_D_OUT;
  wire pcieCtrl_orderShifter_stageFifos_5_CLR,
       pcieCtrl_orderShifter_stageFifos_5_DEQ,
       pcieCtrl_orderShifter_stageFifos_5_EMPTY_N,
       pcieCtrl_orderShifter_stageFifos_5_ENQ,
       pcieCtrl_orderShifter_stageFifos_5_FULL_N;

  // ports of submodule pcieCtrl_orderShifter_stageFifos_6
  wire [134 : 0] pcieCtrl_orderShifter_stageFifos_6_D_IN,
		 pcieCtrl_orderShifter_stageFifos_6_D_OUT;
  wire pcieCtrl_orderShifter_stageFifos_6_CLR,
       pcieCtrl_orderShifter_stageFifos_6_DEQ,
       pcieCtrl_orderShifter_stageFifos_6_EMPTY_N,
       pcieCtrl_orderShifter_stageFifos_6_ENQ,
       pcieCtrl_orderShifter_stageFifos_6_FULL_N;

  // ports of submodule pcieCtrl_orderTagBypassQ1
  wire [7 : 0] pcieCtrl_orderTagBypassQ1_D_IN,
	       pcieCtrl_orderTagBypassQ1_D_OUT;
  wire pcieCtrl_orderTagBypassQ1_CLR,
       pcieCtrl_orderTagBypassQ1_DEQ,
       pcieCtrl_orderTagBypassQ1_EMPTY_N,
       pcieCtrl_orderTagBypassQ1_ENQ,
       pcieCtrl_orderTagBypassQ1_FULL_N;

  // ports of submodule pcieCtrl_orderTagBypassQ2
  wire [7 : 0] pcieCtrl_orderTagBypassQ2_D_IN,
	       pcieCtrl_orderTagBypassQ2_D_OUT;
  wire pcieCtrl_orderTagBypassQ2_CLR,
       pcieCtrl_orderTagBypassQ2_DEQ,
       pcieCtrl_orderTagBypassQ2_EMPTY_N,
       pcieCtrl_orderTagBypassQ2_ENQ,
       pcieCtrl_orderTagBypassQ2_FULL_N;

  // ports of submodule pcieCtrl_orderedReadDoneTagQ
  wire [17 : 0] pcieCtrl_orderedReadDoneTagQ_D_IN,
		pcieCtrl_orderedReadDoneTagQ_D_OUT;
  wire pcieCtrl_orderedReadDoneTagQ_CLR,
       pcieCtrl_orderedReadDoneTagQ_DEQ,
       pcieCtrl_orderedReadDoneTagQ_EMPTY_N,
       pcieCtrl_orderedReadDoneTagQ_ENQ,
       pcieCtrl_orderedReadDoneTagQ_FULL_N;

  // ports of submodule pcieCtrl_readBurst2Q
  wire [17 : 0] pcieCtrl_readBurst2Q_D_IN, pcieCtrl_readBurst2Q_D_OUT;
  wire pcieCtrl_readBurst2Q_CLR,
       pcieCtrl_readBurst2Q_DEQ,
       pcieCtrl_readBurst2Q_EMPTY_N,
       pcieCtrl_readBurst2Q_ENQ,
       pcieCtrl_readBurst2Q_FULL_N;

  // ports of submodule pcieCtrl_readBurstQ
  wire [17 : 0] pcieCtrl_readBurstQ_D_IN, pcieCtrl_readBurstQ_D_OUT;
  wire pcieCtrl_readBurstQ_CLR,
       pcieCtrl_readBurstQ_DEQ,
       pcieCtrl_readBurstQ_EMPTY_N,
       pcieCtrl_readBurstQ_ENQ,
       pcieCtrl_readBurstQ_FULL_N;

  // ports of submodule pcieCtrl_readDoneTagQ
  wire [17 : 0] pcieCtrl_readDoneTagQ_D_IN, pcieCtrl_readDoneTagQ_D_OUT;
  wire pcieCtrl_readDoneTagQ_CLR,
       pcieCtrl_readDoneTagQ_DEQ,
       pcieCtrl_readDoneTagQ_EMPTY_N,
       pcieCtrl_readDoneTagQ_ENQ,
       pcieCtrl_readDoneTagQ_FULL_N;

  // ports of submodule pcieCtrl_readReorder_memory
  wire [127 : 0] pcieCtrl_readReorder_memory_DIA,
		 pcieCtrl_readReorder_memory_DIB,
		 pcieCtrl_readReorder_memory_DOA,
		 pcieCtrl_readReorder_memory_DOB;
  wire [9 : 0] pcieCtrl_readReorder_memory_ADDRA,
	       pcieCtrl_readReorder_memory_ADDRB;
  wire pcieCtrl_readReorder_memory_ENA,
       pcieCtrl_readReorder_memory_ENB,
       pcieCtrl_readReorder_memory_WEA,
       pcieCtrl_readReorder_memory_WEB;

  // ports of submodule pcieCtrl_readReorder_serverAdapterA_outDataCore
  wire [127 : 0] pcieCtrl_readReorder_serverAdapterA_outDataCore_D_IN;
  wire pcieCtrl_readReorder_serverAdapterA_outDataCore_CLR,
       pcieCtrl_readReorder_serverAdapterA_outDataCore_DEQ,
       pcieCtrl_readReorder_serverAdapterA_outDataCore_ENQ,
       pcieCtrl_readReorder_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_readReorder_serverAdapterB_outDataCore
  wire [127 : 0] pcieCtrl_readReorder_serverAdapterB_outDataCore_D_IN,
		 pcieCtrl_readReorder_serverAdapterB_outDataCore_D_OUT;
  wire pcieCtrl_readReorder_serverAdapterB_outDataCore_CLR,
       pcieCtrl_readReorder_serverAdapterB_outDataCore_DEQ,
       pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N,
       pcieCtrl_readReorder_serverAdapterB_outDataCore_ENQ,
       pcieCtrl_readReorder_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_sendTLPQ
  reg [144 : 0] pcieCtrl_sendTLPQ_D_IN;
  wire [144 : 0] pcieCtrl_sendTLPQ_D_OUT;
  wire pcieCtrl_sendTLPQ_CLR,
       pcieCtrl_sendTLPQ_DEQ,
       pcieCtrl_sendTLPQ_EMPTY_N,
       pcieCtrl_sendTLPQ_ENQ,
       pcieCtrl_sendTLPQ_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_D_IN,
		 pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_CLR,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_DEQ,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_ENQ,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_D_IN,
		 pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_CLR,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_DEQ,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_ENQ,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_D_IN,
		 pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_CLR,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_DEQ,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_ENQ,
       pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_D_IN,
		 pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_CLR,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_DEQ,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_ENQ,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_D_IN,
		 pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_CLR,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_DEQ,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_ENQ,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_D_IN,
		 pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_CLR,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_DEQ,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_ENQ,
       pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_mb_inQ1
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_mb_inQ1_D_IN,
		 pcieCtrl_sendTLPm_ma_0_mb_inQ1_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_mb_inQ1_CLR,
       pcieCtrl_sendTLPm_ma_0_mb_inQ1_DEQ,
       pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_mb_inQ1_ENQ,
       pcieCtrl_sendTLPm_ma_0_mb_inQ1_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_mb_inQ2
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_mb_inQ2_D_IN,
		 pcieCtrl_sendTLPm_ma_0_mb_inQ2_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_mb_inQ2_CLR,
       pcieCtrl_sendTLPm_ma_0_mb_inQ2_DEQ,
       pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_mb_inQ2_ENQ,
       pcieCtrl_sendTLPm_ma_0_mb_inQ2_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_0_mb_outQ
  wire [144 : 0] pcieCtrl_sendTLPm_ma_0_mb_outQ_D_IN,
		 pcieCtrl_sendTLPm_ma_0_mb_outQ_D_OUT;
  wire pcieCtrl_sendTLPm_ma_0_mb_outQ_CLR,
       pcieCtrl_sendTLPm_ma_0_mb_outQ_DEQ,
       pcieCtrl_sendTLPm_ma_0_mb_outQ_EMPTY_N,
       pcieCtrl_sendTLPm_ma_0_mb_outQ_ENQ,
       pcieCtrl_sendTLPm_ma_0_mb_outQ_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_D_IN,
		 pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_CLR,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_DEQ,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_ENQ;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_D_IN,
		 pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_CLR,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_DEQ,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_ENQ,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_D_IN,
		 pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_CLR,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_DEQ,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_ENQ,
       pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_D_IN,
		 pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_CLR,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_DEQ,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_ENQ;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_D_IN,
		 pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_CLR,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_DEQ,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_ENQ;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_D_IN,
		 pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_CLR,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_DEQ,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_ENQ,
       pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_mb_inQ1
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_mb_inQ1_D_IN,
		 pcieCtrl_sendTLPm_ma_1_mb_inQ1_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_mb_inQ1_CLR,
       pcieCtrl_sendTLPm_ma_1_mb_inQ1_DEQ,
       pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_mb_inQ1_ENQ,
       pcieCtrl_sendTLPm_ma_1_mb_inQ1_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_mb_inQ2
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_mb_inQ2_D_IN,
		 pcieCtrl_sendTLPm_ma_1_mb_inQ2_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_mb_inQ2_CLR,
       pcieCtrl_sendTLPm_ma_1_mb_inQ2_DEQ,
       pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_mb_inQ2_ENQ,
       pcieCtrl_sendTLPm_ma_1_mb_inQ2_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_ma_1_mb_outQ
  wire [144 : 0] pcieCtrl_sendTLPm_ma_1_mb_outQ_D_IN,
		 pcieCtrl_sendTLPm_ma_1_mb_outQ_D_OUT;
  wire pcieCtrl_sendTLPm_ma_1_mb_outQ_CLR,
       pcieCtrl_sendTLPm_ma_1_mb_outQ_DEQ,
       pcieCtrl_sendTLPm_ma_1_mb_outQ_EMPTY_N,
       pcieCtrl_sendTLPm_ma_1_mb_outQ_ENQ,
       pcieCtrl_sendTLPm_ma_1_mb_outQ_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_mb_inQ1
  wire [144 : 0] pcieCtrl_sendTLPm_mb_inQ1_D_IN,
		 pcieCtrl_sendTLPm_mb_inQ1_D_OUT;
  wire pcieCtrl_sendTLPm_mb_inQ1_CLR,
       pcieCtrl_sendTLPm_mb_inQ1_DEQ,
       pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N,
       pcieCtrl_sendTLPm_mb_inQ1_ENQ,
       pcieCtrl_sendTLPm_mb_inQ1_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_mb_inQ2
  wire [144 : 0] pcieCtrl_sendTLPm_mb_inQ2_D_IN,
		 pcieCtrl_sendTLPm_mb_inQ2_D_OUT;
  wire pcieCtrl_sendTLPm_mb_inQ2_CLR,
       pcieCtrl_sendTLPm_mb_inQ2_DEQ,
       pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N,
       pcieCtrl_sendTLPm_mb_inQ2_ENQ,
       pcieCtrl_sendTLPm_mb_inQ2_FULL_N;

  // ports of submodule pcieCtrl_sendTLPm_mb_outQ
  wire [144 : 0] pcieCtrl_sendTLPm_mb_outQ_D_IN,
		 pcieCtrl_sendTLPm_mb_outQ_D_OUT;
  wire pcieCtrl_sendTLPm_mb_outQ_CLR,
       pcieCtrl_sendTLPm_mb_outQ_DEQ,
       pcieCtrl_sendTLPm_mb_outQ_EMPTY_N,
       pcieCtrl_sendTLPm_mb_outQ_ENQ,
       pcieCtrl_sendTLPm_mb_outQ_FULL_N;

  // ports of submodule pcieCtrl_tagMapReadAQ
  wire [19 : 0] pcieCtrl_tagMapReadAQ_D_IN, pcieCtrl_tagMapReadAQ_D_OUT;
  wire pcieCtrl_tagMapReadAQ_CLR,
       pcieCtrl_tagMapReadAQ_DEQ,
       pcieCtrl_tagMapReadAQ_EMPTY_N,
       pcieCtrl_tagMapReadAQ_ENQ,
       pcieCtrl_tagMapReadAQ_FULL_N;

  // ports of submodule pcieCtrl_tagMap_memory
  wire [19 : 0] pcieCtrl_tagMap_memory_DIA,
		pcieCtrl_tagMap_memory_DIB,
		pcieCtrl_tagMap_memory_DOA,
		pcieCtrl_tagMap_memory_DOB;
  wire [7 : 0] pcieCtrl_tagMap_memory_ADDRA, pcieCtrl_tagMap_memory_ADDRB;
  wire pcieCtrl_tagMap_memory_ENA,
       pcieCtrl_tagMap_memory_ENB,
       pcieCtrl_tagMap_memory_WEA,
       pcieCtrl_tagMap_memory_WEB;

  // ports of submodule pcieCtrl_tagMap_serverAdapterA_outDataCore
  wire [19 : 0] pcieCtrl_tagMap_serverAdapterA_outDataCore_D_IN;
  wire pcieCtrl_tagMap_serverAdapterA_outDataCore_CLR,
       pcieCtrl_tagMap_serverAdapterA_outDataCore_DEQ,
       pcieCtrl_tagMap_serverAdapterA_outDataCore_ENQ,
       pcieCtrl_tagMap_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_tagMap_serverAdapterB_outDataCore
  wire [19 : 0] pcieCtrl_tagMap_serverAdapterB_outDataCore_D_IN,
		pcieCtrl_tagMap_serverAdapterB_outDataCore_D_OUT;
  wire pcieCtrl_tagMap_serverAdapterB_outDataCore_CLR,
       pcieCtrl_tagMap_serverAdapterB_outDataCore_DEQ,
       pcieCtrl_tagMap_serverAdapterB_outDataCore_EMPTY_N,
       pcieCtrl_tagMap_serverAdapterB_outDataCore_ENQ,
       pcieCtrl_tagMap_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pcieCtrl_tlp2Q
  wire [127 : 0] pcieCtrl_tlp2Q_D_IN, pcieCtrl_tlp2Q_D_OUT;
  wire pcieCtrl_tlp2Q_CLR,
       pcieCtrl_tlp2Q_DEQ,
       pcieCtrl_tlp2Q_EMPTY_N,
       pcieCtrl_tlp2Q_ENQ,
       pcieCtrl_tlp2Q_FULL_N;

  // ports of submodule pcieCtrl_tlp3Q
  wire [127 : 0] pcieCtrl_tlp3Q_D_IN, pcieCtrl_tlp3Q_D_OUT;
  wire pcieCtrl_tlp3Q_CLR,
       pcieCtrl_tlp3Q_DEQ,
       pcieCtrl_tlp3Q_EMPTY_N,
       pcieCtrl_tlp3Q_ENQ,
       pcieCtrl_tlp3Q_FULL_N;

  // ports of submodule pcieCtrl_tlpKeepQ
  wire [15 : 0] pcieCtrl_tlpKeepQ_D_IN;
  wire pcieCtrl_tlpKeepQ_CLR,
       pcieCtrl_tlpKeepQ_DEQ,
       pcieCtrl_tlpKeepQ_EMPTY_N,
       pcieCtrl_tlpKeepQ_ENQ,
       pcieCtrl_tlpKeepQ_FULL_N;

  // ports of submodule pcieCtrl_tlpQ
  wire [127 : 0] pcieCtrl_tlpQ_D_IN, pcieCtrl_tlpQ_D_OUT;
  wire pcieCtrl_tlpQ_CLR,
       pcieCtrl_tlpQ_DEQ,
       pcieCtrl_tlpQ_EMPTY_N,
       pcieCtrl_tlpQ_ENQ,
       pcieCtrl_tlpQ_FULL_N;

  // ports of submodule pcieCtrl_userReadQ0
  wire [50 : 0] pcieCtrl_userReadQ0_D_IN, pcieCtrl_userReadQ0_D_OUT;
  wire pcieCtrl_userReadQ0_CLR,
       pcieCtrl_userReadQ0_DEQ,
       pcieCtrl_userReadQ0_EMPTY_N,
       pcieCtrl_userReadQ0_ENQ,
       pcieCtrl_userReadQ0_FULL_N;

  // ports of submodule pcieCtrl_userReadQ1_memory
  wire [50 : 0] pcieCtrl_userReadQ1_memory_DIA,
		pcieCtrl_userReadQ1_memory_DIB,
		pcieCtrl_userReadQ1_memory_DOB;
  wire [9 : 0] pcieCtrl_userReadQ1_memory_ADDRA,
	       pcieCtrl_userReadQ1_memory_ADDRB;
  wire pcieCtrl_userReadQ1_memory_ENA,
       pcieCtrl_userReadQ1_memory_ENB,
       pcieCtrl_userReadQ1_memory_WEA,
       pcieCtrl_userReadQ1_memory_WEB;

  // ports of submodule pcieCtrl_userReadQ2
  wire [50 : 0] pcieCtrl_userReadQ2_D_IN, pcieCtrl_userReadQ2_D_OUT;
  wire pcieCtrl_userReadQ2_CLR,
       pcieCtrl_userReadQ2_DEQ,
       pcieCtrl_userReadQ2_EMPTY_N,
       pcieCtrl_userReadQ2_ENQ,
       pcieCtrl_userReadQ2_FULL_N;

  // ports of submodule pcieCtrl_userSendTLPQ
  wire [144 : 0] pcieCtrl_userSendTLPQ_D_IN, pcieCtrl_userSendTLPQ_D_OUT;
  wire pcieCtrl_userSendTLPQ_CLR,
       pcieCtrl_userSendTLPQ_DEQ,
       pcieCtrl_userSendTLPQ_EMPTY_N,
       pcieCtrl_userSendTLPQ_ENQ,
       pcieCtrl_userSendTLPQ_FULL_N;

  // ports of submodule pcieCtrl_userWrite1Q
  wire [51 : 0] pcieCtrl_userWrite1Q_D_IN, pcieCtrl_userWrite1Q_D_OUT;
  wire pcieCtrl_userWrite1Q_CLR,
       pcieCtrl_userWrite1Q_DEQ,
       pcieCtrl_userWrite1Q_EMPTY_N,
       pcieCtrl_userWrite1Q_ENQ,
       pcieCtrl_userWrite1Q_FULL_N;

  // ports of submodule pcieCtrl_userWrite2Q
  wire [51 : 0] pcieCtrl_userWrite2Q_D_IN, pcieCtrl_userWrite2Q_D_OUT;
  wire pcieCtrl_userWrite2Q_CLR,
       pcieCtrl_userWrite2Q_DEQ,
       pcieCtrl_userWrite2Q_EMPTY_N,
       pcieCtrl_userWrite2Q_ENQ,
       pcieCtrl_userWrite2Q_FULL_N;

  // ports of submodule pcieCtrl_userWriteQ_memory
  wire [51 : 0] pcieCtrl_userWriteQ_memory_DIA,
		pcieCtrl_userWriteQ_memory_DIB,
		pcieCtrl_userWriteQ_memory_DOB;
  wire [9 : 0] pcieCtrl_userWriteQ_memory_ADDRA,
	       pcieCtrl_userWriteQ_memory_ADDRB;
  wire pcieCtrl_userWriteQ_memory_ENA,
       pcieCtrl_userWriteQ_memory_ENB,
       pcieCtrl_userWriteQ_memory_WEA,
       pcieCtrl_userWriteQ_memory_WEB;

  // rule scheduling signals
  wire CAN_FIRE_RL_pcieCtrl_splitDmaReadReq2,
       WILL_FIRE_RL_pcieCtrl_compareOrder,
       WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_pcieCtrl_filterStatReadTLP,
       WILL_FIRE_RL_pcieCtrl_flushReadTag,
       WILL_FIRE_RL_pcieCtrl_generateDataTLP,
       WILL_FIRE_RL_pcieCtrl_generateHeaderTLP,
       WILL_FIRE_RL_pcieCtrl_insertFreeTag,
       WILL_FIRE_RL_pcieCtrl_procCompletionTLP,
       WILL_FIRE_RL_pcieCtrl_procIOWrite,
       WILL_FIRE_RL_pcieCtrl_procTLP,
       WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_pcieCtrl_recvTLP,
       WILL_FIRE_RL_pcieCtrl_relayBufIdxRead,
       WILL_FIRE_RL_pcieCtrl_relayFreeReadTag,
       WILL_FIRE_RL_pcieCtrl_relayTLPm,
       WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_0_mb_merge,
       WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_1_mb_merge,
       WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_mb_merge,
       WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_0_mb_merge,
       WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_1_mb_merge,
       WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_mb_merge,
       WILL_FIRE_RL_pcieCtrl_sendTLPm_mb_merge,
       WILL_FIRE_RL_pcieCtrl_splitDmaReadReq,
       WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2,
       WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq,
       WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2,
       WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pcieCtrl_updateReadBurst1,
       WILL_FIRE_RL_pcieCtrl_updateReadBurst2,
       WILL_FIRE_RL_pcieCtrl_writeReadBuffer;

  // inputs to muxes for submodule ports
  wire [144 : 0] MUX_pcieCtrl_sendTLPQ_enq_1__VAL_1,
		 MUX_pcieCtrl_sendTLPQ_enq_1__VAL_2;
  wire [135 : 0] MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__VAL_1,
		 MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__VAL_2;
  wire [127 : 0] MUX_pcieCtrl_dmaWriteBuf_write_1__VAL_2;
  wire [47 : 0] MUX_pcieCtrl_tagWordsLeft_write_1__VAL_1,
		MUX_pcieCtrl_tagWordsLeft_write_1__VAL_2;
  wire [31 : 0] MUX_pcieCtrl_dmaReadBuffer_write_1__VAL_1,
		MUX_pcieCtrl_dmaReadStartAddr_write_1__VAL_1,
		MUX_pcieCtrl_dmaReadStartAddr_write_1__VAL_2,
		MUX_pcieCtrl_dmaStartAddr_write_1__VAL_1,
		MUX_pcieCtrl_dmaStartAddr_write_1__VAL_2,
		MUX_pcieCtrl_userReadEmit_write_1__VAL_2,
		MUX_pcieCtrl_userWriteEmit_write_1__VAL_2;
  wire [19 : 0] MUX_pcieCtrl_tagMap_memory_b_put_3__VAL_2;
  wire [11 : 0] MUX_pcieCtrl_configBuffer_memory_b_put_2__VAL_1,
		MUX_pcieCtrl_configBuffer_memory_b_put_2__VAL_2;
  wire [9 : 0] MUX_pcieCtrl_completionRecvLength_write_1__VAL_1,
	       MUX_pcieCtrl_completionRecvLength_write_1__VAL_2,
	       MUX_pcieCtrl_dataWordsRemain_write_1__VAL_2,
	       MUX_pcieCtrl_dmaReadWords_write_1__VAL_2,
	       MUX_pcieCtrl_dmaSendWords_write_1__VAL_2;
  wire [7 : 0] MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__VAL_1,
	       MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__VAL_2;
  wire MUX_pcieCtrl_completionRecvLength_write_1__SEL_1,
       MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1,
       MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_2,
       MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__SEL_1,
       MUX_pcieCtrl_dmaWriteBuf_write_1__SEL_1,
       MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__SEL_1,
       MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1,
       MUX_pcieCtrl_userReadEmit_write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_pcieCtrl_tlpQD_OUT_BITS_83_TO_66_0_23173_ETC__q11;
  reg CASE_pcieCtrl_tlp2QD_OUT_BITS_30_TO_24_0b0_pc_ETC__q10,
      CASE_pcieCtrl_tlpQD_OUT_BITS_30_TO_24_0b0_IF__ETC__q9,
      IF_pcieCtrl_tlpQ_first__538_BITS_83_TO_66_575__ETC___d1585;
  wire [127 : 0] IF_pcie_user_receiveUser_138_BITS_13_TO_10_139_ETC___d1170,
		 pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029,
		 pcieCtrl_partBuffer_BITS_127_TO_0__q6,
		 val___1__h17209,
		 val___1__h17355,
		 val___1__h17490,
		 val___1__h17625,
		 val___1__h17760,
		 val___1__h17895,
		 val___1__h18080,
		 val___1__h19471,
		 val___1__h19606,
		 val___1__h19741,
		 val___1__h19876,
		 val___1__h20011,
		 val___1__h20146,
		 val___1__h20331,
		 x3__h25488,
		 x__h17182,
		 x__h17330,
		 x__h17465,
		 x__h17600,
		 x__h17735,
		 x__h17870,
		 x__h19444,
		 x__h19581,
		 x__h19716,
		 x__h19851,
		 x__h19986,
		 x__h20121,
		 x__h24132,
		 x__h24180,
		 x__h24274,
		 x__h24299,
		 x__h26984,
		 x__h36687,
		 x__h40151,
		 x__h40871,
		 x__h42423,
		 x__h44618,
		 x__h44872,
		 x__h45403,
		 x__h47109,
		 x_wget__h25274,
		 y__h24276,
		 y__h44927;
  wire [31 : 0] _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1827,
		bufidx1700_PLUS_1__q2,
		bufidx4001_PLUS_1__q3,
		bufidx__h41700,
		bufidx__h44001,
		cdw0__h37094,
		cdw0__h39873,
		cdw0__h42339,
		cdw0__h44596,
		cdw0__h47096,
		cdw1__h37095,
		cdw1__h40759,
		cdw1__h42340,
		cdw1__h44597,
		cdw2__h37096,
		cdw2__h39875,
		cdw2__h40760,
		cdw2__h42341,
		cdw2__h44598,
		cdw2__h47098,
		cdw3__h37963,
		cdw3__h38048,
		cdw3__h38118,
		cdw3__h39876,
		cdw3__h44599,
		cdw3__h47099,
		data0__h36644,
		data1__h36645,
		data2__h36646,
		pcieCtrl_dmaReadBufAddrQD_OUT_PLUS_pcieCtrl_d_ETC__q7,
		pcieCtrl_dmaWriteBufAddrQD_OUT_PLUS_pcieCtrl__ETC__q5,
		x3__h40645,
		x4259_MINUS_pcieCtrl_dmaStartAddr__q4,
		x__h41939,
		x__h42018,
		x__h42049,
		x__h44203,
		x__h44259,
		x__h44290,
		y__h41948,
		y__h44212;
  wire [19 : 0] ctrl_user_dataSend_ioreq_BITS_26_TO_7_PLUS_16384__q8,
		internalAddr__h40500,
		x__h35595,
		x__h39429,
		x__h39533,
		x__h40720;
  wire [15 : 0] IF_pcie_user_receiveUser_138_BITS_13_TO_10_139_ETC___d1177,
		x__h27018,
		x__h35689;
  wire [10 : 0] x__h34443, x__h34554, x__h35713, x__h35870;
  wire [9 : 0] _theResult____h41705,
	       _theResult____h44006,
	       newwords___1__h14763,
	       pcieCtrl_readFlushTag_BITS_19_TO_10_MINUS_pcie_ETC__q1,
	       pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d610,
	       words__h24600,
	       wordsleft___1__h26013,
	       wordsleft___1__h26135,
	       x2__h26059,
	       x2__h26196,
	       x__h14751,
	       x__h14798,
	       x__h24567,
	       x__h24583,
	       x__h24673,
	       x__h24676,
	       x__h24760,
	       x__h26007,
	       x__h26129,
	       x__h26217,
	       x__h36995,
	       x__h41761,
	       x__h41996,
	       x__h44126,
	       x__h44237,
	       x__h44459,
	       y__h24761,
	       y__h26218;
  wire [8 : 0] x__h11063,
	       x__h11152,
	       x__h11954,
	       x__h12043,
	       x__h13070,
	       x__h13181,
	       x__h15653,
	       x__h15742,
	       x__h43561,
	       x__h43650;
  wire [7 : 0] tag__h23604,
	       x2__h42106,
	       x3__h10996,
	       x3__h11887,
	       x3__h15586,
	       x3__h43494,
	       x__h25555,
	       x__h25644,
	       x__h35585,
	       x_wget__h10782,
	       x_wget__h11673;
  wire [2 : 0] p1__h10085,
	       p1__h14195,
	       pcieCtrl_configBuffer_serverAdapterA_cnt_6_PLU_ETC___d32,
	       pcieCtrl_configBuffer_serverAdapterB_cnt_5_PLU_ETC___d91,
	       pcieCtrl_doneMap_serverAdapterB_cnt_96_PLUS_IF_ETC___d902,
	       pcieCtrl_readReorder_serverAdapterB_cnt_21_PLU_ETC___d327,
	       pcieCtrl_tagMap_serverAdapterB_cnt_03_PLUS_IF__ETC___d209,
	       x__h10088,
	       x__h14198,
	       x__h35605;
  wire [1 : 0] x__h35637;
  wire IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d522,
       IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d536,
       IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d564,
       IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d578,
       IF_pcieCtrl_readCompletionsb_datav_3_96_EQ_pci_ETC___d540,
       IF_pcieCtrl_readCompletionsb_datav_3_96_EQ_pci_ETC___d582,
       NOT_pcieCtrl_dmaReadWordQ_rRdPtr_read__77_PLUS_ETC___d1527,
       NOT_pcieCtrl_freeReadTagQ_rRdPtr_read__00_PLUS_ETC___d446,
       NOT_pcieCtrl_freeWriteTagQ_rRdPtr_read__30_PLU_ETC___d449,
       NOT_pcieCtrl_readBurst2Q_first__92_BITS_17_TO__ETC___d548,
       NOT_pcieCtrl_readCompletionsb_datav_0_14_EQ_pc_ETC___d562,
       NOT_pcieCtrl_readCompletionsb_deqoff_58_EQ_pci_ETC___d599,
       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULE_pc_ETC___d534,
       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d567,
       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d574,
       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d577,
       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d580,
       NOT_pcieCtrl_tlpQ_first__538_BITS_30_TO_24_571_ETC___d1607,
       _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1831,
       _0_CONCAT_pcieCtrl_dmaStartAddr_928_BITS_31_TO__ETC___d1938,
       pcieCtrl_bufidxRequestedWriteQ_i_notEmpty__788_ETC___d1793,
       pcieCtrl_configBuffer_serverAdapterA_cnt_6_SLT_3___d1681,
       pcieCtrl_configBuffer_serverAdapterB_cnt_5_SLT_3___d1813,
       pcieCtrl_dataWordsRemain_958_ULE_1___d1991,
       pcieCtrl_dmaReadOutCntUp_075_MINUS_pcieCtrl_dm_ETC___d1078,
       pcieCtrl_orderShiftedQ_i_notEmpty__77_AND_pcie_ETC___d982,
       pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515,
       pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d520,
       pcieCtrl_readCompletionsb_datav_1_07_EQ_pcieCt_ETC___d508,
       pcieCtrl_readCompletionsb_datav_2_99_EQ_pcieCt_ETC___d500,
       pcieCtrl_readCompletionsb_datav_3_96_EQ_pcieCt_ETC___d497,
       pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512,
       pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509,
       pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501,
       pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d576,
       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498,
       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d525,
       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d532,
       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d535,
       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d538,
       pcieCtrl_readReorder_serverAdapterB_cnt_21_SLT_3___d1081,
       pcieCtrl_sendTLPQ_i_notFull__954_AND_IF_pcieCt_ETC___d1998,
       pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d612,
       pcieCtrl_tagMap_serverAdapterB_cnt_03_SLT_3___d544,
       pcieCtrl_tagWordsLeft_00_BITS_29_TO_20_01_ULE_4___d1010,
       pcieCtrl_tagWordsLeft_00_BITS_39_TO_30_012_PLU_ETC___d1017,
       pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1677,
       pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1685,
       pcieCtrl_tlp2Q_i_notEmpty__669_AND_IF_pcieCtrl_ETC___d1694,
       pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_CO_ETC___d1754,
       pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_EQ_ETC___d1757,
       pcieCtrl_tlpQ_first__538_BITS_9_TO_0_602_ULE_1___d1603,
       pcieCtrl_tlpQ_i_notEmpty__528_AND_pcieCtrl_tlp_ETC___d1611,
       x__h35616,
       x__h35626;

  // oscillator and gates for output clock CLK_ctrl_user_user_clk
  assign CLK_ctrl_user_user_clk = pcie_user_clk ;
  assign CLK_GATE_ctrl_user_user_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_sys_clk_o
  assign CLK_sys_clk_o = pcie_sys_clk_o ;
  assign CLK_GATE_sys_clk_o = 1'b1 ;

  // output resets
  assign RST_N_ctrl_user_user_rst = pcie_user_reset_n ;
  assign RST_N_sys_rst_n_o = pcie_sys_rst_n_o ;

  // actionvalue method ctrl_user_dataReceive
  assign ctrl_user_dataReceive = pcieCtrl_userWrite2Q_D_OUT ;
  assign RDY_ctrl_user_dataReceive = pcieCtrl_userWrite2Q_EMPTY_N ;

  // actionvalue method ctrl_user_dataReq
  assign ctrl_user_dataReq = pcieCtrl_userReadQ2_D_OUT ;
  assign RDY_ctrl_user_dataReq = pcieCtrl_userReadQ2_EMPTY_N ;

  // action method ctrl_user_dataSend
  assign RDY_ctrl_user_dataSend = pcieCtrl_userSendTLPQ_FULL_N ;

  // action method ctrl_user_dmaWriteReq
  assign RDY_ctrl_user_dmaWriteReq = pcieCtrl_dmaWriteReqQ_FULL_N ;

  // action method ctrl_user_dmaWriteData
  assign RDY_ctrl_user_dmaWriteData = pcieCtrl_dmaWriteWordQ_FULL_N ;

  // action method ctrl_user_dmaReadReq
  assign RDY_ctrl_user_dmaReadReq = pcieCtrl_dmaReadReqQ_FULL_N ;

  // actionvalue method ctrl_user_dmaReadWord
  assign ctrl_user_dmaReadWord = pcieCtrl_dmaReadOutRQ_D_OUT ;
  assign RDY_ctrl_user_dmaReadWord = pcieCtrl_dmaReadOutRQ_EMPTY_N ;

  // action method ctrl_user_assertInterrupt
  assign RDY_ctrl_user_assertInterrupt =
	     pcie_assert_interrupt_rdy && pcieCtrl_dataWordsRemain == 10'd0 ;

  // action method ctrl_user_assertUptrain
  assign RDY_ctrl_user_assertUptrain = pcie_assert_interrupt_rdy ;

  // value method ctrl_user_debug_data
  assign ctrl_user_debug_data = pcie_debug_data ;
  assign RDY_ctrl_user_debug_data = 1'd1 ;

  // value method pins_txn_out
  assign pins_TXN = pcie_pci_exp_txn ;

  // value method pins_txp_out
  assign pins_TXP = pcie_pci_exp_txp ;

  // submodule pcie
  xilinx_pcie_2_1_ep_7x pcie(.sys_clk_p(CLK_sys_clk_p),
			     .sys_clk_n(CLK_sys_clk_n),
			     .sys_rst_n(RST_N_sys_rst_n),
			     .emcclk(CLK_emcclk),
			     .asser_uptrain_data(pcie_asser_uptrain_data),
			     .assert_interrupt_data(pcie_assert_interrupt_data),
			     .pci_exp_rxn(pcie_pci_exp_rxn),
			     .pci_exp_rxp(pcie_pci_exp_rxp),
			     .s_axis_tx_tdata(pcie_s_axis_tx_tdata),
			     .s_axis_tx_tkeep(pcie_s_axis_tx_tkeep),
			     .s_axis_tx_tlast(pcie_s_axis_tx_tlast),
			     .assert_interrupt(pcie_assert_interrupt),
			     .assert_uptrain(pcie_assert_uptrain),
			     .s_axis_tx_tvalid(pcie_s_axis_tx_tvalid),
			     .tx_en_keep(pcie_tx_en_keep),
			     .tx_en_last(pcie_tx_en_last),
			     .m_axis_rx_tready(pcie_m_axis_rx_tready),
			     .rx_en_keep(pcie_rx_en_keep),
			     .rx_en_last(pcie_rx_en_last),
			     .rx_en_user(pcie_rx_en_user),
			     .pci_exp_txn(pcie_pci_exp_txn),
			     .pci_exp_txp(pcie_pci_exp_txp),
			     .user_lnk_up(),
			     .cfg_completer_id(pcie_cfg_completer_id),
			     .debug_data(pcie_debug_data),
			     .assert_interrupt_rdy(pcie_assert_interrupt_rdy),
			     .s_axis_tx_tready(pcie_s_axis_tx_tready),
			     .m_axis_rx_tdata(pcie_m_axis_rx_tdata),
			     .m_axis_rx_tvalid(pcie_m_axis_rx_tvalid),
			     .m_axis_rx_tkeep(pcie_m_axis_rx_tkeep),
			     .m_axis_rx_tlast(),
			     .m_axis_rx_tuser(pcie_m_axis_rx_tuser),
			     .sys_clk_o(pcie_sys_clk_o),
			     .user_clk(pcie_user_clk),
			     .sys_rst_n_o(pcie_sys_rst_n_o),
			     .user_reset_n(pcie_user_reset_n));

  // submodule pcieCtrl_bufidxRequestedWriteQ
  FIFO2 #(.width(32'd1),
	  .guarded(1'd1)) pcieCtrl_bufidxRequestedWriteQ(.RST(pcie_user_reset_n),
							 .CLK(pcie_user_clk),
							 .D_IN(pcieCtrl_bufidxRequestedWriteQ_D_IN),
							 .ENQ(pcieCtrl_bufidxRequestedWriteQ_ENQ),
							 .DEQ(pcieCtrl_bufidxRequestedWriteQ_DEQ),
							 .CLR(pcieCtrl_bufidxRequestedWriteQ_CLR),
							 .D_OUT(pcieCtrl_bufidxRequestedWriteQ_D_OUT),
							 .FULL_N(pcieCtrl_bufidxRequestedWriteQ_FULL_N),
							 .EMPTY_N(pcieCtrl_bufidxRequestedWriteQ_EMPTY_N));

  // submodule pcieCtrl_burstUpdReqQ
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) pcieCtrl_burstUpdReqQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_burstUpdReqQ_D_IN),
						.ENQ(pcieCtrl_burstUpdReqQ_ENQ),
						.DEQ(pcieCtrl_burstUpdReqQ_DEQ),
						.CLR(pcieCtrl_burstUpdReqQ_CLR),
						.D_OUT(pcieCtrl_burstUpdReqQ_D_OUT),
						.FULL_N(pcieCtrl_burstUpdReqQ_FULL_N),
						.EMPTY_N(pcieCtrl_burstUpdReqQ_EMPTY_N));

  // submodule pcieCtrl_busyWriteTagQ_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd8),
	  .MEMSIZE(9'd256)) pcieCtrl_busyWriteTagQ_memory(.CLKA(pcie_user_clk),
							  .CLKB(pcie_user_clk),
							  .ADDRA(pcieCtrl_busyWriteTagQ_memory_ADDRA),
							  .ADDRB(pcieCtrl_busyWriteTagQ_memory_ADDRB),
							  .DIA(pcieCtrl_busyWriteTagQ_memory_DIA),
							  .DIB(pcieCtrl_busyWriteTagQ_memory_DIB),
							  .WEA(pcieCtrl_busyWriteTagQ_memory_WEA),
							  .WEB(pcieCtrl_busyWriteTagQ_memory_WEB),
							  .ENA(pcieCtrl_busyWriteTagQ_memory_ENA),
							  .ENB(pcieCtrl_busyWriteTagQ_memory_ENB),
							  .DOA(),
							  .DOB(pcieCtrl_busyWriteTagQ_memory_DOB));

  // submodule pcieCtrl_configBuffer_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(13'd4096)) pcieCtrl_configBuffer_memory(.CLKA(pcie_user_clk),
							   .CLKB(pcie_user_clk),
							   .ADDRA(pcieCtrl_configBuffer_memory_ADDRA),
							   .ADDRB(pcieCtrl_configBuffer_memory_ADDRB),
							   .DIA(pcieCtrl_configBuffer_memory_DIA),
							   .DIB(pcieCtrl_configBuffer_memory_DIB),
							   .WEA(pcieCtrl_configBuffer_memory_WEA),
							   .WEB(pcieCtrl_configBuffer_memory_WEB),
							   .ENA(pcieCtrl_configBuffer_memory_ENA),
							   .ENB(pcieCtrl_configBuffer_memory_ENB),
							   .DOA(pcieCtrl_configBuffer_memory_DOA),
							   .DOB(pcieCtrl_configBuffer_memory_DOB));

  // submodule pcieCtrl_configBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_configBuffer_serverAdapterA_outDataCore(.RST(pcie_user_reset_n),
									       .CLK(pcie_user_clk),
									       .D_IN(pcieCtrl_configBuffer_serverAdapterA_outDataCore_D_IN),
									       .ENQ(pcieCtrl_configBuffer_serverAdapterA_outDataCore_ENQ),
									       .DEQ(pcieCtrl_configBuffer_serverAdapterA_outDataCore_DEQ),
									       .CLR(pcieCtrl_configBuffer_serverAdapterA_outDataCore_CLR),
									       .D_OUT(pcieCtrl_configBuffer_serverAdapterA_outDataCore_D_OUT),
									       .FULL_N(pcieCtrl_configBuffer_serverAdapterA_outDataCore_FULL_N),
									       .EMPTY_N(pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N));

  // submodule pcieCtrl_configBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_configBuffer_serverAdapterB_outDataCore(.RST(pcie_user_reset_n),
									       .CLK(pcie_user_clk),
									       .D_IN(pcieCtrl_configBuffer_serverAdapterB_outDataCore_D_IN),
									       .ENQ(pcieCtrl_configBuffer_serverAdapterB_outDataCore_ENQ),
									       .DEQ(pcieCtrl_configBuffer_serverAdapterB_outDataCore_DEQ),
									       .CLR(pcieCtrl_configBuffer_serverAdapterB_outDataCore_CLR),
									       .D_OUT(pcieCtrl_configBuffer_serverAdapterB_outDataCore_D_OUT),
									       .FULL_N(pcieCtrl_configBuffer_serverAdapterB_outDataCore_FULL_N),
									       .EMPTY_N(pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pcieCtrl_dmaPageReadReqQ
  SizedFIFO #(.p1width(32'd50),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) pcieCtrl_dmaPageReadReqQ(.RST(pcie_user_reset_n),
						       .CLK(pcie_user_clk),
						       .D_IN(pcieCtrl_dmaPageReadReqQ_D_IN),
						       .ENQ(pcieCtrl_dmaPageReadReqQ_ENQ),
						       .DEQ(pcieCtrl_dmaPageReadReqQ_DEQ),
						       .CLR(pcieCtrl_dmaPageReadReqQ_CLR),
						       .D_OUT(pcieCtrl_dmaPageReadReqQ_D_OUT),
						       .FULL_N(pcieCtrl_dmaPageReadReqQ_FULL_N),
						       .EMPTY_N(pcieCtrl_dmaPageReadReqQ_EMPTY_N));

  // submodule pcieCtrl_dmaPageWriteReqQ
  SizedFIFO #(.p1width(32'd50),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) pcieCtrl_dmaPageWriteReqQ(.RST(pcie_user_reset_n),
							.CLK(pcie_user_clk),
							.D_IN(pcieCtrl_dmaPageWriteReqQ_D_IN),
							.ENQ(pcieCtrl_dmaPageWriteReqQ_ENQ),
							.DEQ(pcieCtrl_dmaPageWriteReqQ_DEQ),
							.CLR(pcieCtrl_dmaPageWriteReqQ_CLR),
							.D_OUT(pcieCtrl_dmaPageWriteReqQ_D_OUT),
							.FULL_N(pcieCtrl_dmaPageWriteReqQ_FULL_N),
							.EMPTY_N(pcieCtrl_dmaPageWriteReqQ_EMPTY_N));

  // submodule pcieCtrl_dmaReadBufAddrQ
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) pcieCtrl_dmaReadBufAddrQ(.RST(pcie_user_reset_n),
						   .CLK(pcie_user_clk),
						   .D_IN(pcieCtrl_dmaReadBufAddrQ_D_IN),
						   .ENQ(pcieCtrl_dmaReadBufAddrQ_ENQ),
						   .DEQ(pcieCtrl_dmaReadBufAddrQ_DEQ),
						   .CLR(pcieCtrl_dmaReadBufAddrQ_CLR),
						   .D_OUT(pcieCtrl_dmaReadBufAddrQ_D_OUT),
						   .FULL_N(pcieCtrl_dmaReadBufAddrQ_FULL_N),
						   .EMPTY_N(pcieCtrl_dmaReadBufAddrQ_EMPTY_N));

  // submodule pcieCtrl_dmaReadOutQ_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd128),
	  .MEMSIZE(8'd128)) pcieCtrl_dmaReadOutQ_memory(.CLKA(pcie_user_clk),
							.CLKB(pcie_user_clk),
							.ADDRA(pcieCtrl_dmaReadOutQ_memory_ADDRA),
							.ADDRB(pcieCtrl_dmaReadOutQ_memory_ADDRB),
							.DIA(pcieCtrl_dmaReadOutQ_memory_DIA),
							.DIB(pcieCtrl_dmaReadOutQ_memory_DIB),
							.WEA(pcieCtrl_dmaReadOutQ_memory_WEA),
							.WEB(pcieCtrl_dmaReadOutQ_memory_WEB),
							.ENA(pcieCtrl_dmaReadOutQ_memory_ENA),
							.ENB(pcieCtrl_dmaReadOutQ_memory_ENB),
							.DOA(),
							.DOB(pcieCtrl_dmaReadOutQ_memory_DOB));

  // submodule pcieCtrl_dmaReadOutRQ
  FIFO2 #(.width(32'd128),
	  .guarded(1'd1)) pcieCtrl_dmaReadOutRQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_dmaReadOutRQ_D_IN),
						.ENQ(pcieCtrl_dmaReadOutRQ_ENQ),
						.DEQ(pcieCtrl_dmaReadOutRQ_DEQ),
						.CLR(pcieCtrl_dmaReadOutRQ_CLR),
						.D_OUT(pcieCtrl_dmaReadOutRQ_D_OUT),
						.FULL_N(pcieCtrl_dmaReadOutRQ_FULL_N),
						.EMPTY_N(pcieCtrl_dmaReadOutRQ_EMPTY_N));

  // submodule pcieCtrl_dmaReadReqQ
  FIFO2 #(.width(32'd50),
	  .guarded(1'd1)) pcieCtrl_dmaReadReqQ(.RST(pcie_user_reset_n),
					       .CLK(pcie_user_clk),
					       .D_IN(pcieCtrl_dmaReadReqQ_D_IN),
					       .ENQ(pcieCtrl_dmaReadReqQ_ENQ),
					       .DEQ(pcieCtrl_dmaReadReqQ_DEQ),
					       .CLR(pcieCtrl_dmaReadReqQ_CLR),
					       .D_OUT(pcieCtrl_dmaReadReqQ_D_OUT),
					       .FULL_N(pcieCtrl_dmaReadReqQ_FULL_N),
					       .EMPTY_N(pcieCtrl_dmaReadReqQ_EMPTY_N));

  // submodule pcieCtrl_dmaReadTagOrderQ_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd8),
	  .MEMSIZE(9'd256)) pcieCtrl_dmaReadTagOrderQ_memory(.CLKA(pcie_user_clk),
							     .CLKB(pcie_user_clk),
							     .ADDRA(pcieCtrl_dmaReadTagOrderQ_memory_ADDRA),
							     .ADDRB(pcieCtrl_dmaReadTagOrderQ_memory_ADDRB),
							     .DIA(pcieCtrl_dmaReadTagOrderQ_memory_DIA),
							     .DIB(pcieCtrl_dmaReadTagOrderQ_memory_DIB),
							     .WEA(pcieCtrl_dmaReadTagOrderQ_memory_WEA),
							     .WEB(pcieCtrl_dmaReadTagOrderQ_memory_WEB),
							     .ENA(pcieCtrl_dmaReadTagOrderQ_memory_ENA),
							     .ENB(pcieCtrl_dmaReadTagOrderQ_memory_ENB),
							     .DOA(),
							     .DOB(pcieCtrl_dmaReadTagOrderQ_memory_DOB));

  // submodule pcieCtrl_dmaReadWordQ_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd136),
	  .MEMSIZE(9'd256)) pcieCtrl_dmaReadWordQ_memory(.CLKA(pcie_user_clk),
							 .CLKB(pcie_user_clk),
							 .ADDRA(pcieCtrl_dmaReadWordQ_memory_ADDRA),
							 .ADDRB(pcieCtrl_dmaReadWordQ_memory_ADDRB),
							 .DIA(pcieCtrl_dmaReadWordQ_memory_DIA),
							 .DIB(pcieCtrl_dmaReadWordQ_memory_DIB),
							 .WEA(pcieCtrl_dmaReadWordQ_memory_WEA),
							 .WEB(pcieCtrl_dmaReadWordQ_memory_WEB),
							 .ENA(pcieCtrl_dmaReadWordQ_memory_ENA),
							 .ENB(pcieCtrl_dmaReadWordQ_memory_ENB),
							 .DOA(),
							 .DOB(pcieCtrl_dmaReadWordQ_memory_DOB));

  // submodule pcieCtrl_dmaReadWordRQ
  FIFO2 #(.width(32'd136),
	  .guarded(1'd1)) pcieCtrl_dmaReadWordRQ(.RST(pcie_user_reset_n),
						 .CLK(pcie_user_clk),
						 .D_IN(pcieCtrl_dmaReadWordRQ_D_IN),
						 .ENQ(pcieCtrl_dmaReadWordRQ_ENQ),
						 .DEQ(pcieCtrl_dmaReadWordRQ_DEQ),
						 .CLR(pcieCtrl_dmaReadWordRQ_CLR),
						 .D_OUT(pcieCtrl_dmaReadWordRQ_D_OUT),
						 .FULL_N(pcieCtrl_dmaReadWordRQ_FULL_N),
						 .EMPTY_N(pcieCtrl_dmaReadWordRQ_EMPTY_N));

  // submodule pcieCtrl_dmaWriteBufAddrQ
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) pcieCtrl_dmaWriteBufAddrQ(.RST(pcie_user_reset_n),
						    .CLK(pcie_user_clk),
						    .D_IN(pcieCtrl_dmaWriteBufAddrQ_D_IN),
						    .ENQ(pcieCtrl_dmaWriteBufAddrQ_ENQ),
						    .DEQ(pcieCtrl_dmaWriteBufAddrQ_DEQ),
						    .CLR(pcieCtrl_dmaWriteBufAddrQ_CLR),
						    .D_OUT(pcieCtrl_dmaWriteBufAddrQ_D_OUT),
						    .FULL_N(pcieCtrl_dmaWriteBufAddrQ_FULL_N),
						    .EMPTY_N(pcieCtrl_dmaWriteBufAddrQ_EMPTY_N));

  // submodule pcieCtrl_dmaWriteReqQ
  FIFO2 #(.width(32'd50),
	  .guarded(1'd1)) pcieCtrl_dmaWriteReqQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_dmaWriteReqQ_D_IN),
						.ENQ(pcieCtrl_dmaWriteReqQ_ENQ),
						.DEQ(pcieCtrl_dmaWriteReqQ_DEQ),
						.CLR(pcieCtrl_dmaWriteReqQ_CLR),
						.D_OUT(pcieCtrl_dmaWriteReqQ_D_OUT),
						.FULL_N(pcieCtrl_dmaWriteReqQ_FULL_N),
						.EMPTY_N(pcieCtrl_dmaWriteReqQ_EMPTY_N));

  // submodule pcieCtrl_dmaWriteWordQ
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) pcieCtrl_dmaWriteWordQ(.RST(pcie_user_reset_n),
						     .CLK(pcie_user_clk),
						     .D_IN(pcieCtrl_dmaWriteWordQ_D_IN),
						     .ENQ(pcieCtrl_dmaWriteWordQ_ENQ),
						     .DEQ(pcieCtrl_dmaWriteWordQ_DEQ),
						     .CLR(pcieCtrl_dmaWriteWordQ_CLR),
						     .D_OUT(pcieCtrl_dmaWriteWordQ_D_OUT),
						     .FULL_N(pcieCtrl_dmaWriteWordQ_FULL_N),
						     .EMPTY_N(pcieCtrl_dmaWriteWordQ_EMPTY_N));

  // submodule pcieCtrl_doneMap_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd18),
	  .MEMSIZE(9'd256)) pcieCtrl_doneMap_memory(.CLKA(pcie_user_clk),
						    .CLKB(pcie_user_clk),
						    .ADDRA(pcieCtrl_doneMap_memory_ADDRA),
						    .ADDRB(pcieCtrl_doneMap_memory_ADDRB),
						    .DIA(pcieCtrl_doneMap_memory_DIA),
						    .DIB(pcieCtrl_doneMap_memory_DIB),
						    .WEA(pcieCtrl_doneMap_memory_WEA),
						    .WEB(pcieCtrl_doneMap_memory_WEB),
						    .ENA(pcieCtrl_doneMap_memory_ENA),
						    .ENB(pcieCtrl_doneMap_memory_ENB),
						    .DOA(pcieCtrl_doneMap_memory_DOA),
						    .DOB(pcieCtrl_doneMap_memory_DOB));

  // submodule pcieCtrl_doneMap_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd18),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_doneMap_serverAdapterA_outDataCore(.RST(pcie_user_reset_n),
									  .CLK(pcie_user_clk),
									  .D_IN(pcieCtrl_doneMap_serverAdapterA_outDataCore_D_IN),
									  .ENQ(pcieCtrl_doneMap_serverAdapterA_outDataCore_ENQ),
									  .DEQ(pcieCtrl_doneMap_serverAdapterA_outDataCore_DEQ),
									  .CLR(pcieCtrl_doneMap_serverAdapterA_outDataCore_CLR),
									  .D_OUT(),
									  .FULL_N(pcieCtrl_doneMap_serverAdapterA_outDataCore_FULL_N),
									  .EMPTY_N());

  // submodule pcieCtrl_doneMap_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd18),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_doneMap_serverAdapterB_outDataCore(.RST(pcie_user_reset_n),
									  .CLK(pcie_user_clk),
									  .D_IN(pcieCtrl_doneMap_serverAdapterB_outDataCore_D_IN),
									  .ENQ(pcieCtrl_doneMap_serverAdapterB_outDataCore_ENQ),
									  .DEQ(pcieCtrl_doneMap_serverAdapterB_outDataCore_DEQ),
									  .CLR(pcieCtrl_doneMap_serverAdapterB_outDataCore_CLR),
									  .D_OUT(pcieCtrl_doneMap_serverAdapterB_outDataCore_D_OUT),
									  .FULL_N(pcieCtrl_doneMap_serverAdapterB_outDataCore_FULL_N),
									  .EMPTY_N(pcieCtrl_doneMap_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pcieCtrl_doneReorderedTagQ
  FIFO2 #(.width(32'd8),
	  .guarded(1'd1)) pcieCtrl_doneReorderedTagQ(.RST(pcie_user_reset_n),
						     .CLK(pcie_user_clk),
						     .D_IN(pcieCtrl_doneReorderedTagQ_D_IN),
						     .ENQ(pcieCtrl_doneReorderedTagQ_ENQ),
						     .DEQ(pcieCtrl_doneReorderedTagQ_DEQ),
						     .CLR(pcieCtrl_doneReorderedTagQ_CLR),
						     .D_OUT(pcieCtrl_doneReorderedTagQ_D_OUT),
						     .FULL_N(pcieCtrl_doneReorderedTagQ_FULL_N),
						     .EMPTY_N(pcieCtrl_doneReorderedTagQ_EMPTY_N));

  // submodule pcieCtrl_doneShifter_stageFifos_0
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_doneShifter_stageFifos_0(.RST(pcie_user_reset_n),
							    .CLK(pcie_user_clk),
							    .D_IN(pcieCtrl_doneShifter_stageFifos_0_D_IN),
							    .ENQ(pcieCtrl_doneShifter_stageFifos_0_ENQ),
							    .DEQ(pcieCtrl_doneShifter_stageFifos_0_DEQ),
							    .CLR(pcieCtrl_doneShifter_stageFifos_0_CLR),
							    .D_OUT(pcieCtrl_doneShifter_stageFifos_0_D_OUT),
							    .FULL_N(pcieCtrl_doneShifter_stageFifos_0_FULL_N),
							    .EMPTY_N(pcieCtrl_doneShifter_stageFifos_0_EMPTY_N));

  // submodule pcieCtrl_doneShifter_stageFifos_1
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_doneShifter_stageFifos_1(.RST(pcie_user_reset_n),
							    .CLK(pcie_user_clk),
							    .D_IN(pcieCtrl_doneShifter_stageFifos_1_D_IN),
							    .ENQ(pcieCtrl_doneShifter_stageFifos_1_ENQ),
							    .DEQ(pcieCtrl_doneShifter_stageFifos_1_DEQ),
							    .CLR(pcieCtrl_doneShifter_stageFifos_1_CLR),
							    .D_OUT(pcieCtrl_doneShifter_stageFifos_1_D_OUT),
							    .FULL_N(pcieCtrl_doneShifter_stageFifos_1_FULL_N),
							    .EMPTY_N(pcieCtrl_doneShifter_stageFifos_1_EMPTY_N));

  // submodule pcieCtrl_doneShifter_stageFifos_2
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_doneShifter_stageFifos_2(.RST(pcie_user_reset_n),
							    .CLK(pcie_user_clk),
							    .D_IN(pcieCtrl_doneShifter_stageFifos_2_D_IN),
							    .ENQ(pcieCtrl_doneShifter_stageFifos_2_ENQ),
							    .DEQ(pcieCtrl_doneShifter_stageFifos_2_DEQ),
							    .CLR(pcieCtrl_doneShifter_stageFifos_2_CLR),
							    .D_OUT(pcieCtrl_doneShifter_stageFifos_2_D_OUT),
							    .FULL_N(pcieCtrl_doneShifter_stageFifos_2_FULL_N),
							    .EMPTY_N(pcieCtrl_doneShifter_stageFifos_2_EMPTY_N));

  // submodule pcieCtrl_doneShifter_stageFifos_3
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_doneShifter_stageFifos_3(.RST(pcie_user_reset_n),
							    .CLK(pcie_user_clk),
							    .D_IN(pcieCtrl_doneShifter_stageFifos_3_D_IN),
							    .ENQ(pcieCtrl_doneShifter_stageFifos_3_ENQ),
							    .DEQ(pcieCtrl_doneShifter_stageFifos_3_DEQ),
							    .CLR(pcieCtrl_doneShifter_stageFifos_3_CLR),
							    .D_OUT(pcieCtrl_doneShifter_stageFifos_3_D_OUT),
							    .FULL_N(pcieCtrl_doneShifter_stageFifos_3_FULL_N),
							    .EMPTY_N(pcieCtrl_doneShifter_stageFifos_3_EMPTY_N));

  // submodule pcieCtrl_doneShifter_stageFifos_4
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_doneShifter_stageFifos_4(.RST(pcie_user_reset_n),
							    .CLK(pcie_user_clk),
							    .D_IN(pcieCtrl_doneShifter_stageFifos_4_D_IN),
							    .ENQ(pcieCtrl_doneShifter_stageFifos_4_ENQ),
							    .DEQ(pcieCtrl_doneShifter_stageFifos_4_DEQ),
							    .CLR(pcieCtrl_doneShifter_stageFifos_4_CLR),
							    .D_OUT(pcieCtrl_doneShifter_stageFifos_4_D_OUT),
							    .FULL_N(pcieCtrl_doneShifter_stageFifos_4_FULL_N),
							    .EMPTY_N(pcieCtrl_doneShifter_stageFifos_4_EMPTY_N));

  // submodule pcieCtrl_doneShifter_stageFifos_5
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_doneShifter_stageFifos_5(.RST(pcie_user_reset_n),
							    .CLK(pcie_user_clk),
							    .D_IN(pcieCtrl_doneShifter_stageFifos_5_D_IN),
							    .ENQ(pcieCtrl_doneShifter_stageFifos_5_ENQ),
							    .DEQ(pcieCtrl_doneShifter_stageFifos_5_DEQ),
							    .CLR(pcieCtrl_doneShifter_stageFifos_5_CLR),
							    .D_OUT(pcieCtrl_doneShifter_stageFifos_5_D_OUT),
							    .FULL_N(pcieCtrl_doneShifter_stageFifos_5_FULL_N),
							    .EMPTY_N(pcieCtrl_doneShifter_stageFifos_5_EMPTY_N));

  // submodule pcieCtrl_doneShifter_stageFifos_6
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_doneShifter_stageFifos_6(.RST(pcie_user_reset_n),
							    .CLK(pcie_user_clk),
							    .D_IN(pcieCtrl_doneShifter_stageFifos_6_D_IN),
							    .ENQ(pcieCtrl_doneShifter_stageFifos_6_ENQ),
							    .DEQ(pcieCtrl_doneShifter_stageFifos_6_DEQ),
							    .CLR(pcieCtrl_doneShifter_stageFifos_6_CLR),
							    .D_OUT(pcieCtrl_doneShifter_stageFifos_6_D_OUT),
							    .FULL_N(pcieCtrl_doneShifter_stageFifos_6_FULL_N),
							    .EMPTY_N(pcieCtrl_doneShifter_stageFifos_6_EMPTY_N));

  // submodule pcieCtrl_freeReadTagFQ
  FIFO2 #(.width(32'd8),
	  .guarded(1'd1)) pcieCtrl_freeReadTagFQ(.RST(pcie_user_reset_n),
						 .CLK(pcie_user_clk),
						 .D_IN(pcieCtrl_freeReadTagFQ_D_IN),
						 .ENQ(pcieCtrl_freeReadTagFQ_ENQ),
						 .DEQ(pcieCtrl_freeReadTagFQ_DEQ),
						 .CLR(pcieCtrl_freeReadTagFQ_CLR),
						 .D_OUT(pcieCtrl_freeReadTagFQ_D_OUT),
						 .FULL_N(pcieCtrl_freeReadTagFQ_FULL_N),
						 .EMPTY_N(pcieCtrl_freeReadTagFQ_EMPTY_N));

  // submodule pcieCtrl_freeReadTagQ_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd8),
	  .MEMSIZE(9'd256)) pcieCtrl_freeReadTagQ_memory(.CLKA(pcie_user_clk),
							 .CLKB(pcie_user_clk),
							 .ADDRA(pcieCtrl_freeReadTagQ_memory_ADDRA),
							 .ADDRB(pcieCtrl_freeReadTagQ_memory_ADDRB),
							 .DIA(pcieCtrl_freeReadTagQ_memory_DIA),
							 .DIB(pcieCtrl_freeReadTagQ_memory_DIB),
							 .WEA(pcieCtrl_freeReadTagQ_memory_WEA),
							 .WEB(pcieCtrl_freeReadTagQ_memory_WEB),
							 .ENA(pcieCtrl_freeReadTagQ_memory_ENA),
							 .ENB(pcieCtrl_freeReadTagQ_memory_ENB),
							 .DOA(),
							 .DOB(pcieCtrl_freeReadTagQ_memory_DOB));

  // submodule pcieCtrl_freeWriteTagQ_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd8),
	  .MEMSIZE(9'd256)) pcieCtrl_freeWriteTagQ_memory(.CLKA(pcie_user_clk),
							  .CLKB(pcie_user_clk),
							  .ADDRA(pcieCtrl_freeWriteTagQ_memory_ADDRA),
							  .ADDRB(pcieCtrl_freeWriteTagQ_memory_ADDRB),
							  .DIA(pcieCtrl_freeWriteTagQ_memory_DIA),
							  .DIB(pcieCtrl_freeWriteTagQ_memory_DIB),
							  .WEA(pcieCtrl_freeWriteTagQ_memory_WEA),
							  .WEB(pcieCtrl_freeWriteTagQ_memory_WEB),
							  .ENA(pcieCtrl_freeWriteTagQ_memory_ENA),
							  .ENB(pcieCtrl_freeWriteTagQ_memory_ENB),
							  .DOA(),
							  .DOB(pcieCtrl_freeWriteTagQ_memory_DOB));

  // submodule pcieCtrl_freeWriteTagStageQ
  FIFO2 #(.width(32'd8),
	  .guarded(1'd1)) pcieCtrl_freeWriteTagStageQ(.RST(pcie_user_reset_n),
						      .CLK(pcie_user_clk),
						      .D_IN(pcieCtrl_freeWriteTagStageQ_D_IN),
						      .ENQ(pcieCtrl_freeWriteTagStageQ_ENQ),
						      .DEQ(pcieCtrl_freeWriteTagStageQ_DEQ),
						      .CLR(pcieCtrl_freeWriteTagStageQ_CLR),
						      .D_OUT(pcieCtrl_freeWriteTagStageQ_D_OUT),
						      .FULL_N(pcieCtrl_freeWriteTagStageQ_FULL_N),
						      .EMPTY_N(pcieCtrl_freeWriteTagStageQ_EMPTY_N));

  // submodule pcieCtrl_ioReadQ
  SizedFIFO #(.p1width(32'd51),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) pcieCtrl_ioReadQ(.RST(pcie_user_reset_n),
					       .CLK(pcie_user_clk),
					       .D_IN(pcieCtrl_ioReadQ_D_IN),
					       .ENQ(pcieCtrl_ioReadQ_ENQ),
					       .DEQ(pcieCtrl_ioReadQ_DEQ),
					       .CLR(pcieCtrl_ioReadQ_CLR),
					       .D_OUT(pcieCtrl_ioReadQ_D_OUT),
					       .FULL_N(pcieCtrl_ioReadQ_FULL_N),
					       .EMPTY_N(pcieCtrl_ioReadQ_EMPTY_N));

  // submodule pcieCtrl_orderShiftedQ
  FIFO2 #(.width(32'd128),
	  .guarded(1'd1)) pcieCtrl_orderShiftedQ(.RST(pcie_user_reset_n),
						 .CLK(pcie_user_clk),
						 .D_IN(pcieCtrl_orderShiftedQ_D_IN),
						 .ENQ(pcieCtrl_orderShiftedQ_ENQ),
						 .DEQ(pcieCtrl_orderShiftedQ_DEQ),
						 .CLR(pcieCtrl_orderShiftedQ_CLR),
						 .D_OUT(pcieCtrl_orderShiftedQ_D_OUT),
						 .FULL_N(pcieCtrl_orderShiftedQ_FULL_N),
						 .EMPTY_N(pcieCtrl_orderShiftedQ_EMPTY_N));

  // submodule pcieCtrl_orderShifter_stageFifos_0
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_orderShifter_stageFifos_0(.RST(pcie_user_reset_n),
							     .CLK(pcie_user_clk),
							     .D_IN(pcieCtrl_orderShifter_stageFifos_0_D_IN),
							     .ENQ(pcieCtrl_orderShifter_stageFifos_0_ENQ),
							     .DEQ(pcieCtrl_orderShifter_stageFifos_0_DEQ),
							     .CLR(pcieCtrl_orderShifter_stageFifos_0_CLR),
							     .D_OUT(pcieCtrl_orderShifter_stageFifos_0_D_OUT),
							     .FULL_N(pcieCtrl_orderShifter_stageFifos_0_FULL_N),
							     .EMPTY_N(pcieCtrl_orderShifter_stageFifos_0_EMPTY_N));

  // submodule pcieCtrl_orderShifter_stageFifos_1
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_orderShifter_stageFifos_1(.RST(pcie_user_reset_n),
							     .CLK(pcie_user_clk),
							     .D_IN(pcieCtrl_orderShifter_stageFifos_1_D_IN),
							     .ENQ(pcieCtrl_orderShifter_stageFifos_1_ENQ),
							     .DEQ(pcieCtrl_orderShifter_stageFifos_1_DEQ),
							     .CLR(pcieCtrl_orderShifter_stageFifos_1_CLR),
							     .D_OUT(pcieCtrl_orderShifter_stageFifos_1_D_OUT),
							     .FULL_N(pcieCtrl_orderShifter_stageFifos_1_FULL_N),
							     .EMPTY_N(pcieCtrl_orderShifter_stageFifos_1_EMPTY_N));

  // submodule pcieCtrl_orderShifter_stageFifos_2
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_orderShifter_stageFifos_2(.RST(pcie_user_reset_n),
							     .CLK(pcie_user_clk),
							     .D_IN(pcieCtrl_orderShifter_stageFifos_2_D_IN),
							     .ENQ(pcieCtrl_orderShifter_stageFifos_2_ENQ),
							     .DEQ(pcieCtrl_orderShifter_stageFifos_2_DEQ),
							     .CLR(pcieCtrl_orderShifter_stageFifos_2_CLR),
							     .D_OUT(pcieCtrl_orderShifter_stageFifos_2_D_OUT),
							     .FULL_N(pcieCtrl_orderShifter_stageFifos_2_FULL_N),
							     .EMPTY_N(pcieCtrl_orderShifter_stageFifos_2_EMPTY_N));

  // submodule pcieCtrl_orderShifter_stageFifos_3
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_orderShifter_stageFifos_3(.RST(pcie_user_reset_n),
							     .CLK(pcie_user_clk),
							     .D_IN(pcieCtrl_orderShifter_stageFifos_3_D_IN),
							     .ENQ(pcieCtrl_orderShifter_stageFifos_3_ENQ),
							     .DEQ(pcieCtrl_orderShifter_stageFifos_3_DEQ),
							     .CLR(pcieCtrl_orderShifter_stageFifos_3_CLR),
							     .D_OUT(pcieCtrl_orderShifter_stageFifos_3_D_OUT),
							     .FULL_N(pcieCtrl_orderShifter_stageFifos_3_FULL_N),
							     .EMPTY_N(pcieCtrl_orderShifter_stageFifos_3_EMPTY_N));

  // submodule pcieCtrl_orderShifter_stageFifos_4
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_orderShifter_stageFifos_4(.RST(pcie_user_reset_n),
							     .CLK(pcie_user_clk),
							     .D_IN(pcieCtrl_orderShifter_stageFifos_4_D_IN),
							     .ENQ(pcieCtrl_orderShifter_stageFifos_4_ENQ),
							     .DEQ(pcieCtrl_orderShifter_stageFifos_4_DEQ),
							     .CLR(pcieCtrl_orderShifter_stageFifos_4_CLR),
							     .D_OUT(pcieCtrl_orderShifter_stageFifos_4_D_OUT),
							     .FULL_N(pcieCtrl_orderShifter_stageFifos_4_FULL_N),
							     .EMPTY_N(pcieCtrl_orderShifter_stageFifos_4_EMPTY_N));

  // submodule pcieCtrl_orderShifter_stageFifos_5
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_orderShifter_stageFifos_5(.RST(pcie_user_reset_n),
							     .CLK(pcie_user_clk),
							     .D_IN(pcieCtrl_orderShifter_stageFifos_5_D_IN),
							     .ENQ(pcieCtrl_orderShifter_stageFifos_5_ENQ),
							     .DEQ(pcieCtrl_orderShifter_stageFifos_5_DEQ),
							     .CLR(pcieCtrl_orderShifter_stageFifos_5_CLR),
							     .D_OUT(pcieCtrl_orderShifter_stageFifos_5_D_OUT),
							     .FULL_N(pcieCtrl_orderShifter_stageFifos_5_FULL_N),
							     .EMPTY_N(pcieCtrl_orderShifter_stageFifos_5_EMPTY_N));

  // submodule pcieCtrl_orderShifter_stageFifos_6
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) pcieCtrl_orderShifter_stageFifos_6(.RST(pcie_user_reset_n),
							     .CLK(pcie_user_clk),
							     .D_IN(pcieCtrl_orderShifter_stageFifos_6_D_IN),
							     .ENQ(pcieCtrl_orderShifter_stageFifos_6_ENQ),
							     .DEQ(pcieCtrl_orderShifter_stageFifos_6_DEQ),
							     .CLR(pcieCtrl_orderShifter_stageFifos_6_CLR),
							     .D_OUT(pcieCtrl_orderShifter_stageFifos_6_D_OUT),
							     .FULL_N(pcieCtrl_orderShifter_stageFifos_6_FULL_N),
							     .EMPTY_N(pcieCtrl_orderShifter_stageFifos_6_EMPTY_N));

  // submodule pcieCtrl_orderTagBypassQ1
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) pcieCtrl_orderTagBypassQ1(.RST(pcie_user_reset_n),
							.CLK(pcie_user_clk),
							.D_IN(pcieCtrl_orderTagBypassQ1_D_IN),
							.ENQ(pcieCtrl_orderTagBypassQ1_ENQ),
							.DEQ(pcieCtrl_orderTagBypassQ1_DEQ),
							.CLR(pcieCtrl_orderTagBypassQ1_CLR),
							.D_OUT(pcieCtrl_orderTagBypassQ1_D_OUT),
							.FULL_N(pcieCtrl_orderTagBypassQ1_FULL_N),
							.EMPTY_N(pcieCtrl_orderTagBypassQ1_EMPTY_N));

  // submodule pcieCtrl_orderTagBypassQ2
  FIFO2 #(.width(32'd8),
	  .guarded(1'd1)) pcieCtrl_orderTagBypassQ2(.RST(pcie_user_reset_n),
						    .CLK(pcie_user_clk),
						    .D_IN(pcieCtrl_orderTagBypassQ2_D_IN),
						    .ENQ(pcieCtrl_orderTagBypassQ2_ENQ),
						    .DEQ(pcieCtrl_orderTagBypassQ2_DEQ),
						    .CLR(pcieCtrl_orderTagBypassQ2_CLR),
						    .D_OUT(pcieCtrl_orderTagBypassQ2_D_OUT),
						    .FULL_N(pcieCtrl_orderTagBypassQ2_FULL_N),
						    .EMPTY_N(pcieCtrl_orderTagBypassQ2_EMPTY_N));

  // submodule pcieCtrl_orderedReadDoneTagQ
  SizedFIFO #(.p1width(32'd18),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) pcieCtrl_orderedReadDoneTagQ(.RST(pcie_user_reset_n),
							   .CLK(pcie_user_clk),
							   .D_IN(pcieCtrl_orderedReadDoneTagQ_D_IN),
							   .ENQ(pcieCtrl_orderedReadDoneTagQ_ENQ),
							   .DEQ(pcieCtrl_orderedReadDoneTagQ_DEQ),
							   .CLR(pcieCtrl_orderedReadDoneTagQ_CLR),
							   .D_OUT(pcieCtrl_orderedReadDoneTagQ_D_OUT),
							   .FULL_N(pcieCtrl_orderedReadDoneTagQ_FULL_N),
							   .EMPTY_N(pcieCtrl_orderedReadDoneTagQ_EMPTY_N));

  // submodule pcieCtrl_readBurst2Q
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) pcieCtrl_readBurst2Q(.RST(pcie_user_reset_n),
					       .CLK(pcie_user_clk),
					       .D_IN(pcieCtrl_readBurst2Q_D_IN),
					       .ENQ(pcieCtrl_readBurst2Q_ENQ),
					       .DEQ(pcieCtrl_readBurst2Q_DEQ),
					       .CLR(pcieCtrl_readBurst2Q_CLR),
					       .D_OUT(pcieCtrl_readBurst2Q_D_OUT),
					       .FULL_N(pcieCtrl_readBurst2Q_FULL_N),
					       .EMPTY_N(pcieCtrl_readBurst2Q_EMPTY_N));

  // submodule pcieCtrl_readBurstQ
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) pcieCtrl_readBurstQ(.RST(pcie_user_reset_n),
					      .CLK(pcie_user_clk),
					      .D_IN(pcieCtrl_readBurstQ_D_IN),
					      .ENQ(pcieCtrl_readBurstQ_ENQ),
					      .DEQ(pcieCtrl_readBurstQ_DEQ),
					      .CLR(pcieCtrl_readBurstQ_CLR),
					      .D_OUT(pcieCtrl_readBurstQ_D_OUT),
					      .FULL_N(pcieCtrl_readBurstQ_FULL_N),
					      .EMPTY_N(pcieCtrl_readBurstQ_EMPTY_N));

  // submodule pcieCtrl_readDoneTagQ
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) pcieCtrl_readDoneTagQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_readDoneTagQ_D_IN),
						.ENQ(pcieCtrl_readDoneTagQ_ENQ),
						.DEQ(pcieCtrl_readDoneTagQ_DEQ),
						.CLR(pcieCtrl_readDoneTagQ_CLR),
						.D_OUT(pcieCtrl_readDoneTagQ_D_OUT),
						.FULL_N(pcieCtrl_readDoneTagQ_FULL_N),
						.EMPTY_N(pcieCtrl_readDoneTagQ_EMPTY_N));

  // submodule pcieCtrl_readReorder_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd128),
	  .MEMSIZE(11'd1024)) pcieCtrl_readReorder_memory(.CLKA(pcie_user_clk),
							  .CLKB(pcie_user_clk),
							  .ADDRA(pcieCtrl_readReorder_memory_ADDRA),
							  .ADDRB(pcieCtrl_readReorder_memory_ADDRB),
							  .DIA(pcieCtrl_readReorder_memory_DIA),
							  .DIB(pcieCtrl_readReorder_memory_DIB),
							  .WEA(pcieCtrl_readReorder_memory_WEA),
							  .WEB(pcieCtrl_readReorder_memory_WEB),
							  .ENA(pcieCtrl_readReorder_memory_ENA),
							  .ENB(pcieCtrl_readReorder_memory_ENB),
							  .DOA(pcieCtrl_readReorder_memory_DOA),
							  .DOB(pcieCtrl_readReorder_memory_DOB));

  // submodule pcieCtrl_readReorder_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_readReorder_serverAdapterA_outDataCore(.RST(pcie_user_reset_n),
									      .CLK(pcie_user_clk),
									      .D_IN(pcieCtrl_readReorder_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pcieCtrl_readReorder_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pcieCtrl_readReorder_serverAdapterA_outDataCore_DEQ),
									      .CLR(pcieCtrl_readReorder_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pcieCtrl_readReorder_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pcieCtrl_readReorder_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_readReorder_serverAdapterB_outDataCore(.RST(pcie_user_reset_n),
									      .CLK(pcie_user_clk),
									      .D_IN(pcieCtrl_readReorder_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pcieCtrl_readReorder_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pcieCtrl_readReorder_serverAdapterB_outDataCore_DEQ),
									      .CLR(pcieCtrl_readReorder_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pcieCtrl_readReorder_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pcieCtrl_readReorder_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pcieCtrl_sendTLPQ
  SizedFIFO #(.p1width(32'd145),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) pcieCtrl_sendTLPQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_sendTLPQ_D_IN),
						.ENQ(pcieCtrl_sendTLPQ_ENQ),
						.DEQ(pcieCtrl_sendTLPQ_DEQ),
						.CLR(pcieCtrl_sendTLPQ_CLR),
						.D_OUT(pcieCtrl_sendTLPQ_D_OUT),
						.FULL_N(pcieCtrl_sendTLPQ_FULL_N),
						.EMPTY_N(pcieCtrl_sendTLPQ_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_mb_inQ1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_mb_inQ1(.RST(pcie_user_reset_n),
							 .CLK(pcie_user_clk),
							 .D_IN(pcieCtrl_sendTLPm_ma_0_mb_inQ1_D_IN),
							 .ENQ(pcieCtrl_sendTLPm_ma_0_mb_inQ1_ENQ),
							 .DEQ(pcieCtrl_sendTLPm_ma_0_mb_inQ1_DEQ),
							 .CLR(pcieCtrl_sendTLPm_ma_0_mb_inQ1_CLR),
							 .D_OUT(pcieCtrl_sendTLPm_ma_0_mb_inQ1_D_OUT),
							 .FULL_N(pcieCtrl_sendTLPm_ma_0_mb_inQ1_FULL_N),
							 .EMPTY_N(pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_mb_inQ2
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_mb_inQ2(.RST(pcie_user_reset_n),
							 .CLK(pcie_user_clk),
							 .D_IN(pcieCtrl_sendTLPm_ma_0_mb_inQ2_D_IN),
							 .ENQ(pcieCtrl_sendTLPm_ma_0_mb_inQ2_ENQ),
							 .DEQ(pcieCtrl_sendTLPm_ma_0_mb_inQ2_DEQ),
							 .CLR(pcieCtrl_sendTLPm_ma_0_mb_inQ2_CLR),
							 .D_OUT(pcieCtrl_sendTLPm_ma_0_mb_inQ2_D_OUT),
							 .FULL_N(pcieCtrl_sendTLPm_ma_0_mb_inQ2_FULL_N),
							 .EMPTY_N(pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_0_mb_outQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_0_mb_outQ(.RST(pcie_user_reset_n),
							 .CLK(pcie_user_clk),
							 .D_IN(pcieCtrl_sendTLPm_ma_0_mb_outQ_D_IN),
							 .ENQ(pcieCtrl_sendTLPm_ma_0_mb_outQ_ENQ),
							 .DEQ(pcieCtrl_sendTLPm_ma_0_mb_outQ_DEQ),
							 .CLR(pcieCtrl_sendTLPm_ma_0_mb_outQ_CLR),
							 .D_OUT(pcieCtrl_sendTLPm_ma_0_mb_outQ_D_OUT),
							 .FULL_N(pcieCtrl_sendTLPm_ma_0_mb_outQ_FULL_N),
							 .EMPTY_N(pcieCtrl_sendTLPm_ma_0_mb_outQ_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_D_OUT),
							      .FULL_N(),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_D_OUT),
							      .FULL_N(),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_D_OUT),
							      .FULL_N(),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ(.RST(pcie_user_reset_n),
							      .CLK(pcie_user_clk),
							      .D_IN(pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_D_IN),
							      .ENQ(pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_ENQ),
							      .DEQ(pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_DEQ),
							      .CLR(pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_CLR),
							      .D_OUT(pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_D_OUT),
							      .FULL_N(pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_FULL_N),
							      .EMPTY_N(pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_mb_inQ1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_mb_inQ1(.RST(pcie_user_reset_n),
							 .CLK(pcie_user_clk),
							 .D_IN(pcieCtrl_sendTLPm_ma_1_mb_inQ1_D_IN),
							 .ENQ(pcieCtrl_sendTLPm_ma_1_mb_inQ1_ENQ),
							 .DEQ(pcieCtrl_sendTLPm_ma_1_mb_inQ1_DEQ),
							 .CLR(pcieCtrl_sendTLPm_ma_1_mb_inQ1_CLR),
							 .D_OUT(pcieCtrl_sendTLPm_ma_1_mb_inQ1_D_OUT),
							 .FULL_N(pcieCtrl_sendTLPm_ma_1_mb_inQ1_FULL_N),
							 .EMPTY_N(pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_mb_inQ2
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_mb_inQ2(.RST(pcie_user_reset_n),
							 .CLK(pcie_user_clk),
							 .D_IN(pcieCtrl_sendTLPm_ma_1_mb_inQ2_D_IN),
							 .ENQ(pcieCtrl_sendTLPm_ma_1_mb_inQ2_ENQ),
							 .DEQ(pcieCtrl_sendTLPm_ma_1_mb_inQ2_DEQ),
							 .CLR(pcieCtrl_sendTLPm_ma_1_mb_inQ2_CLR),
							 .D_OUT(pcieCtrl_sendTLPm_ma_1_mb_inQ2_D_OUT),
							 .FULL_N(pcieCtrl_sendTLPm_ma_1_mb_inQ2_FULL_N),
							 .EMPTY_N(pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_ma_1_mb_outQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_ma_1_mb_outQ(.RST(pcie_user_reset_n),
							 .CLK(pcie_user_clk),
							 .D_IN(pcieCtrl_sendTLPm_ma_1_mb_outQ_D_IN),
							 .ENQ(pcieCtrl_sendTLPm_ma_1_mb_outQ_ENQ),
							 .DEQ(pcieCtrl_sendTLPm_ma_1_mb_outQ_DEQ),
							 .CLR(pcieCtrl_sendTLPm_ma_1_mb_outQ_CLR),
							 .D_OUT(pcieCtrl_sendTLPm_ma_1_mb_outQ_D_OUT),
							 .FULL_N(pcieCtrl_sendTLPm_ma_1_mb_outQ_FULL_N),
							 .EMPTY_N(pcieCtrl_sendTLPm_ma_1_mb_outQ_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_mb_inQ1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_mb_inQ1(.RST(pcie_user_reset_n),
						    .CLK(pcie_user_clk),
						    .D_IN(pcieCtrl_sendTLPm_mb_inQ1_D_IN),
						    .ENQ(pcieCtrl_sendTLPm_mb_inQ1_ENQ),
						    .DEQ(pcieCtrl_sendTLPm_mb_inQ1_DEQ),
						    .CLR(pcieCtrl_sendTLPm_mb_inQ1_CLR),
						    .D_OUT(pcieCtrl_sendTLPm_mb_inQ1_D_OUT),
						    .FULL_N(pcieCtrl_sendTLPm_mb_inQ1_FULL_N),
						    .EMPTY_N(pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_mb_inQ2
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_mb_inQ2(.RST(pcie_user_reset_n),
						    .CLK(pcie_user_clk),
						    .D_IN(pcieCtrl_sendTLPm_mb_inQ2_D_IN),
						    .ENQ(pcieCtrl_sendTLPm_mb_inQ2_ENQ),
						    .DEQ(pcieCtrl_sendTLPm_mb_inQ2_DEQ),
						    .CLR(pcieCtrl_sendTLPm_mb_inQ2_CLR),
						    .D_OUT(pcieCtrl_sendTLPm_mb_inQ2_D_OUT),
						    .FULL_N(pcieCtrl_sendTLPm_mb_inQ2_FULL_N),
						    .EMPTY_N(pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N));

  // submodule pcieCtrl_sendTLPm_mb_outQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_sendTLPm_mb_outQ(.RST(pcie_user_reset_n),
						    .CLK(pcie_user_clk),
						    .D_IN(pcieCtrl_sendTLPm_mb_outQ_D_IN),
						    .ENQ(pcieCtrl_sendTLPm_mb_outQ_ENQ),
						    .DEQ(pcieCtrl_sendTLPm_mb_outQ_DEQ),
						    .CLR(pcieCtrl_sendTLPm_mb_outQ_CLR),
						    .D_OUT(pcieCtrl_sendTLPm_mb_outQ_D_OUT),
						    .FULL_N(pcieCtrl_sendTLPm_mb_outQ_FULL_N),
						    .EMPTY_N(pcieCtrl_sendTLPm_mb_outQ_EMPTY_N));

  // submodule pcieCtrl_tagMapReadAQ
  FIFO2 #(.width(32'd20),
	  .guarded(1'd1)) pcieCtrl_tagMapReadAQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_tagMapReadAQ_D_IN),
						.ENQ(pcieCtrl_tagMapReadAQ_ENQ),
						.DEQ(pcieCtrl_tagMapReadAQ_DEQ),
						.CLR(pcieCtrl_tagMapReadAQ_CLR),
						.D_OUT(pcieCtrl_tagMapReadAQ_D_OUT),
						.FULL_N(pcieCtrl_tagMapReadAQ_FULL_N),
						.EMPTY_N(pcieCtrl_tagMapReadAQ_EMPTY_N));

  // submodule pcieCtrl_tagMap_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd20),
	  .MEMSIZE(9'd256)) pcieCtrl_tagMap_memory(.CLKA(pcie_user_clk),
						   .CLKB(pcie_user_clk),
						   .ADDRA(pcieCtrl_tagMap_memory_ADDRA),
						   .ADDRB(pcieCtrl_tagMap_memory_ADDRB),
						   .DIA(pcieCtrl_tagMap_memory_DIA),
						   .DIB(pcieCtrl_tagMap_memory_DIB),
						   .WEA(pcieCtrl_tagMap_memory_WEA),
						   .WEB(pcieCtrl_tagMap_memory_WEB),
						   .ENA(pcieCtrl_tagMap_memory_ENA),
						   .ENB(pcieCtrl_tagMap_memory_ENB),
						   .DOA(pcieCtrl_tagMap_memory_DOA),
						   .DOB(pcieCtrl_tagMap_memory_DOB));

  // submodule pcieCtrl_tagMap_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd20),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_tagMap_serverAdapterA_outDataCore(.RST(pcie_user_reset_n),
									 .CLK(pcie_user_clk),
									 .D_IN(pcieCtrl_tagMap_serverAdapterA_outDataCore_D_IN),
									 .ENQ(pcieCtrl_tagMap_serverAdapterA_outDataCore_ENQ),
									 .DEQ(pcieCtrl_tagMap_serverAdapterA_outDataCore_DEQ),
									 .CLR(pcieCtrl_tagMap_serverAdapterA_outDataCore_CLR),
									 .D_OUT(),
									 .FULL_N(pcieCtrl_tagMap_serverAdapterA_outDataCore_FULL_N),
									 .EMPTY_N());

  // submodule pcieCtrl_tagMap_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd20),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pcieCtrl_tagMap_serverAdapterB_outDataCore(.RST(pcie_user_reset_n),
									 .CLK(pcie_user_clk),
									 .D_IN(pcieCtrl_tagMap_serverAdapterB_outDataCore_D_IN),
									 .ENQ(pcieCtrl_tagMap_serverAdapterB_outDataCore_ENQ),
									 .DEQ(pcieCtrl_tagMap_serverAdapterB_outDataCore_DEQ),
									 .CLR(pcieCtrl_tagMap_serverAdapterB_outDataCore_CLR),
									 .D_OUT(pcieCtrl_tagMap_serverAdapterB_outDataCore_D_OUT),
									 .FULL_N(pcieCtrl_tagMap_serverAdapterB_outDataCore_FULL_N),
									 .EMPTY_N(pcieCtrl_tagMap_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pcieCtrl_tlp2Q
  FIFO2 #(.width(32'd128),
	  .guarded(1'd1)) pcieCtrl_tlp2Q(.RST(pcie_user_reset_n),
					 .CLK(pcie_user_clk),
					 .D_IN(pcieCtrl_tlp2Q_D_IN),
					 .ENQ(pcieCtrl_tlp2Q_ENQ),
					 .DEQ(pcieCtrl_tlp2Q_DEQ),
					 .CLR(pcieCtrl_tlp2Q_CLR),
					 .D_OUT(pcieCtrl_tlp2Q_D_OUT),
					 .FULL_N(pcieCtrl_tlp2Q_FULL_N),
					 .EMPTY_N(pcieCtrl_tlp2Q_EMPTY_N));

  // submodule pcieCtrl_tlp3Q
  FIFO2 #(.width(32'd128),
	  .guarded(1'd1)) pcieCtrl_tlp3Q(.RST(pcie_user_reset_n),
					 .CLK(pcie_user_clk),
					 .D_IN(pcieCtrl_tlp3Q_D_IN),
					 .ENQ(pcieCtrl_tlp3Q_ENQ),
					 .DEQ(pcieCtrl_tlp3Q_DEQ),
					 .CLR(pcieCtrl_tlp3Q_CLR),
					 .D_OUT(pcieCtrl_tlp3Q_D_OUT),
					 .FULL_N(pcieCtrl_tlp3Q_FULL_N),
					 .EMPTY_N(pcieCtrl_tlp3Q_EMPTY_N));

  // submodule pcieCtrl_tlpKeepQ
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) pcieCtrl_tlpKeepQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_tlpKeepQ_D_IN),
						.ENQ(pcieCtrl_tlpKeepQ_ENQ),
						.DEQ(pcieCtrl_tlpKeepQ_DEQ),
						.CLR(pcieCtrl_tlpKeepQ_CLR),
						.D_OUT(),
						.FULL_N(pcieCtrl_tlpKeepQ_FULL_N),
						.EMPTY_N(pcieCtrl_tlpKeepQ_EMPTY_N));

  // submodule pcieCtrl_tlpQ
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) pcieCtrl_tlpQ(.RST(pcie_user_reset_n),
					    .CLK(pcie_user_clk),
					    .D_IN(pcieCtrl_tlpQ_D_IN),
					    .ENQ(pcieCtrl_tlpQ_ENQ),
					    .DEQ(pcieCtrl_tlpQ_DEQ),
					    .CLR(pcieCtrl_tlpQ_CLR),
					    .D_OUT(pcieCtrl_tlpQ_D_OUT),
					    .FULL_N(pcieCtrl_tlpQ_FULL_N),
					    .EMPTY_N(pcieCtrl_tlpQ_EMPTY_N));

  // submodule pcieCtrl_userReadQ0
  FIFO2 #(.width(32'd51),
	  .guarded(1'd1)) pcieCtrl_userReadQ0(.RST(pcie_user_reset_n),
					      .CLK(pcie_user_clk),
					      .D_IN(pcieCtrl_userReadQ0_D_IN),
					      .ENQ(pcieCtrl_userReadQ0_ENQ),
					      .DEQ(pcieCtrl_userReadQ0_DEQ),
					      .CLR(pcieCtrl_userReadQ0_CLR),
					      .D_OUT(pcieCtrl_userReadQ0_D_OUT),
					      .FULL_N(pcieCtrl_userReadQ0_FULL_N),
					      .EMPTY_N(pcieCtrl_userReadQ0_EMPTY_N));

  // submodule pcieCtrl_userReadQ1_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd51),
	  .MEMSIZE(11'd1024)) pcieCtrl_userReadQ1_memory(.CLKA(pcie_user_clk),
							 .CLKB(pcie_user_clk),
							 .ADDRA(pcieCtrl_userReadQ1_memory_ADDRA),
							 .ADDRB(pcieCtrl_userReadQ1_memory_ADDRB),
							 .DIA(pcieCtrl_userReadQ1_memory_DIA),
							 .DIB(pcieCtrl_userReadQ1_memory_DIB),
							 .WEA(pcieCtrl_userReadQ1_memory_WEA),
							 .WEB(pcieCtrl_userReadQ1_memory_WEB),
							 .ENA(pcieCtrl_userReadQ1_memory_ENA),
							 .ENB(pcieCtrl_userReadQ1_memory_ENB),
							 .DOA(),
							 .DOB(pcieCtrl_userReadQ1_memory_DOB));

  // submodule pcieCtrl_userReadQ2
  FIFO2 #(.width(32'd51),
	  .guarded(1'd1)) pcieCtrl_userReadQ2(.RST(pcie_user_reset_n),
					      .CLK(pcie_user_clk),
					      .D_IN(pcieCtrl_userReadQ2_D_IN),
					      .ENQ(pcieCtrl_userReadQ2_ENQ),
					      .DEQ(pcieCtrl_userReadQ2_DEQ),
					      .CLR(pcieCtrl_userReadQ2_CLR),
					      .D_OUT(pcieCtrl_userReadQ2_D_OUT),
					      .FULL_N(pcieCtrl_userReadQ2_FULL_N),
					      .EMPTY_N(pcieCtrl_userReadQ2_EMPTY_N));

  // submodule pcieCtrl_userSendTLPQ
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) pcieCtrl_userSendTLPQ(.RST(pcie_user_reset_n),
						.CLK(pcie_user_clk),
						.D_IN(pcieCtrl_userSendTLPQ_D_IN),
						.ENQ(pcieCtrl_userSendTLPQ_ENQ),
						.DEQ(pcieCtrl_userSendTLPQ_DEQ),
						.CLR(pcieCtrl_userSendTLPQ_CLR),
						.D_OUT(pcieCtrl_userSendTLPQ_D_OUT),
						.FULL_N(pcieCtrl_userSendTLPQ_FULL_N),
						.EMPTY_N(pcieCtrl_userSendTLPQ_EMPTY_N));

  // submodule pcieCtrl_userWrite1Q
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) pcieCtrl_userWrite1Q(.RST(pcie_user_reset_n),
					       .CLK(pcie_user_clk),
					       .D_IN(pcieCtrl_userWrite1Q_D_IN),
					       .ENQ(pcieCtrl_userWrite1Q_ENQ),
					       .DEQ(pcieCtrl_userWrite1Q_DEQ),
					       .CLR(pcieCtrl_userWrite1Q_CLR),
					       .D_OUT(pcieCtrl_userWrite1Q_D_OUT),
					       .FULL_N(pcieCtrl_userWrite1Q_FULL_N),
					       .EMPTY_N(pcieCtrl_userWrite1Q_EMPTY_N));

  // submodule pcieCtrl_userWrite2Q
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) pcieCtrl_userWrite2Q(.RST(pcie_user_reset_n),
					       .CLK(pcie_user_clk),
					       .D_IN(pcieCtrl_userWrite2Q_D_IN),
					       .ENQ(pcieCtrl_userWrite2Q_ENQ),
					       .DEQ(pcieCtrl_userWrite2Q_DEQ),
					       .CLR(pcieCtrl_userWrite2Q_CLR),
					       .D_OUT(pcieCtrl_userWrite2Q_D_OUT),
					       .FULL_N(pcieCtrl_userWrite2Q_FULL_N),
					       .EMPTY_N(pcieCtrl_userWrite2Q_EMPTY_N));

  // submodule pcieCtrl_userWriteQ_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd52),
	  .MEMSIZE(11'd1024)) pcieCtrl_userWriteQ_memory(.CLKA(pcie_user_clk),
							 .CLKB(pcie_user_clk),
							 .ADDRA(pcieCtrl_userWriteQ_memory_ADDRA),
							 .ADDRB(pcieCtrl_userWriteQ_memory_ADDRB),
							 .DIA(pcieCtrl_userWriteQ_memory_DIA),
							 .DIB(pcieCtrl_userWriteQ_memory_DIB),
							 .WEA(pcieCtrl_userWriteQ_memory_WEA),
							 .WEB(pcieCtrl_userWriteQ_memory_WEB),
							 .ENA(pcieCtrl_userWriteQ_memory_ENA),
							 .ENB(pcieCtrl_userWriteQ_memory_ENB),
							 .DOA(),
							 .DOB(pcieCtrl_userWriteQ_memory_DOB));

  // rule RL_pcieCtrl_insertFreeTag
  assign WILL_FIRE_RL_pcieCtrl_insertFreeTag =
	     NOT_pcieCtrl_freeReadTagQ_rRdPtr_read__00_PLUS_ETC___d446 &&
	     NOT_pcieCtrl_freeWriteTagQ_rRdPtr_read__30_PLU_ETC___d449 &&
	     pcieCtrl_freeTagCnt != 8'd128 ;

  // rule RL_pcieCtrl_updateReadBurst1
  assign WILL_FIRE_RL_pcieCtrl_updateReadBurst1 =
	     pcieCtrl_readBurst2Q_EMPTY_N &&
	     NOT_pcieCtrl_readBurst2Q_first__92_BITS_17_TO__ETC___d548 &&
	     pcieCtrl_freeTagCnt == 8'd128 ;

  // rule RL_pcieCtrl_relayFreeReadTag
  assign WILL_FIRE_RL_pcieCtrl_relayFreeReadTag =
	     NOT_pcieCtrl_freeReadTagQ_rRdPtr_read__00_PLUS_ETC___d446 &&
	     pcieCtrl_freeReadTagFQ_EMPTY_N &&
	     !WILL_FIRE_RL_pcieCtrl_insertFreeTag ;

  // rule RL_pcieCtrl_updateReadBurst2
  assign WILL_FIRE_RL_pcieCtrl_updateReadBurst2 =
	     NOT_pcieCtrl_readCompletionsb_deqoff_58_EQ_pci_ETC___d599 &&
	     pcieCtrl_tagWordsLeft[29:20] == 10'd0 &&
	     pcieCtrl_freeTagCnt == 8'd128 &&
	     !WILL_FIRE_RL_pcieCtrl_updateReadBurst1 ;

  // rule RL_pcieCtrl_compareOrder
  assign WILL_FIRE_RL_pcieCtrl_compareOrder =
	     pcieCtrl_curOrderTag[128] ?
	       x__h24132 == 128'd0 ||
	       pcieCtrl_orderTagBypassQ2_EMPTY_N &&
	       pcieCtrl_doneReorderedTagQ_FULL_N :
	       pcieCtrl_orderShiftedQ_i_notEmpty__77_AND_pcie_ETC___d982 ;

  // rule RL_pcieCtrl_writeReadBuffer
  assign WILL_FIRE_RL_pcieCtrl_writeReadBuffer =
	     pcieCtrl_dmaReadWordRQ_EMPTY_N &&
	     (pcieCtrl_readReorder_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!pcieCtrl_tagWordsLeft_00_BITS_29_TO_20_01_ULE_4___d1010 ||
	      pcieCtrl_tagWordsLeft_00_BITS_39_TO_30_012_PLU_ETC___d1017 ||
	      pcieCtrl_readDoneTagQ_FULL_N) &&
	     pcieCtrl_tagWordsLeft[29:20] != 10'd0 ;

  // rule RL_pcieCtrl_flushReadTag
  assign WILL_FIRE_RL_pcieCtrl_flushReadTag =
	     (pcieCtrl_readFlushTag[9:0] == 10'd0) ?
	       !pcieCtrl_dmaReadOutCntUp_075_MINUS_pcieCtrl_dm_ETC___d1078 ||
	       pcieCtrl_orderedReadDoneTagQ_EMPTY_N &&
	       pcieCtrl_readReorder_serverAdapterB_cnt_21_SLT_3___d1081 &&
	       pcieCtrl_freeReadTagFQ_FULL_N :
	       pcieCtrl_readReorder_serverAdapterB_cnt_21_SLT_3___d1081 ;

  // rule RL_pcieCtrl_recvTLP
  assign WILL_FIRE_RL_pcieCtrl_recvTLP =
	     pcie_m_axis_rx_tvalid && pcieCtrl_tlpQ_FULL_N &&
	     pcieCtrl_tlpKeepQ_FULL_N ;

  // rule RL_pcieCtrl_procCompletionTLP
  assign WILL_FIRE_RL_pcieCtrl_procCompletionTLP =
	     NOT_pcieCtrl_dmaReadWordQ_rRdPtr_read__77_PLUS_ETC___d1527 &&
	     pcieCtrl_tlpQ_EMPTY_N &&
	     pcieCtrl_tlpKeepQ_EMPTY_N &&
	     pcieCtrl_completionRecvLength != 10'd0 ;

  // rule RL_pcieCtrl_procTLP
  assign WILL_FIRE_RL_pcieCtrl_procTLP =
	     pcieCtrl_tlp2Q_i_notEmpty__669_AND_IF_pcieCtrl_ETC___d1694 &&
	     pcieCtrl_completionRecvLength == 10'd0 ;

  // rule RL_pcieCtrl_splitDmaReadReq
  assign WILL_FIRE_RL_pcieCtrl_splitDmaReadReq =
	     pcieCtrl_dmaReadReqQ_EMPTY_N && pcieCtrl_dmaReadWords == 10'd0 ;

  // rule RL_pcieCtrl_splitDmaWriteReq
  assign WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq =
	     pcieCtrl_dmaWriteReqQ_EMPTY_N && pcieCtrl_dmaSendWords == 10'd0 ;

  // rule RL_pcieCtrl_splitDmaWriteReq2
  assign WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 =
	     pcieCtrl_busyWriteTagQ_rRdPtr + 9'd128 !=
	     pcieCtrl_busyWriteTagQ_rWrPtr &&
	     pcieCtrl_bufidxRequestedWriteQ_FULL_N &&
	     pcieCtrl_configBuffer_serverAdapterB_cnt_5_SLT_3___d1813 &&
	     pcieCtrl_freeWriteTagStageQ_EMPTY_N &&
	     pcieCtrl_dmaPageWriteReqQ_FULL_N &&
	     pcieCtrl_dmaSendWords != 10'd0 ;

  // rule RL_pcieCtrl_generateHeaderTLP
  assign WILL_FIRE_RL_pcieCtrl_generateHeaderTLP =
	     pcieCtrl_dmaPageWriteReqQ_EMPTY_N &&
	     pcieCtrl_dmaWriteBufAddrQ_EMPTY_N &&
	     pcieCtrl_dmaWriteWordQ_EMPTY_N &&
	     pcieCtrl_sendTLPQ_FULL_N &&
	     pcieCtrl_dataWordsRemain == 10'd0 &&
	     x__h44459 >= pcieCtrl_dmaPageWriteReqQ_D_OUT[17:8] ;

  // rule RL_pcieCtrl_relayTLPm
  assign WILL_FIRE_RL_pcieCtrl_relayTLPm =
	     pcieCtrl_sendTLPQ_FULL_N && pcieCtrl_sendTLPm_mb_outQ_EMPTY_N &&
	     pcieCtrl_dataWordsRemain == 10'd0 &&
	     !WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ;

  // rule RL_pcieCtrl_relayBufIdxRead
  assign WILL_FIRE_RL_pcieCtrl_relayBufIdxRead =
	     (pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pcieCtrl_configBuffer_serverAdapterB_outData_enqData_whas) &&
	     pcieCtrl_configBuffer_serverAdapterB_outData_outData_whas &&
	     pcieCtrl_bufidxRequestedWriteQ_i_notEmpty__788_ETC___d1793 ;

  // rule RL_pcieCtrl_configBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_outData_enqAndDeq =
	     pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_configBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pcieCtrl_relayBufIdxRead &&
	     pcieCtrl_configBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pcieCtrl_tagMap_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_setFirstEnq =
	     !pcieCtrl_tagMap_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_tagMap_serverAdapterB_outData_enqData_whas ;

  // rule RL_pcieCtrl_tagMap_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_enqAndDeq =
	     pcieCtrl_tagMap_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_tagMap_serverAdapterB_outDataCore_FULL_N &&
	     pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas &&
	     pcieCtrl_tagMap_serverAdapterB_outData_enqData_whas ;

  // rule RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_pcieCtrl_flushReadTag &&
	     (pcieCtrl_dmaReadOutCntUp_075_MINUS_pcieCtrl_dm_ETC___d1078 ||
	      pcieCtrl_readFlushTag[9:0] != 10'd0) ;

  // rule RL_pcieCtrl_readReorder_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_outData_enqAndDeq =
	     pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_readReorder_serverAdapterB_outDataCore_FULL_N &&
	     pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas &&
	     pcieCtrl_readReorder_serverAdapterB_outData_enqData_whas ;

  // rule RL_pcieCtrl_splitDmaReadReq2
  assign CAN_FIRE_RL_pcieCtrl_splitDmaReadReq2 =
	     pcieCtrl_freeReadTagQ_rRdPtr != pcieCtrl_freeReadTagQ_rWrPtr &&
	     pcieCtrl_dmaPageReadReqQ_FULL_N &&
	     (pcieCtrl_tagMap_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     pcieCtrl_bufidxRequestedWriteQ_FULL_N &&
	     pcieCtrl_configBuffer_serverAdapterB_cnt_5_SLT_3___d1813 &&
	     pcieCtrl_dmaReadWords != 10'd0 ;
  assign WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 =
	     CAN_FIRE_RL_pcieCtrl_splitDmaReadReq2 &&
	     !WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;

  // rule RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ||
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;

  // rule RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways =
	     pcieCtrl_doneReorderedTagQ_EMPTY_N &&
	     (pcieCtrl_doneMap_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;

  // rule RL_pcieCtrl_doneMap_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_setFirstEnq =
	     !pcieCtrl_doneMap_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_doneMap_serverAdapterB_outData_enqData_whas ;

  // rule RL_pcieCtrl_doneMap_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_enqAndDeq =
	     pcieCtrl_doneMap_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_doneMap_serverAdapterB_outDataCore_FULL_N &&
	     pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas &&
	     pcieCtrl_doneMap_serverAdapterB_outData_enqData_whas ;

  // rule RL_pcieCtrl_sendTLPm_ma_0_ma_0_mb_merge
  assign WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_0_mb_merge =
	     pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_FULL_N &&
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N :
		  !pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_FULL_N) :
	       (pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N &&
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_FULL_N :
		  !pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_FULL_N) ;

  // rule RL_pcieCtrl_filterStatReadTLP
  assign WILL_FIRE_RL_pcieCtrl_filterStatReadTLP =
	     pcieCtrl_tlpQ_i_notEmpty__528_AND_pcieCtrl_tlp_ETC___d1611 &&
	     pcieCtrl_completionRecvLength == 10'd0 ;

  // rule RL_pcieCtrl_procIOWrite
  assign WILL_FIRE_RL_pcieCtrl_procIOWrite =
	     pcieCtrl_tlp3Q_EMPTY_N &&
	     pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_EQ_ETC___d1757 &&
	     (pcieCtrl_tlp3Q_D_OUT[30:24] != 7'b1000010 ||
	      pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_FULL_N) &&
	     !WILL_FIRE_RL_pcieCtrl_procTLP ;

  // rule RL_pcieCtrl_sendTLPm_ma_0_ma_1_mb_merge
  assign WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_1_mb_merge =
	     pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_FULL_N &&
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N :
		  !pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_FULL_N) :
	       (pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N &&
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_FULL_N :
		  !pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_FULL_N) ;

  // rule RL_pcieCtrl_configBuffer_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterA_outData_enqAndDeq =
	     pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N &&
	     pcieCtrl_configBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas &&
	     pcieCtrl_configBuffer_serverAdapterA_outData_enqData_whas ;

  // rule RL_pcieCtrl_sendTLPm_ma_0_mb_merge
  assign WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_mb_merge =
	     pcieCtrl_sendTLPm_ma_0_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_mb_outQ_FULL_N &&
		  pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N :
		  !pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_0_mb_outQ_FULL_N) :
	       (pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N &&
		  pcieCtrl_sendTLPm_ma_0_mb_outQ_FULL_N :
		  !pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_0_mb_outQ_FULL_N) ;

  // rule RL_pcieCtrl_sendTLPm_ma_1_ma_0_mb_merge
  assign WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_0_mb_merge =
	     pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_FULL_N &&
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N :
		  !pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_FULL_N) :
	       (pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N &&
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_FULL_N :
		  !pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_FULL_N) ;

  // rule RL_pcieCtrl_sendTLPm_ma_1_ma_1_mb_merge
  assign WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_1_mb_merge =
	     pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_FULL_N &&
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N :
		  !pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_FULL_N) :
	       (pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N &&
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_FULL_N :
		  !pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_FULL_N) ;

  // rule RL_pcieCtrl_sendTLPm_ma_1_mb_merge
  assign WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_mb_merge =
	     pcieCtrl_sendTLPm_ma_1_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_mb_outQ_FULL_N &&
		  pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N :
		  !pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_1_mb_outQ_FULL_N) :
	       (pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N &&
		  pcieCtrl_sendTLPm_ma_1_mb_outQ_FULL_N :
		  !pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N ||
		  pcieCtrl_sendTLPm_ma_1_mb_outQ_FULL_N) ;

  // rule RL_pcieCtrl_sendTLPm_mb_merge
  assign WILL_FIRE_RL_pcieCtrl_sendTLPm_mb_merge =
	     pcieCtrl_sendTLPm_mb_prio ?
	       (pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_mb_outQ_FULL_N &&
		  pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N :
		  !pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N ||
		  pcieCtrl_sendTLPm_mb_outQ_FULL_N) :
	       (pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N &&
		  pcieCtrl_sendTLPm_mb_outQ_FULL_N :
		  !pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N ||
		  pcieCtrl_sendTLPm_mb_outQ_FULL_N) ;

  // rule RL_pcieCtrl_generateDataTLP
  assign WILL_FIRE_RL_pcieCtrl_generateDataTLP =
	     pcieCtrl_sendTLPQ_i_notFull__954_AND_IF_pcieCt_ETC___d1998 &&
	     pcieCtrl_dataWordsRemain != 10'd0 &&
	     !WILL_FIRE_RL_pcieCtrl_insertFreeTag ;

  // inputs to muxes for submodule ports
  assign MUX_pcieCtrl_completionRecvLength_write_1__SEL_1 =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP &&
	     (pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1101010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0101010) ;
  assign MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 =
	     WILL_FIRE_RL_pcieCtrl_procTLP &&
	     (pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b0000010 ||
	      pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b0) &&
	     pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1677 ;
  assign MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_2 =
	     WILL_FIRE_RL_pcieCtrl_procIOWrite &&
	     pcieCtrl_tlp3Q_D_OUT[83:66] != 18'd0 &&
	     pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_CO_ETC___d1754 ;
  assign MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__SEL_1 =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP &&
	     (pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1101010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0101010) &&
	     pcieCtrl_tlpQ_first__538_BITS_9_TO_0_602_ULE_1___d1603 ;
  assign MUX_pcieCtrl_dmaWriteBuf_write_1__SEL_1 =
	     WILL_FIRE_RL_pcieCtrl_generateDataTLP &&
	     !pcieCtrl_dataWordsRemain_958_ULE_1___d1991 ;
  assign MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__SEL_1 =
	     WILL_FIRE_RL_pcieCtrl_generateDataTLP &&
	     pcieCtrl_dataWordsRemain_958_ULE_1___d1991 ;
  assign MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pcieCtrl_updateReadBurst1 &&
	     (pcieCtrl_readBurst2Q_D_OUT[17:10] == 8'd0 ||
	      IF_pcieCtrl_readCompletionsb_datav_3_96_EQ_pci_ETC___d582) ;
  assign MUX_pcieCtrl_userReadEmit_write_1__SEL_1 =
	     WILL_FIRE_RL_pcieCtrl_procIOWrite &&
	     pcieCtrl_tlp3Q_D_OUT[83:66] == 18'd0 ;
  assign MUX_pcieCtrl_completionRecvLength_write_1__VAL_1 =
	     pcieCtrl_tlpQ_D_OUT[9:0] - 10'd1 ;
  assign MUX_pcieCtrl_completionRecvLength_write_1__VAL_2 =
	     (pcieCtrl_completionRecvLength < 10'd4) ? 10'd0 : x__h36995 ;
  assign MUX_pcieCtrl_configBuffer_memory_b_put_2__VAL_1 =
	     12'd8 + pcieCtrl_dmaReadStartAddr[23:12] ;
  assign MUX_pcieCtrl_configBuffer_memory_b_put_2__VAL_2 =
	     12'd8 + pcieCtrl_dmaStartAddr[23:12] ;
  assign MUX_pcieCtrl_dataWordsRemain_write_1__VAL_2 =
	     pcieCtrl_dataWordsRemain - 10'd1 ;
  assign MUX_pcieCtrl_dmaReadBuffer_write_1__VAL_1 =
	     { pcieCtrl_tlpQ_D_OUT[103:96],
	       pcieCtrl_tlpQ_D_OUT[111:104],
	       pcieCtrl_tlpQ_D_OUT[119:112],
	       pcieCtrl_tlpQ_D_OUT[127:120] } ;
  assign MUX_pcieCtrl_dmaReadStartAddr_write_1__VAL_1 =
	     { pcieCtrl_dmaReadReqQ_D_OUT[49:22], 4'b0 } ;
  assign MUX_pcieCtrl_dmaReadStartAddr_write_1__VAL_2 =
	     _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1831 ?
	       x__h42018 :
	       x__h41939 ;
  assign MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__VAL_1 =
	     { pcieCtrl_tlpQ_D_OUT, pcieCtrl_tlpQ_D_OUT[79:72] } ;
  assign MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__VAL_2 =
	     { x__h36687, pcieCtrl_completionRecvTag } ;
  assign MUX_pcieCtrl_dmaReadWords_write_1__VAL_2 =
	     _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1831 ?
	       x__h41996 :
	       x__h41761 ;
  assign MUX_pcieCtrl_dmaSendWords_write_1__VAL_2 =
	     _0_CONCAT_pcieCtrl_dmaStartAddr_928_BITS_31_TO__ETC___d1938 ?
	       x__h44237 :
	       x__h44126 ;
  assign MUX_pcieCtrl_dmaStartAddr_write_1__VAL_1 =
	     { pcieCtrl_dmaWriteReqQ_D_OUT[49:22], 4'b0 } ;
  assign MUX_pcieCtrl_dmaStartAddr_write_1__VAL_2 =
	     _0_CONCAT_pcieCtrl_dmaStartAddr_928_BITS_31_TO__ETC___d1938 ?
	       x__h44259 :
	       x__h44203 ;
  assign MUX_pcieCtrl_dmaWriteBuf_write_1__VAL_2 =
	     { 32'd0, pcieCtrl_dmaWriteWordQ_D_OUT[127:32] } ;
  assign MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__VAL_1 =
	     (pcieCtrl_busyWriteTagQ_rCache[17] &&
	      pcieCtrl_busyWriteTagQ_rCache[16:8] ==
	      pcieCtrl_busyWriteTagQ_rRdPtr) ?
	       pcieCtrl_busyWriteTagQ_rCache[7:0] :
	       pcieCtrl_busyWriteTagQ_memory_DOB ;
  assign MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__VAL_2 =
	     pcieCtrl_freeTagCnt + 8'd128 ;
  assign MUX_pcieCtrl_sendTLPQ_enq_1__VAL_1 = { x__h44618, 17'd131070 } ;
  assign MUX_pcieCtrl_sendTLPQ_enq_1__VAL_2 =
	     pcieCtrl_dataWordsRemain_958_ULE_1___d1991 ?
	       { x__h45403, 17'd8191 } :
	       { x__h44872, 17'd131070 } ;
  assign MUX_pcieCtrl_tagMap_memory_b_put_3__VAL_2 =
	     { pcieCtrl_tagMapReadAQ_D_OUT[19:10], x__h14798 } ;
  assign MUX_pcieCtrl_tagWordsLeft_write_1__VAL_1 =
	     { pcieCtrl_burstUpdReqQ_D_OUT[17:10],
	       pcieCtrl_tagMapReadAQ_D_OUT[9:0],
	       x__h14751,
	       10'd0,
	       pcieCtrl_tagMapReadAQ_D_OUT[19:10] } ;
  assign MUX_pcieCtrl_tagWordsLeft_write_1__VAL_2 =
	     { pcieCtrl_tagWordsLeft[47:30],
	       x__h24673,
	       x__h24676,
	       pcieCtrl_tagWordsLeft[9:0] } ;
  assign MUX_pcieCtrl_userReadEmit_write_1__VAL_2 =
	     pcieCtrl_userReadEmit + 32'd1 ;
  assign MUX_pcieCtrl_userWriteEmit_write_1__VAL_2 =
	     pcieCtrl_userWriteEmit + 32'd1 ;

  // inlined wires
  assign pcieCtrl_configBuffer_serverAdapterA_outData_enqData_whas =
	     (!pcieCtrl_configBuffer_serverAdapterA_s1[0] ||
	      pcieCtrl_configBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pcieCtrl_configBuffer_serverAdapterA_s1[1] &&
	     pcieCtrl_configBuffer_serverAdapterA_s1[0] ;
  assign pcieCtrl_configBuffer_serverAdapterA_outData_outData_wget =
	     pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N ?
	       pcieCtrl_configBuffer_serverAdapterA_outDataCore_D_OUT :
	       pcieCtrl_configBuffer_memory_DOA ;
  assign pcieCtrl_configBuffer_serverAdapterA_outData_outData_whas =
	     pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N ||
	     !pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N &&
	     pcieCtrl_configBuffer_serverAdapterA_outData_enqData_whas ;
  assign pcieCtrl_configBuffer_serverAdapterA_cnt_1_whas =
	     (MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 ||
	      MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_2) &&
	     (!pcieCtrl_configBuffer_serverAdapterA_writeWithResp_wget[1] ||
	      pcieCtrl_configBuffer_serverAdapterA_writeWithResp_wget[0]) ;
  assign pcieCtrl_configBuffer_serverAdapterA_writeWithResp_wget =
	     MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign pcieCtrl_configBuffer_serverAdapterA_writeWithResp_whas =
	     MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 ||
	     MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_2 ;
  assign pcieCtrl_configBuffer_serverAdapterA_s1_1_wget =
	     { 1'd1,
	       !pcieCtrl_configBuffer_serverAdapterA_writeWithResp_wget[1] ||
	       pcieCtrl_configBuffer_serverAdapterA_writeWithResp_wget[0] } ;
  assign pcieCtrl_configBuffer_serverAdapterB_outData_enqData_whas =
	     (!pcieCtrl_configBuffer_serverAdapterB_s1[0] ||
	      pcieCtrl_configBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pcieCtrl_configBuffer_serverAdapterB_s1[1] &&
	     pcieCtrl_configBuffer_serverAdapterB_s1[0] ;
  assign pcieCtrl_configBuffer_serverAdapterB_outData_outData_wget =
	     pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N ?
	       pcieCtrl_configBuffer_serverAdapterB_outDataCore_D_OUT :
	       pcieCtrl_configBuffer_memory_DOB ;
  assign pcieCtrl_configBuffer_serverAdapterB_outData_outData_whas =
	     pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	     !pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_configBuffer_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_tagMap_serverAdapterA_outData_enqData_whas =
	     (!pcieCtrl_tagMap_serverAdapterA_s1[0] ||
	      pcieCtrl_tagMap_serverAdapterA_outDataCore_FULL_N) &&
	     pcieCtrl_tagMap_serverAdapterA_s1[1] &&
	     pcieCtrl_tagMap_serverAdapterA_s1[0] ;
  assign pcieCtrl_tagMap_serverAdapterB_outData_enqData_whas =
	     (!pcieCtrl_tagMap_serverAdapterB_s1[0] ||
	      pcieCtrl_tagMap_serverAdapterB_outDataCore_FULL_N) &&
	     pcieCtrl_tagMap_serverAdapterB_s1[1] &&
	     pcieCtrl_tagMap_serverAdapterB_s1[0] ;
  assign pcieCtrl_tagMap_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_setFirstEnq ?
	       pcieCtrl_tagMap_memory_DOB :
	       pcieCtrl_tagMap_serverAdapterB_outDataCore_D_OUT ;
  assign pcieCtrl_tagMap_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_setFirstEnq ||
	     pcieCtrl_tagMap_serverAdapterB_outDataCore_EMPTY_N ;
  assign pcieCtrl_tagMap_serverAdapterB_cnt_1_whas =
	     (MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pcieCtrl_updateReadBurst2) &&
	     (!pcieCtrl_tagMap_serverAdapterB_writeWithResp_wget[1] ||
	      pcieCtrl_tagMap_serverAdapterB_writeWithResp_wget[0]) ;
  assign pcieCtrl_tagMap_serverAdapterB_writeWithResp_wget =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign pcieCtrl_tagMap_serverAdapterB_writeWithResp_whas =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pcieCtrl_updateReadBurst2 ;
  assign pcieCtrl_tagMap_serverAdapterB_s1_1_wget =
	     { 1'd1,
	       !pcieCtrl_tagMap_serverAdapterB_writeWithResp_wget[1] ||
	       pcieCtrl_tagMap_serverAdapterB_writeWithResp_wget[0] } ;
  assign pcieCtrl_readReorder_serverAdapterA_outData_enqData_whas =
	     (!pcieCtrl_readReorder_serverAdapterA_s1[0] ||
	      pcieCtrl_readReorder_serverAdapterA_outDataCore_FULL_N) &&
	     pcieCtrl_readReorder_serverAdapterA_s1[1] &&
	     pcieCtrl_readReorder_serverAdapterA_s1[0] ;
  assign pcieCtrl_readReorder_serverAdapterB_outData_enqData_whas =
	     (!pcieCtrl_readReorder_serverAdapterB_s1[0] ||
	      pcieCtrl_readReorder_serverAdapterB_outDataCore_FULL_N) &&
	     pcieCtrl_readReorder_serverAdapterB_s1[1] &&
	     pcieCtrl_readReorder_serverAdapterB_s1[0] ;
  assign pcieCtrl_readReorder_serverAdapterB_outData_outData_whas =
	     pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N ||
	     !pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_readReorder_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_freeReadTagQ_wDataIn_whas =
	     WILL_FIRE_RL_pcieCtrl_insertFreeTag ||
	     WILL_FIRE_RL_pcieCtrl_relayFreeReadTag ;
  assign pcieCtrl_freeWriteTagQ_wDataIn_whas =
	     WILL_FIRE_RL_pcieCtrl_generateDataTLP &&
	     pcieCtrl_dataWordsRemain_958_ULE_1___d1991 ||
	     WILL_FIRE_RL_pcieCtrl_insertFreeTag ;
  assign pcieCtrl_freeWriteTagQ_wDataOut_wget =
	     (pcieCtrl_freeWriteTagQ_rCache[17] &&
	      pcieCtrl_freeWriteTagQ_rCache[16:8] ==
	      pcieCtrl_freeWriteTagQ_rRdPtr) ?
	       pcieCtrl_freeWriteTagQ_rCache[7:0] :
	       pcieCtrl_freeWriteTagQ_memory_DOB ;
  assign pcieCtrl_dmaReadWordQ_wDataIn_wget =
	     MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__SEL_1 ?
	       MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__VAL_1 :
	       MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__VAL_2 ;
  assign pcieCtrl_dmaReadWordQ_wDataIn_whas =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP &&
	     (pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1101010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0101010) &&
	     pcieCtrl_tlpQ_first__538_BITS_9_TO_0_602_ULE_1___d1603 ||
	     WILL_FIRE_RL_pcieCtrl_procCompletionTLP ;
  assign pcieCtrl_dmaReadWordQ_wDataOut_wget =
	     (pcieCtrl_dmaReadWordQ_rCache[145] &&
	      pcieCtrl_dmaReadWordQ_rCache[144:136] ==
	      pcieCtrl_dmaReadWordQ_rRdPtr) ?
	       pcieCtrl_dmaReadWordQ_rCache[135:0] :
	       pcieCtrl_dmaReadWordQ_memory_DOB ;
  assign pcieCtrl_doneMap_serverAdapterA_outData_enqData_whas =
	     (!pcieCtrl_doneMap_serverAdapterA_s1[0] ||
	      pcieCtrl_doneMap_serverAdapterA_outDataCore_FULL_N) &&
	     pcieCtrl_doneMap_serverAdapterA_s1[1] &&
	     pcieCtrl_doneMap_serverAdapterA_s1[0] ;
  assign pcieCtrl_doneMap_serverAdapterA_writeWithResp_whas =
	     pcieCtrl_readDoneTagQ_EMPTY_N &&
	     (pcieCtrl_doneMap_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     pcieCtrl_doneShifter_stageFifos_6_FULL_N ;
  assign pcieCtrl_doneMap_serverAdapterB_outData_enqData_whas =
	     (!pcieCtrl_doneMap_serverAdapterB_s1[0] ||
	      pcieCtrl_doneMap_serverAdapterB_outDataCore_FULL_N) &&
	     pcieCtrl_doneMap_serverAdapterB_s1[1] &&
	     pcieCtrl_doneMap_serverAdapterB_s1[0] ;
  assign pcieCtrl_doneMap_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_setFirstEnq ?
	       pcieCtrl_doneMap_memory_DOB :
	       pcieCtrl_doneMap_serverAdapterB_outDataCore_D_OUT ;
  assign pcieCtrl_doneMap_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_setFirstEnq ||
	     pcieCtrl_doneMap_serverAdapterB_outDataCore_EMPTY_N ;
  assign pcieCtrl_dmaReadOutQ_wDataOut_wget =
	     (pcieCtrl_dmaReadOutQ_rCache[136] &&
	      pcieCtrl_dmaReadOutQ_rCache[135:128] ==
	      pcieCtrl_dmaReadOutQ_rRdPtr) ?
	       pcieCtrl_dmaReadOutQ_rCache[127:0] :
	       pcieCtrl_dmaReadOutQ_memory_DOB ;
  assign pcieCtrl_userWriteQ_wDataOut_wget =
	     (pcieCtrl_userWriteQ_rCache[63] &&
	      pcieCtrl_userWriteQ_rCache[62:52] ==
	      pcieCtrl_userWriteQ_rRdPtr) ?
	       pcieCtrl_userWriteQ_rCache[51:0] :
	       pcieCtrl_userWriteQ_memory_DOB ;
  assign pcieCtrl_userReadQ1_wDataOut_wget =
	     (pcieCtrl_userReadQ1_rCache[62] &&
	      pcieCtrl_userReadQ1_rCache[61:51] ==
	      pcieCtrl_userReadQ1_rRdPtr) ?
	       pcieCtrl_userReadQ1_rCache[50:0] :
	       pcieCtrl_userReadQ1_memory_DOB ;
  assign pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas =
	     pcieCtrl_ioReadQ_EMPTY_N &&
	     (pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N ||
	      pcieCtrl_configBuffer_serverAdapterA_outData_enqData_whas) &&
	     pcieCtrl_configBuffer_serverAdapterA_outData_outData_whas &&
	     pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_FULL_N ;
  assign pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas =
	     (pcieCtrl_tagMap_serverAdapterB_outDataCore_EMPTY_N ||
	      pcieCtrl_tagMap_serverAdapterB_outData_enqData_whas) &&
	     pcieCtrl_tagMap_serverAdapterB_outData_outData_whas &&
	     pcieCtrl_tagMapReadAQ_FULL_N ;
  assign pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas =
	     pcieCtrl_dmaReadOutQ_rRdPtr + 8'd64 !=
	     pcieCtrl_dmaReadOutQ_rWrPtr &&
	     (pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N ||
	      pcieCtrl_readReorder_serverAdapterB_outData_enqData_whas) &&
	     pcieCtrl_readReorder_serverAdapterB_outData_outData_whas ;
  assign pcieCtrl_freeReadTagQ_pwEnqueue_whas =
	     WILL_FIRE_RL_pcieCtrl_relayFreeReadTag ||
	     WILL_FIRE_RL_pcieCtrl_insertFreeTag ;
  assign pcieCtrl_freeWriteTagQ_pwDequeue_whas =
	     pcieCtrl_freeWriteTagQ_rRdPtr != pcieCtrl_freeWriteTagQ_rWrPtr &&
	     pcieCtrl_freeWriteTagStageQ_FULL_N ;
  assign pcieCtrl_freeWriteTagQ_pwEnqueue_whas =
	     MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__SEL_1 ||
	     WILL_FIRE_RL_pcieCtrl_insertFreeTag ;
  assign pcieCtrl_dmaReadWordQ_pwDequeue_whas =
	     pcieCtrl_dmaReadWordQ_rRdPtr != pcieCtrl_dmaReadWordQ_rWrPtr &&
	     pcieCtrl_dmaReadWordRQ_FULL_N ;
  assign pcieCtrl_dmaReadWordQ_pwEnqueue_whas =
	     MUX_pcieCtrl_dmaReadWordQ_wDataIn_wset_1__SEL_1 ||
	     WILL_FIRE_RL_pcieCtrl_procCompletionTLP ;
  assign pcieCtrl_dmaReadTagOrderQ_pwDequeue_whas =
	     pcieCtrl_dmaReadTagOrderQ_rRdPtr !=
	     pcieCtrl_dmaReadTagOrderQ_rWrPtr &&
	     pcieCtrl_orderShifter_stageFifos_6_FULL_N &&
	     pcieCtrl_orderTagBypassQ1_FULL_N ;
  assign pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas =
	     pcieCtrl_dmaReadTagOrderQ_rRdPtr + 9'd128 !=
	     pcieCtrl_dmaReadTagOrderQ_rWrPtr &&
	     pcieCtrl_dmaPageReadReqQ_EMPTY_N &&
	     pcieCtrl_dmaReadBufAddrQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_FULL_N ;
  assign pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas =
	     (pcieCtrl_doneMap_serverAdapterB_outDataCore_EMPTY_N ||
	      pcieCtrl_doneMap_serverAdapterB_outData_enqData_whas) &&
	     pcieCtrl_doneMap_serverAdapterB_outData_outData_whas &&
	     pcieCtrl_orderedReadDoneTagQ_FULL_N ;
  assign pcieCtrl_dmaReadOutQ_pwDequeue_whas =
	     pcieCtrl_dmaReadOutQ_rRdPtr != pcieCtrl_dmaReadOutQ_rWrPtr &&
	     pcieCtrl_dmaReadOutRQ_FULL_N ;
  assign pcieCtrl_userWriteQ_pwDequeue_whas =
	     pcieCtrl_userWriteQ_rRdPtr != pcieCtrl_userWriteQ_rWrPtr &&
	     pcieCtrl_userWrite2Q_FULL_N ;
  assign pcieCtrl_userWriteQ_pwEnqueue_whas =
	     pcieCtrl_userWriteQ_rRdPtr + 11'd512 !=
	     pcieCtrl_userWriteQ_rWrPtr &&
	     pcieCtrl_userWrite1Q_EMPTY_N ;
  assign pcieCtrl_userReadQ1_pwDequeue_whas =
	     pcieCtrl_userReadQ1_rRdPtr != pcieCtrl_userReadQ1_rWrPtr &&
	     pcieCtrl_userReadQ2_FULL_N ;
  assign pcieCtrl_userReadQ1_pwEnqueue_whas =
	     pcieCtrl_userReadQ1_rRdPtr + 11'd512 !=
	     pcieCtrl_userReadQ1_rWrPtr &&
	     pcieCtrl_userReadQ0_EMPTY_N ;
  assign pcieCtrl_doneShifter_outputFifo_rv_EN_port0__write =
	     pcieCtrl_doneShifter_stageFifos_0_EMPTY_N &&
	     !pcieCtrl_doneShifter_outputFifo_rv[128] ;
  assign pcieCtrl_doneShifter_outputFifo_rv_port0__write_1 =
	     { 1'd1,
	       pcieCtrl_doneShifter_stageFifos_0_D_OUT[0] ?
		 val___1__h18080 :
		 pcieCtrl_doneShifter_stageFifos_0_D_OUT[134:7] } ;
  assign pcieCtrl_doneShifter_outputFifo_rv_port1__read =
	     pcieCtrl_doneShifter_outputFifo_rv_EN_port0__write ?
	       pcieCtrl_doneShifter_outputFifo_rv_port0__write_1 :
	       pcieCtrl_doneShifter_outputFifo_rv ;
  assign pcieCtrl_doneShifter_outputFifo_rv_port2__read =
	     pcieCtrl_doneShifter_outputFifo_rv_port1__read[128] ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       pcieCtrl_doneShifter_outputFifo_rv_port1__read ;
  assign pcieCtrl_orderShifter_outputFifo_rv_EN_port0__write =
	     pcieCtrl_orderShifter_stageFifos_0_EMPTY_N &&
	     !pcieCtrl_orderShifter_outputFifo_rv[128] ;
  assign pcieCtrl_orderShifter_outputFifo_rv_port0__write_1 =
	     { 1'd1,
	       pcieCtrl_orderShifter_stageFifos_0_D_OUT[0] ?
		 val___1__h20331 :
		 pcieCtrl_orderShifter_stageFifos_0_D_OUT[134:7] } ;
  assign pcieCtrl_orderShifter_outputFifo_rv_port1__read =
	     pcieCtrl_orderShifter_outputFifo_rv_EN_port0__write ?
	       pcieCtrl_orderShifter_outputFifo_rv_port0__write_1 :
	       pcieCtrl_orderShifter_outputFifo_rv ;
  assign pcieCtrl_orderShifter_outputFifo_rv_EN_port1__write =
	     pcieCtrl_orderShifter_outputFifo_rv_port1__read[128] &&
	     pcieCtrl_orderShiftedQ_FULL_N ;
  assign pcieCtrl_orderShifter_outputFifo_rv_port2__read =
	     pcieCtrl_orderShifter_outputFifo_rv_EN_port1__write ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       pcieCtrl_orderShifter_outputFifo_rv_port1__read ;

  // register pcieCtrl_busyWriteTagQ_rCache
  assign pcieCtrl_busyWriteTagQ_rCache_D_IN =
	     { 1'd1, pcieCtrl_busyWriteTagQ_rWrPtr, x3__h43494 } ;
  assign pcieCtrl_busyWriteTagQ_rCache_EN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;

  // register pcieCtrl_busyWriteTagQ_rRdPtr
  assign pcieCtrl_busyWriteTagQ_rRdPtr_D_IN = x__h43650 ;
  assign pcieCtrl_busyWriteTagQ_rRdPtr_EN =
	     MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__SEL_1 ;

  // register pcieCtrl_busyWriteTagQ_rWrPtr
  assign pcieCtrl_busyWriteTagQ_rWrPtr_D_IN = x__h43561 ;
  assign pcieCtrl_busyWriteTagQ_rWrPtr_EN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;

  // register pcieCtrl_completionRecvLength
  assign pcieCtrl_completionRecvLength_D_IN =
	     MUX_pcieCtrl_completionRecvLength_write_1__SEL_1 ?
	       MUX_pcieCtrl_completionRecvLength_write_1__VAL_1 :
	       MUX_pcieCtrl_completionRecvLength_write_1__VAL_2 ;
  assign pcieCtrl_completionRecvLength_EN =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP &&
	     (pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1101010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0101010) ||
	     WILL_FIRE_RL_pcieCtrl_procCompletionTLP ;

  // register pcieCtrl_completionRecvTag
  assign pcieCtrl_completionRecvTag_D_IN = pcieCtrl_tlpQ_D_OUT[79:72] ;
  assign pcieCtrl_completionRecvTag_EN =
	     MUX_pcieCtrl_completionRecvLength_write_1__SEL_1 ;

  // register pcieCtrl_configBuffer_serverAdapterA_cnt
  assign pcieCtrl_configBuffer_serverAdapterA_cnt_D_IN =
	     pcieCtrl_configBuffer_serverAdapterA_cnt_6_PLU_ETC___d32 ;
  assign pcieCtrl_configBuffer_serverAdapterA_cnt_EN =
	     pcieCtrl_configBuffer_serverAdapterA_cnt_1_whas ||
	     pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas ;

  // register pcieCtrl_configBuffer_serverAdapterA_s1
  assign pcieCtrl_configBuffer_serverAdapterA_s1_D_IN =
	     { pcieCtrl_configBuffer_serverAdapterA_writeWithResp_whas &&
	       pcieCtrl_configBuffer_serverAdapterA_s1_1_wget[1],
	       pcieCtrl_configBuffer_serverAdapterA_s1_1_wget[0] } ;
  assign pcieCtrl_configBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pcieCtrl_configBuffer_serverAdapterB_cnt
  assign pcieCtrl_configBuffer_serverAdapterB_cnt_D_IN =
	     pcieCtrl_configBuffer_serverAdapterB_cnt_5_PLU_ETC___d91 ;
  assign pcieCtrl_configBuffer_serverAdapterB_cnt_EN =
	     WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways ||
	     WILL_FIRE_RL_pcieCtrl_relayBufIdxRead ;

  // register pcieCtrl_configBuffer_serverAdapterB_s1
  assign pcieCtrl_configBuffer_serverAdapterB_s1_D_IN =
	     { WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign pcieCtrl_configBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pcieCtrl_curOrderTag
  assign pcieCtrl_curOrderTag_D_IN =
	     { !pcieCtrl_curOrderTag[128], pcieCtrl_orderShiftedQ_D_OUT } ;
  assign pcieCtrl_curOrderTag_EN =
	     WILL_FIRE_RL_pcieCtrl_compareOrder &&
	     (pcieCtrl_curOrderTag[128] && x__h24132 != 128'd0 ||
	      !pcieCtrl_curOrderTag[128] && x__h24274 == 128'd0) ;

  // register pcieCtrl_dataWordsRemain
  assign pcieCtrl_dataWordsRemain_D_IN =
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ?
	       pcieCtrl_dmaPageWriteReqQ_D_OUT[17:8] :
	       MUX_pcieCtrl_dataWordsRemain_write_1__VAL_2 ;
  assign pcieCtrl_dataWordsRemain_EN =
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ||
	     WILL_FIRE_RL_pcieCtrl_generateDataTLP ;

  // register pcieCtrl_debugCode
  assign pcieCtrl_debugCode_D_IN = 32'h0 ;
  assign pcieCtrl_debugCode_EN = 1'b0 ;

  // register pcieCtrl_dmaReadBuffer
  assign pcieCtrl_dmaReadBuffer_D_IN =
	     MUX_pcieCtrl_completionRecvLength_write_1__SEL_1 ?
	       MUX_pcieCtrl_dmaReadBuffer_write_1__VAL_1 :
	       MUX_pcieCtrl_dmaReadBuffer_write_1__VAL_1 ;
  assign pcieCtrl_dmaReadBuffer_EN =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP &&
	     (pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1101010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0001010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0101010) ||
	     WILL_FIRE_RL_pcieCtrl_procCompletionTLP ;

  // register pcieCtrl_dmaReadOutCntDn
  assign pcieCtrl_dmaReadOutCntDn_D_IN = pcieCtrl_dmaReadOutCntDn + 8'd1 ;
  assign pcieCtrl_dmaReadOutCntDn_EN = EN_ctrl_user_dmaReadWord ;

  // register pcieCtrl_dmaReadOutCntUp
  assign pcieCtrl_dmaReadOutCntUp_D_IN = pcieCtrl_dmaReadOutCntUp + 8'd1 ;
  assign pcieCtrl_dmaReadOutCntUp_EN =
	     WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways ;

  // register pcieCtrl_dmaReadOutQ_rCache
  assign pcieCtrl_dmaReadOutQ_rCache_D_IN =
	     { 1'd1, pcieCtrl_dmaReadOutQ_rWrPtr, x3__h25488 } ;
  assign pcieCtrl_dmaReadOutQ_rCache_EN =
	     pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas ;

  // register pcieCtrl_dmaReadOutQ_rRdPtr
  assign pcieCtrl_dmaReadOutQ_rRdPtr_D_IN = x__h25644 ;
  assign pcieCtrl_dmaReadOutQ_rRdPtr_EN =
	     pcieCtrl_dmaReadOutQ_pwDequeue_whas ;

  // register pcieCtrl_dmaReadOutQ_rWrPtr
  assign pcieCtrl_dmaReadOutQ_rWrPtr_D_IN = x__h25555 ;
  assign pcieCtrl_dmaReadOutQ_rWrPtr_EN =
	     pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas ;

  // register pcieCtrl_dmaReadStartAddr
  assign pcieCtrl_dmaReadStartAddr_D_IN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq ?
	       MUX_pcieCtrl_dmaReadStartAddr_write_1__VAL_1 :
	       MUX_pcieCtrl_dmaReadStartAddr_write_1__VAL_2 ;
  assign pcieCtrl_dmaReadStartAddr_EN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq ||
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ;

  // register pcieCtrl_dmaReadTag
  assign pcieCtrl_dmaReadTag_D_IN = pcieCtrl_dmaReadReqQ_D_OUT[7:0] ;
  assign pcieCtrl_dmaReadTag_EN = WILL_FIRE_RL_pcieCtrl_splitDmaReadReq ;

  // register pcieCtrl_dmaReadTagOrderQ_rCache
  assign pcieCtrl_dmaReadTagOrderQ_rCache_D_IN =
	     { 1'd1, pcieCtrl_dmaReadTagOrderQ_rWrPtr, x3__h15586 } ;
  assign pcieCtrl_dmaReadTagOrderQ_rCache_EN =
	     pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas ;

  // register pcieCtrl_dmaReadTagOrderQ_rRdPtr
  assign pcieCtrl_dmaReadTagOrderQ_rRdPtr_D_IN = x__h15742 ;
  assign pcieCtrl_dmaReadTagOrderQ_rRdPtr_EN =
	     pcieCtrl_dmaReadTagOrderQ_pwDequeue_whas ;

  // register pcieCtrl_dmaReadTagOrderQ_rWrPtr
  assign pcieCtrl_dmaReadTagOrderQ_rWrPtr_D_IN = x__h15653 ;
  assign pcieCtrl_dmaReadTagOrderQ_rWrPtr_EN =
	     pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas ;

  // register pcieCtrl_dmaReadWordQ_rCache
  assign pcieCtrl_dmaReadWordQ_rCache_D_IN =
	     { 1'd1,
	       pcieCtrl_dmaReadWordQ_rWrPtr,
	       pcieCtrl_dmaReadWordQ_wDataIn_whas ?
		 pcieCtrl_dmaReadWordQ_wDataIn_wget :
		 136'd0 } ;
  assign pcieCtrl_dmaReadWordQ_rCache_EN =
	     pcieCtrl_dmaReadWordQ_pwEnqueue_whas ;

  // register pcieCtrl_dmaReadWordQ_rRdPtr
  assign pcieCtrl_dmaReadWordQ_rRdPtr_D_IN = x__h13181 ;
  assign pcieCtrl_dmaReadWordQ_rRdPtr_EN =
	     pcieCtrl_dmaReadWordQ_pwDequeue_whas ;

  // register pcieCtrl_dmaReadWordQ_rWrPtr
  assign pcieCtrl_dmaReadWordQ_rWrPtr_D_IN = x__h13070 ;
  assign pcieCtrl_dmaReadWordQ_rWrPtr_EN =
	     pcieCtrl_dmaReadWordQ_pwEnqueue_whas ;

  // register pcieCtrl_dmaReadWords
  assign pcieCtrl_dmaReadWords_D_IN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq ?
	       pcieCtrl_dmaReadReqQ_D_OUT[17:8] :
	       MUX_pcieCtrl_dmaReadWords_write_1__VAL_2 ;
  assign pcieCtrl_dmaReadWords_EN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq ||
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ;

  // register pcieCtrl_dmaSendWords
  assign pcieCtrl_dmaSendWords_D_IN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq ?
	       pcieCtrl_dmaWriteReqQ_D_OUT[17:8] :
	       MUX_pcieCtrl_dmaSendWords_write_1__VAL_2 ;
  assign pcieCtrl_dmaSendWords_EN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq ||
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;

  // register pcieCtrl_dmaStartAddr
  assign pcieCtrl_dmaStartAddr_D_IN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq ?
	       MUX_pcieCtrl_dmaStartAddr_write_1__VAL_1 :
	       MUX_pcieCtrl_dmaStartAddr_write_1__VAL_2 ;
  assign pcieCtrl_dmaStartAddr_EN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq ||
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;

  // register pcieCtrl_dmaWriteBuf
  assign pcieCtrl_dmaWriteBuf_D_IN =
	     MUX_pcieCtrl_dmaWriteBuf_write_1__SEL_1 ?
	       MUX_pcieCtrl_dmaWriteBuf_write_1__VAL_2 :
	       MUX_pcieCtrl_dmaWriteBuf_write_1__VAL_2 ;
  assign pcieCtrl_dmaWriteBuf_EN =
	     WILL_FIRE_RL_pcieCtrl_generateDataTLP &&
	     !pcieCtrl_dataWordsRemain_958_ULE_1___d1991 ||
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ;

  // register pcieCtrl_dmaWriteWordIn
  assign pcieCtrl_dmaWriteWordIn_D_IN = pcieCtrl_dmaWriteWordIn + 10'd1 ;
  assign pcieCtrl_dmaWriteWordIn_EN = EN_ctrl_user_dmaWriteData ;

  // register pcieCtrl_dmaWriteWordOut
  assign pcieCtrl_dmaWriteWordOut_D_IN =
	     pcieCtrl_dmaWriteWordOut +
	     pcieCtrl_dmaPageWriteReqQ_D_OUT[17:8] ;
  assign pcieCtrl_dmaWriteWordOut_EN =
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ;

  // register pcieCtrl_doneMap_serverAdapterA_cnt
  assign pcieCtrl_doneMap_serverAdapterA_cnt_D_IN =
	     pcieCtrl_doneMap_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pcieCtrl_doneMap_serverAdapterA_cnt_EN = 1'b0 ;

  // register pcieCtrl_doneMap_serverAdapterA_s1
  assign pcieCtrl_doneMap_serverAdapterA_s1_D_IN =
	     { pcieCtrl_doneMap_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pcieCtrl_doneMap_serverAdapterA_s1_EN = 1'd1 ;

  // register pcieCtrl_doneMap_serverAdapterB_cnt
  assign pcieCtrl_doneMap_serverAdapterB_cnt_D_IN =
	     pcieCtrl_doneMap_serverAdapterB_cnt_96_PLUS_IF_ETC___d902 ;
  assign pcieCtrl_doneMap_serverAdapterB_cnt_EN =
	     WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways ||
	     pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas ;

  // register pcieCtrl_doneMap_serverAdapterB_s1
  assign pcieCtrl_doneMap_serverAdapterB_s1_D_IN =
	     { WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign pcieCtrl_doneMap_serverAdapterB_s1_EN = 1'd1 ;

  // register pcieCtrl_doneShifter_outputFifo_rv
  assign pcieCtrl_doneShifter_outputFifo_rv_D_IN =
	     pcieCtrl_doneShifter_outputFifo_rv_port2__read ;
  assign pcieCtrl_doneShifter_outputFifo_rv_EN = 1'b1 ;

  // register pcieCtrl_doneTagMap
  assign pcieCtrl_doneTagMap_D_IN =
	     pcieCtrl_doneTagMap ^
	     pcieCtrl_doneShifter_outputFifo_rv_port1__read[127:0] ;
  assign pcieCtrl_doneTagMap_EN =
	     pcieCtrl_doneShifter_outputFifo_rv_port1__read[128] ;

  // register pcieCtrl_freeReadTagQ_rCache
  assign pcieCtrl_freeReadTagQ_rCache_D_IN =
	     { 1'd1, pcieCtrl_freeReadTagQ_rWrPtr, x3__h10996 } ;
  assign pcieCtrl_freeReadTagQ_rCache_EN =
	     pcieCtrl_freeReadTagQ_pwEnqueue_whas ;

  // register pcieCtrl_freeReadTagQ_rRdPtr
  assign pcieCtrl_freeReadTagQ_rRdPtr_D_IN = x__h11152 ;
  assign pcieCtrl_freeReadTagQ_rRdPtr_EN =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ;

  // register pcieCtrl_freeReadTagQ_rWrPtr
  assign pcieCtrl_freeReadTagQ_rWrPtr_D_IN = x__h11063 ;
  assign pcieCtrl_freeReadTagQ_rWrPtr_EN =
	     pcieCtrl_freeReadTagQ_pwEnqueue_whas ;

  // register pcieCtrl_freeTagCnt
  assign pcieCtrl_freeTagCnt_D_IN = pcieCtrl_freeTagCnt + 8'd1 ;
  assign pcieCtrl_freeTagCnt_EN = WILL_FIRE_RL_pcieCtrl_insertFreeTag ;

  // register pcieCtrl_freeWriteTagQ_rCache
  assign pcieCtrl_freeWriteTagQ_rCache_D_IN =
	     { 1'd1, pcieCtrl_freeWriteTagQ_rWrPtr, x3__h11887 } ;
  assign pcieCtrl_freeWriteTagQ_rCache_EN =
	     pcieCtrl_freeWriteTagQ_pwEnqueue_whas ;

  // register pcieCtrl_freeWriteTagQ_rRdPtr
  assign pcieCtrl_freeWriteTagQ_rRdPtr_D_IN = x__h12043 ;
  assign pcieCtrl_freeWriteTagQ_rRdPtr_EN =
	     pcieCtrl_freeWriteTagQ_pwDequeue_whas ;

  // register pcieCtrl_freeWriteTagQ_rWrPtr
  assign pcieCtrl_freeWriteTagQ_rWrPtr_D_IN = x__h11954 ;
  assign pcieCtrl_freeWriteTagQ_rWrPtr_EN =
	     pcieCtrl_freeWriteTagQ_pwEnqueue_whas ;

  // register pcieCtrl_keepBuffer
  assign pcieCtrl_keepBuffer_D_IN = { 8'd0, pcie_m_axis_rx_tkeep[15:8] } ;
  assign pcieCtrl_keepBuffer_EN =
	     WILL_FIRE_RL_pcieCtrl_recvTLP &&
	     (pcie_m_axis_rx_tuser[13:10] != 4'b0 ||
	      !pcie_m_axis_rx_tuser[14]) &&
	     (pcie_m_axis_rx_tuser[13:10] == 4'b1000 &&
	      pcie_m_axis_rx_tuser[14] ||
	      pcieCtrl_partOffset[3] && !pcie_m_axis_rx_tuser[21]) ;

  // register pcieCtrl_leddata_0
  assign pcieCtrl_leddata_0_D_IN = 1'b0 ;
  assign pcieCtrl_leddata_0_EN = 1'b0 ;

  // register pcieCtrl_leddata_1
  assign pcieCtrl_leddata_1_D_IN = 1'b0 ;
  assign pcieCtrl_leddata_1_EN = 1'b0 ;

  // register pcieCtrl_leddata_2
  assign pcieCtrl_leddata_2_D_IN = 1'b0 ;
  assign pcieCtrl_leddata_2_EN = 1'b0 ;

  // register pcieCtrl_leddata_3
  assign pcieCtrl_leddata_3_D_IN = 1'b0 ;
  assign pcieCtrl_leddata_3_EN = 1'b0 ;

  // register pcieCtrl_orderShifter_outputFifo_rv
  assign pcieCtrl_orderShifter_outputFifo_rv_D_IN =
	     pcieCtrl_orderShifter_outputFifo_rv_port2__read ;
  assign pcieCtrl_orderShifter_outputFifo_rv_EN = 1'b1 ;

  // register pcieCtrl_orderTagMap
  assign pcieCtrl_orderTagMap_D_IN =
	     pcieCtrl_curOrderTag[128] ? x__h24180 : x__h24299 ;
  assign pcieCtrl_orderTagMap_EN =
	     WILL_FIRE_RL_pcieCtrl_compareOrder &&
	     (pcieCtrl_curOrderTag[128] && x__h24132 != 128'd0 ||
	      !pcieCtrl_curOrderTag[128] && x__h24274 != 128'd0) ;

  // register pcieCtrl_partBuffer
  assign pcieCtrl_partBuffer_D_IN =
	     (pcie_m_axis_rx_tuser[13:10] == 4'b0 &&
	      pcie_m_axis_rx_tuser[14]) ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ((pcie_m_axis_rx_tuser[13:10] == 4'b1000 &&
		 pcie_m_axis_rx_tuser[14]) ?
		  { 65'h10000000000000000, pcie_m_axis_rx_tdata[127:64] } :
		  (pcie_m_axis_rx_tuser[21] ?
		     129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
		     { 65'h10000000000000000,
		       pcie_m_axis_rx_tdata[127:64] })) ;
  assign pcieCtrl_partBuffer_EN =
	     WILL_FIRE_RL_pcieCtrl_recvTLP &&
	     (pcie_m_axis_rx_tuser[13:10] == 4'b0 &&
	      pcie_m_axis_rx_tuser[14] ||
	      pcie_m_axis_rx_tuser[13:10] == 4'b1000 &&
	      pcie_m_axis_rx_tuser[14] ||
	      pcieCtrl_partOffset[3]) ;

  // register pcieCtrl_partOffset
  assign pcieCtrl_partOffset_D_IN =
	     (pcie_m_axis_rx_tuser[13:10] == 4'b0) ? 5'd0 : 5'd8 ;
  assign pcieCtrl_partOffset_EN =
	     WILL_FIRE_RL_pcieCtrl_recvTLP &&
	     (pcie_m_axis_rx_tuser[13:10] == 4'b0 ||
	      pcie_m_axis_rx_tuser[13:10] == 4'b1000) &&
	     pcie_m_axis_rx_tuser[14] ;

  // register pcieCtrl_read32data
  assign pcieCtrl_read32data_D_IN = x3__h40645 ;
  assign pcieCtrl_read32data_EN = WILL_FIRE_RL_pcieCtrl_procIOWrite ;

  // register pcieCtrl_readCompletionsb_datav_0
  assign pcieCtrl_readCompletionsb_datav_0_D_IN =
	     pcieCtrl_readCompletionsb_datav_1_D_IN ;
  assign pcieCtrl_readCompletionsb_datav_0_EN =
	     pcieCtrl_readCompletionsb_enqoff == 2'd0 &&
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;

  // register pcieCtrl_readCompletionsb_datav_1
  assign pcieCtrl_readCompletionsb_datav_1_D_IN =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ?
	       pcieCtrl_readBurst2Q_D_OUT[17:10] :
	       8'd0 ;
  assign pcieCtrl_readCompletionsb_datav_1_EN =
	     pcieCtrl_readCompletionsb_enqoff == 2'd1 &&
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;

  // register pcieCtrl_readCompletionsb_datav_2
  assign pcieCtrl_readCompletionsb_datav_2_D_IN =
	     pcieCtrl_readCompletionsb_datav_1_D_IN ;
  assign pcieCtrl_readCompletionsb_datav_2_EN =
	     pcieCtrl_readCompletionsb_enqoff == 2'd2 &&
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;

  // register pcieCtrl_readCompletionsb_datav_3
  assign pcieCtrl_readCompletionsb_datav_3_D_IN =
	     pcieCtrl_readCompletionsb_datav_1_D_IN ;
  assign pcieCtrl_readCompletionsb_datav_3_EN =
	     pcieCtrl_readCompletionsb_enqoff == 2'd3 &&
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;

  // register pcieCtrl_readCompletionsb_deqoff
  assign pcieCtrl_readCompletionsb_deqoff_D_IN = x__h10088[1:0] ;
  assign pcieCtrl_readCompletionsb_deqoff_EN =
	     WILL_FIRE_RL_pcieCtrl_updateReadBurst2 ;

  // register pcieCtrl_readCompletionsb_enqoff
  assign pcieCtrl_readCompletionsb_enqoff_D_IN = x__h14198[1:0] ;
  assign pcieCtrl_readCompletionsb_enqoff_EN =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;

  // register pcieCtrl_readFlushTag
  assign pcieCtrl_readFlushTag_D_IN =
	     (pcieCtrl_readFlushTag[9:0] == 10'd0) ?
	       { pcieCtrl_orderedReadDoneTagQ_D_OUT, x__h26129 } :
	       { pcieCtrl_readFlushTag[27:10], x__h26007 } ;
  assign pcieCtrl_readFlushTag_EN =
	     WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways ;

  // register pcieCtrl_readReorder_serverAdapterA_cnt
  assign pcieCtrl_readReorder_serverAdapterA_cnt_D_IN =
	     pcieCtrl_readReorder_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pcieCtrl_readReorder_serverAdapterA_cnt_EN = 1'b0 ;

  // register pcieCtrl_readReorder_serverAdapterA_s1
  assign pcieCtrl_readReorder_serverAdapterA_s1_D_IN =
	     { WILL_FIRE_RL_pcieCtrl_writeReadBuffer, 1'b0 } ;
  assign pcieCtrl_readReorder_serverAdapterA_s1_EN = 1'd1 ;

  // register pcieCtrl_readReorder_serverAdapterB_cnt
  assign pcieCtrl_readReorder_serverAdapterB_cnt_D_IN =
	     pcieCtrl_readReorder_serverAdapterB_cnt_21_PLU_ETC___d327 ;
  assign pcieCtrl_readReorder_serverAdapterB_cnt_EN =
	     WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways ||
	     pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas ;

  // register pcieCtrl_readReorder_serverAdapterB_s1
  assign pcieCtrl_readReorder_serverAdapterB_s1_D_IN =
	     { WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign pcieCtrl_readReorder_serverAdapterB_s1_EN = 1'd1 ;

  // register pcieCtrl_rxOffset
  assign pcieCtrl_rxOffset_D_IN = 10'h0 ;
  assign pcieCtrl_rxOffset_EN = 1'b0 ;

  // register pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio_D_IN =
	     !pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio_EN =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_0_mb_merge ;

  // register pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio_D_IN =
	     !pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio_EN =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_1_mb_merge ;

  // register pcieCtrl_sendTLPm_ma_0_mb_prio
  assign pcieCtrl_sendTLPm_ma_0_mb_prio_D_IN =
	     !pcieCtrl_sendTLPm_ma_0_mb_prio ;
  assign pcieCtrl_sendTLPm_ma_0_mb_prio_EN =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_mb_merge ;

  // register pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio_D_IN =
	     !pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio_EN =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_0_mb_merge ;

  // register pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio_D_IN =
	     !pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio_EN =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_1_mb_merge ;

  // register pcieCtrl_sendTLPm_ma_1_mb_prio
  assign pcieCtrl_sendTLPm_ma_1_mb_prio_D_IN =
	     !pcieCtrl_sendTLPm_ma_1_mb_prio ;
  assign pcieCtrl_sendTLPm_ma_1_mb_prio_EN =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_mb_merge ;

  // register pcieCtrl_sendTLPm_mb_prio
  assign pcieCtrl_sendTLPm_mb_prio_D_IN = !pcieCtrl_sendTLPm_mb_prio ;
  assign pcieCtrl_sendTLPm_mb_prio_EN =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_mb_merge ;

  // register pcieCtrl_tagMap_serverAdapterA_cnt
  assign pcieCtrl_tagMap_serverAdapterA_cnt_D_IN =
	     pcieCtrl_tagMap_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pcieCtrl_tagMap_serverAdapterA_cnt_EN = 1'b0 ;

  // register pcieCtrl_tagMap_serverAdapterA_s1
  assign pcieCtrl_tagMap_serverAdapterA_s1_D_IN =
	     { WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2, 1'b0 } ;
  assign pcieCtrl_tagMap_serverAdapterA_s1_EN = 1'd1 ;

  // register pcieCtrl_tagMap_serverAdapterB_cnt
  assign pcieCtrl_tagMap_serverAdapterB_cnt_D_IN =
	     pcieCtrl_tagMap_serverAdapterB_cnt_03_PLUS_IF__ETC___d209 ;
  assign pcieCtrl_tagMap_serverAdapterB_cnt_EN =
	     pcieCtrl_tagMap_serverAdapterB_cnt_1_whas ||
	     pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas ;

  // register pcieCtrl_tagMap_serverAdapterB_s1
  assign pcieCtrl_tagMap_serverAdapterB_s1_D_IN =
	     { pcieCtrl_tagMap_serverAdapterB_writeWithResp_whas &&
	       pcieCtrl_tagMap_serverAdapterB_s1_1_wget[1],
	       pcieCtrl_tagMap_serverAdapterB_s1_1_wget[0] } ;
  assign pcieCtrl_tagMap_serverAdapterB_s1_EN = 1'd1 ;

  // register pcieCtrl_tagWordsLeft
  assign pcieCtrl_tagWordsLeft_D_IN =
	     WILL_FIRE_RL_pcieCtrl_updateReadBurst2 ?
	       MUX_pcieCtrl_tagWordsLeft_write_1__VAL_1 :
	       MUX_pcieCtrl_tagWordsLeft_write_1__VAL_2 ;
  assign pcieCtrl_tagWordsLeft_EN =
	     WILL_FIRE_RL_pcieCtrl_updateReadBurst2 ||
	     WILL_FIRE_RL_pcieCtrl_writeReadBuffer ;

  // register pcieCtrl_tlpCount
  assign pcieCtrl_tlpCount_D_IN = pcieCtrl_tlpCount + 32'd1 ;
  assign pcieCtrl_tlpCount_EN =
	     WILL_FIRE_RL_pcieCtrl_procTLP ||
	     WILL_FIRE_RL_pcieCtrl_procCompletionTLP ;

  // register pcieCtrl_userReadEmit
  assign pcieCtrl_userReadEmit_D_IN =
	     MUX_pcieCtrl_userReadEmit_write_1__SEL_1 ?
	       32'd0 :
	       MUX_pcieCtrl_userReadEmit_write_1__VAL_2 ;
  assign pcieCtrl_userReadEmit_EN =
	     WILL_FIRE_RL_pcieCtrl_procIOWrite &&
	     pcieCtrl_tlp3Q_D_OUT[83:66] == 18'd0 ||
	     EN_ctrl_user_dataReq ;

  // register pcieCtrl_userReadQ1_rCache
  assign pcieCtrl_userReadQ1_rCache_D_IN =
	     { 1'd1,
	       pcieCtrl_userReadQ1_rWrPtr,
	       x__h35689,
	       x__h35585,
	       x__h35595,
	       x__h35605,
	       x__h35616,
	       x__h35626,
	       x__h35637 } ;
  assign pcieCtrl_userReadQ1_rCache_EN = pcieCtrl_userReadQ1_pwEnqueue_whas ;

  // register pcieCtrl_userReadQ1_rRdPtr
  assign pcieCtrl_userReadQ1_rRdPtr_D_IN = x__h35870 ;
  assign pcieCtrl_userReadQ1_rRdPtr_EN = pcieCtrl_userReadQ1_pwDequeue_whas ;

  // register pcieCtrl_userReadQ1_rWrPtr
  assign pcieCtrl_userReadQ1_rWrPtr_D_IN = x__h35713 ;
  assign pcieCtrl_userReadQ1_rWrPtr_EN = pcieCtrl_userReadQ1_pwEnqueue_whas ;

  // register pcieCtrl_userWriteBudget
  assign pcieCtrl_userWriteBudget_D_IN = 16'h0 ;
  assign pcieCtrl_userWriteBudget_EN = 1'b0 ;

  // register pcieCtrl_userWriteEmit
  assign pcieCtrl_userWriteEmit_D_IN =
	     MUX_pcieCtrl_userReadEmit_write_1__SEL_1 ?
	       32'd0 :
	       MUX_pcieCtrl_userWriteEmit_write_1__VAL_2 ;
  assign pcieCtrl_userWriteEmit_EN =
	     WILL_FIRE_RL_pcieCtrl_procIOWrite &&
	     pcieCtrl_tlp3Q_D_OUT[83:66] == 18'd0 ||
	     EN_ctrl_user_dataReceive ;

  // register pcieCtrl_userWriteQ_rCache
  assign pcieCtrl_userWriteQ_rCache_D_IN =
	     { 1'd1,
	       pcieCtrl_userWriteQ_rWrPtr,
	       pcieCtrl_userWriteQ_pwEnqueue_whas ?
		 pcieCtrl_userWrite1Q_D_OUT :
		 52'd0 } ;
  assign pcieCtrl_userWriteQ_rCache_EN = pcieCtrl_userWriteQ_pwEnqueue_whas ;

  // register pcieCtrl_userWriteQ_rRdPtr
  assign pcieCtrl_userWriteQ_rRdPtr_D_IN = x__h34554 ;
  assign pcieCtrl_userWriteQ_rRdPtr_EN = pcieCtrl_userWriteQ_pwDequeue_whas ;

  // register pcieCtrl_userWriteQ_rWrPtr
  assign pcieCtrl_userWriteQ_rWrPtr_D_IN = x__h34443 ;
  assign pcieCtrl_userWriteQ_rWrPtr_EN = pcieCtrl_userWriteQ_pwEnqueue_whas ;

  // submodule pcie
  assign pcie_asser_uptrain_data = 1'd1 ;
  assign pcie_assert_interrupt_data = 1'd1 ;
  assign pcie_pci_exp_rxn = pins_rxn_i ;
  assign pcie_pci_exp_rxp = pins_rxp_i ;
  assign pcie_s_axis_tx_tdata = pcieCtrl_sendTLPQ_D_OUT[144:17] ;
  assign pcie_s_axis_tx_tkeep = pcieCtrl_sendTLPQ_D_OUT[16:1] ;
  assign pcie_s_axis_tx_tlast = pcieCtrl_sendTLPQ_D_OUT[0] ;
  assign pcie_assert_interrupt = EN_ctrl_user_assertInterrupt ;
  assign pcie_assert_uptrain = EN_ctrl_user_assertUptrain ;
  assign pcie_s_axis_tx_tvalid =
	     pcie_s_axis_tx_tready && pcieCtrl_sendTLPQ_EMPTY_N ;
  assign pcie_tx_en_keep =
	     pcie_s_axis_tx_tready && pcieCtrl_sendTLPQ_EMPTY_N ;
  assign pcie_tx_en_last =
	     pcie_s_axis_tx_tready && pcieCtrl_sendTLPQ_EMPTY_N ;
  assign pcie_m_axis_rx_tready = WILL_FIRE_RL_pcieCtrl_recvTLP ;
  assign pcie_rx_en_keep = WILL_FIRE_RL_pcieCtrl_recvTLP ;
  assign pcie_rx_en_last = 1'b0 ;
  assign pcie_rx_en_user = WILL_FIRE_RL_pcieCtrl_recvTLP ;

  // submodule pcieCtrl_bufidxRequestedWriteQ
  assign pcieCtrl_bufidxRequestedWriteQ_D_IN =
	     !WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ;
  assign pcieCtrl_bufidxRequestedWriteQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways ;
  assign pcieCtrl_bufidxRequestedWriteQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_relayBufIdxRead ;
  assign pcieCtrl_bufidxRequestedWriteQ_CLR = 1'b0 ;

  // submodule pcieCtrl_burstUpdReqQ
  assign pcieCtrl_burstUpdReqQ_D_IN = pcieCtrl_readBurst2Q_D_OUT ;
  assign pcieCtrl_burstUpdReqQ_ENQ =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;
  assign pcieCtrl_burstUpdReqQ_DEQ = WILL_FIRE_RL_pcieCtrl_updateReadBurst2 ;
  assign pcieCtrl_burstUpdReqQ_CLR = 1'b0 ;

  // submodule pcieCtrl_busyWriteTagQ_memory
  assign pcieCtrl_busyWriteTagQ_memory_ADDRA =
	     pcieCtrl_busyWriteTagQ_rWrPtr[7:0] ;
  assign pcieCtrl_busyWriteTagQ_memory_ADDRB =
	     MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__SEL_1 ?
	       x__h43650[7:0] :
	       pcieCtrl_busyWriteTagQ_rRdPtr[7:0] ;
  assign pcieCtrl_busyWriteTagQ_memory_DIA = x3__h43494 ;
  assign pcieCtrl_busyWriteTagQ_memory_DIB =
	     8'b10101010 /* unspecified value */  ;
  assign pcieCtrl_busyWriteTagQ_memory_WEA =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;
  assign pcieCtrl_busyWriteTagQ_memory_WEB = 1'd0 ;
  assign pcieCtrl_busyWriteTagQ_memory_ENA = 1'b1 ;
  assign pcieCtrl_busyWriteTagQ_memory_ENB = 1'b1 ;

  // submodule pcieCtrl_configBuffer_memory
  assign pcieCtrl_configBuffer_memory_ADDRA =
	     MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 ?
	       pcieCtrl_tlp2Q_D_OUT[77:66] :
	       pcieCtrl_tlp3Q_D_OUT[77:66] ;
  assign pcieCtrl_configBuffer_memory_ADDRB =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ?
	       MUX_pcieCtrl_configBuffer_memory_b_put_2__VAL_1 :
	       MUX_pcieCtrl_configBuffer_memory_b_put_2__VAL_2 ;
  assign pcieCtrl_configBuffer_memory_DIA =
	     MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       x3__h40645 ;
  assign pcieCtrl_configBuffer_memory_DIB =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       32'hAAAAAAAA /* unspecified value */  ;
  assign pcieCtrl_configBuffer_memory_WEA =
	     !MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 ;
  assign pcieCtrl_configBuffer_memory_WEB = 1'd0 ;
  assign pcieCtrl_configBuffer_memory_ENA =
	     WILL_FIRE_RL_pcieCtrl_procTLP &&
	     (pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b0000010 ||
	      pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b0) &&
	     pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1677 ||
	     WILL_FIRE_RL_pcieCtrl_procIOWrite &&
	     pcieCtrl_tlp3Q_D_OUT[83:66] != 18'd0 &&
	     pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_CO_ETC___d1754 ;
  assign pcieCtrl_configBuffer_memory_ENB =
	     WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways ;

  // submodule pcieCtrl_configBuffer_serverAdapterA_outDataCore
  assign pcieCtrl_configBuffer_serverAdapterA_outDataCore_D_IN =
	     pcieCtrl_configBuffer_memory_DOA ;
  assign pcieCtrl_configBuffer_serverAdapterA_outDataCore_ENQ =
	     WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterA_outData_enqAndDeq ||
	     pcieCtrl_configBuffer_serverAdapterA_outDataCore_FULL_N &&
	     !pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas &&
	     pcieCtrl_configBuffer_serverAdapterA_outData_enqData_whas ;
  assign pcieCtrl_configBuffer_serverAdapterA_outDataCore_DEQ =
	     WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterA_outData_enqAndDeq ||
	     pcieCtrl_configBuffer_serverAdapterA_outDataCore_EMPTY_N &&
	     pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas &&
	     !pcieCtrl_configBuffer_serverAdapterA_outData_enqData_whas ;
  assign pcieCtrl_configBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_configBuffer_serverAdapterB_outDataCore
  assign pcieCtrl_configBuffer_serverAdapterB_outDataCore_D_IN =
	     pcieCtrl_configBuffer_memory_DOB ;
  assign pcieCtrl_configBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_configBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pcieCtrl_relayBufIdxRead &&
	     pcieCtrl_configBuffer_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_configBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_configBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pcieCtrl_relayBufIdxRead &&
	     !pcieCtrl_configBuffer_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_configBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaPageReadReqQ
  assign pcieCtrl_dmaPageReadReqQ_D_IN =
	     { x__h42049,
	       _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1831 ?
		 _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1827[13:4] :
		 _theResult____h41705,
	       x2__h42106 } ;
  assign pcieCtrl_dmaPageReadReqQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ;
  assign pcieCtrl_dmaPageReadReqQ_DEQ =
	     pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas ;
  assign pcieCtrl_dmaPageReadReqQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaPageWriteReqQ
  assign pcieCtrl_dmaPageWriteReqQ_D_IN =
	     { x__h44290,
	       _0_CONCAT_pcieCtrl_dmaStartAddr_928_BITS_31_TO__ETC___d1938 ?
		 x4259_MINUS_pcieCtrl_dmaStartAddr__q4[13:4] :
		 _theResult____h44006,
	       pcieCtrl_freeWriteTagStageQ_D_OUT } ;
  assign pcieCtrl_dmaPageWriteReqQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;
  assign pcieCtrl_dmaPageWriteReqQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ;
  assign pcieCtrl_dmaPageWriteReqQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaReadBufAddrQ
  assign pcieCtrl_dmaReadBufAddrQ_D_IN =
	     pcieCtrl_configBuffer_serverAdapterB_outData_outData_wget ;
  assign pcieCtrl_dmaReadBufAddrQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_relayBufIdxRead &&
	     !pcieCtrl_bufidxRequestedWriteQ_D_OUT ;
  assign pcieCtrl_dmaReadBufAddrQ_DEQ =
	     pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas ;
  assign pcieCtrl_dmaReadBufAddrQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaReadOutQ_memory
  assign pcieCtrl_dmaReadOutQ_memory_ADDRA =
	     pcieCtrl_dmaReadOutQ_rWrPtr[6:0] ;
  assign pcieCtrl_dmaReadOutQ_memory_ADDRB =
	     pcieCtrl_dmaReadOutQ_pwDequeue_whas ?
	       x__h25644[6:0] :
	       pcieCtrl_dmaReadOutQ_rRdPtr[6:0] ;
  assign pcieCtrl_dmaReadOutQ_memory_DIA = x3__h25488 ;
  assign pcieCtrl_dmaReadOutQ_memory_DIB =
	     128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pcieCtrl_dmaReadOutQ_memory_WEA =
	     pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas ;
  assign pcieCtrl_dmaReadOutQ_memory_WEB = 1'd0 ;
  assign pcieCtrl_dmaReadOutQ_memory_ENA = 1'b1 ;
  assign pcieCtrl_dmaReadOutQ_memory_ENB = 1'b1 ;

  // submodule pcieCtrl_dmaReadOutRQ
  assign pcieCtrl_dmaReadOutRQ_D_IN = pcieCtrl_dmaReadOutQ_wDataOut_wget ;
  assign pcieCtrl_dmaReadOutRQ_ENQ = pcieCtrl_dmaReadOutQ_pwDequeue_whas ;
  assign pcieCtrl_dmaReadOutRQ_DEQ = EN_ctrl_user_dmaReadWord ;
  assign pcieCtrl_dmaReadOutRQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaReadReqQ
  assign pcieCtrl_dmaReadReqQ_D_IN =
	     { ctrl_user_dmaReadReq_addr,
	       ctrl_user_dmaReadReq_words,
	       8'hAA } ;
  assign pcieCtrl_dmaReadReqQ_ENQ = EN_ctrl_user_dmaReadReq ;
  assign pcieCtrl_dmaReadReqQ_DEQ = WILL_FIRE_RL_pcieCtrl_splitDmaReadReq ;
  assign pcieCtrl_dmaReadReqQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaReadTagOrderQ_memory
  assign pcieCtrl_dmaReadTagOrderQ_memory_ADDRA =
	     pcieCtrl_dmaReadTagOrderQ_rWrPtr[7:0] ;
  assign pcieCtrl_dmaReadTagOrderQ_memory_ADDRB =
	     pcieCtrl_dmaReadTagOrderQ_pwDequeue_whas ?
	       x__h15742[7:0] :
	       pcieCtrl_dmaReadTagOrderQ_rRdPtr[7:0] ;
  assign pcieCtrl_dmaReadTagOrderQ_memory_DIA = x3__h15586 ;
  assign pcieCtrl_dmaReadTagOrderQ_memory_DIB =
	     8'b10101010 /* unspecified value */  ;
  assign pcieCtrl_dmaReadTagOrderQ_memory_WEA =
	     pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas ;
  assign pcieCtrl_dmaReadTagOrderQ_memory_WEB = 1'd0 ;
  assign pcieCtrl_dmaReadTagOrderQ_memory_ENA = 1'b1 ;
  assign pcieCtrl_dmaReadTagOrderQ_memory_ENB = 1'b1 ;

  // submodule pcieCtrl_dmaReadWordQ_memory
  assign pcieCtrl_dmaReadWordQ_memory_ADDRA =
	     pcieCtrl_dmaReadWordQ_rWrPtr[7:0] ;
  assign pcieCtrl_dmaReadWordQ_memory_ADDRB =
	     pcieCtrl_dmaReadWordQ_pwDequeue_whas ?
	       x__h13181[7:0] :
	       pcieCtrl_dmaReadWordQ_rRdPtr[7:0] ;
  assign pcieCtrl_dmaReadWordQ_memory_DIA =
	     pcieCtrl_dmaReadWordQ_wDataIn_whas ?
	       pcieCtrl_dmaReadWordQ_wDataIn_wget :
	       136'd0 ;
  assign pcieCtrl_dmaReadWordQ_memory_DIB =
	     136'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pcieCtrl_dmaReadWordQ_memory_WEA =
	     pcieCtrl_dmaReadWordQ_pwEnqueue_whas ;
  assign pcieCtrl_dmaReadWordQ_memory_WEB = 1'd0 ;
  assign pcieCtrl_dmaReadWordQ_memory_ENA = 1'b1 ;
  assign pcieCtrl_dmaReadWordQ_memory_ENB = 1'b1 ;

  // submodule pcieCtrl_dmaReadWordRQ
  assign pcieCtrl_dmaReadWordRQ_D_IN = pcieCtrl_dmaReadWordQ_wDataOut_wget ;
  assign pcieCtrl_dmaReadWordRQ_ENQ = pcieCtrl_dmaReadWordQ_pwDequeue_whas ;
  assign pcieCtrl_dmaReadWordRQ_DEQ = WILL_FIRE_RL_pcieCtrl_writeReadBuffer ;
  assign pcieCtrl_dmaReadWordRQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaWriteBufAddrQ
  assign pcieCtrl_dmaWriteBufAddrQ_D_IN =
	     pcieCtrl_configBuffer_serverAdapterB_outData_outData_wget ;
  assign pcieCtrl_dmaWriteBufAddrQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_relayBufIdxRead &&
	     pcieCtrl_bufidxRequestedWriteQ_D_OUT ;
  assign pcieCtrl_dmaWriteBufAddrQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ;
  assign pcieCtrl_dmaWriteBufAddrQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaWriteReqQ
  assign pcieCtrl_dmaWriteReqQ_D_IN =
	     { ctrl_user_dmaWriteReq_addr,
	       ctrl_user_dmaWriteReq_words,
	       8'hAA } ;
  assign pcieCtrl_dmaWriteReqQ_ENQ = EN_ctrl_user_dmaWriteReq ;
  assign pcieCtrl_dmaWriteReqQ_DEQ = WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq ;
  assign pcieCtrl_dmaWriteReqQ_CLR = 1'b0 ;

  // submodule pcieCtrl_dmaWriteWordQ
  assign pcieCtrl_dmaWriteWordQ_D_IN = ctrl_user_dmaWriteData_data ;
  assign pcieCtrl_dmaWriteWordQ_ENQ = EN_ctrl_user_dmaWriteData ;
  assign pcieCtrl_dmaWriteWordQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_generateDataTLP &&
	     !pcieCtrl_dataWordsRemain_958_ULE_1___d1991 ||
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ;
  assign pcieCtrl_dmaWriteWordQ_CLR = 1'b0 ;

  // submodule pcieCtrl_doneMap_memory
  assign pcieCtrl_doneMap_memory_ADDRA = pcieCtrl_readDoneTagQ_D_OUT[17:10] ;
  assign pcieCtrl_doneMap_memory_ADDRB = pcieCtrl_doneReorderedTagQ_D_OUT ;
  assign pcieCtrl_doneMap_memory_DIA = pcieCtrl_readDoneTagQ_D_OUT ;
  assign pcieCtrl_doneMap_memory_DIB =
	     18'b101010101010101010 /* unspecified value */  ;
  assign pcieCtrl_doneMap_memory_WEA = 1'd1 ;
  assign pcieCtrl_doneMap_memory_WEB = 1'd0 ;
  assign pcieCtrl_doneMap_memory_ENA =
	     pcieCtrl_doneMap_serverAdapterA_writeWithResp_whas ;
  assign pcieCtrl_doneMap_memory_ENB =
	     WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways ;

  // submodule pcieCtrl_doneMap_serverAdapterA_outDataCore
  assign pcieCtrl_doneMap_serverAdapterA_outDataCore_D_IN =
	     pcieCtrl_doneMap_memory_DOA ;
  assign pcieCtrl_doneMap_serverAdapterA_outDataCore_ENQ =
	     pcieCtrl_doneMap_serverAdapterA_outDataCore_FULL_N &&
	     pcieCtrl_doneMap_serverAdapterA_outData_enqData_whas ;
  assign pcieCtrl_doneMap_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pcieCtrl_doneMap_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_doneMap_serverAdapterB_outDataCore
  assign pcieCtrl_doneMap_serverAdapterB_outDataCore_D_IN =
	     pcieCtrl_doneMap_memory_DOB ;
  assign pcieCtrl_doneMap_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_doneMap_serverAdapterB_outDataCore_FULL_N &&
	     !pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas &&
	     pcieCtrl_doneMap_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_doneMap_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_doneMap_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas &&
	     !pcieCtrl_doneMap_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_doneMap_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_doneReorderedTagQ
  assign pcieCtrl_doneReorderedTagQ_D_IN = pcieCtrl_orderTagBypassQ2_D_OUT ;
  assign pcieCtrl_doneReorderedTagQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_compareOrder &&
	     (pcieCtrl_curOrderTag[128] && x__h24132 != 128'd0 ||
	      !pcieCtrl_curOrderTag[128] && x__h24274 != 128'd0) ;
  assign pcieCtrl_doneReorderedTagQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways ;
  assign pcieCtrl_doneReorderedTagQ_CLR = 1'b0 ;

  // submodule pcieCtrl_doneShifter_stageFifos_0
  assign pcieCtrl_doneShifter_stageFifos_0_D_IN =
	     { x__h17870, pcieCtrl_doneShifter_stageFifos_1_D_OUT[6:0] } ;
  assign pcieCtrl_doneShifter_stageFifos_0_ENQ =
	     pcieCtrl_doneShifter_stageFifos_1_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_0_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_0_DEQ =
	     pcieCtrl_doneShifter_stageFifos_0_EMPTY_N &&
	     !pcieCtrl_doneShifter_outputFifo_rv[128] ;
  assign pcieCtrl_doneShifter_stageFifos_0_CLR = 1'b0 ;

  // submodule pcieCtrl_doneShifter_stageFifos_1
  assign pcieCtrl_doneShifter_stageFifos_1_D_IN =
	     { x__h17735, pcieCtrl_doneShifter_stageFifos_2_D_OUT[6:0] } ;
  assign pcieCtrl_doneShifter_stageFifos_1_ENQ =
	     pcieCtrl_doneShifter_stageFifos_2_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_1_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_1_DEQ =
	     pcieCtrl_doneShifter_stageFifos_1_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_0_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_1_CLR = 1'b0 ;

  // submodule pcieCtrl_doneShifter_stageFifos_2
  assign pcieCtrl_doneShifter_stageFifos_2_D_IN =
	     { x__h17600, pcieCtrl_doneShifter_stageFifos_3_D_OUT[6:0] } ;
  assign pcieCtrl_doneShifter_stageFifos_2_ENQ =
	     pcieCtrl_doneShifter_stageFifos_3_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_2_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_2_DEQ =
	     pcieCtrl_doneShifter_stageFifos_2_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_1_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_2_CLR = 1'b0 ;

  // submodule pcieCtrl_doneShifter_stageFifos_3
  assign pcieCtrl_doneShifter_stageFifos_3_D_IN =
	     { x__h17465, pcieCtrl_doneShifter_stageFifos_4_D_OUT[6:0] } ;
  assign pcieCtrl_doneShifter_stageFifos_3_ENQ =
	     pcieCtrl_doneShifter_stageFifos_4_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_3_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_3_DEQ =
	     pcieCtrl_doneShifter_stageFifos_3_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_2_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_3_CLR = 1'b0 ;

  // submodule pcieCtrl_doneShifter_stageFifos_4
  assign pcieCtrl_doneShifter_stageFifos_4_D_IN =
	     { x__h17330, pcieCtrl_doneShifter_stageFifos_5_D_OUT[6:0] } ;
  assign pcieCtrl_doneShifter_stageFifos_4_ENQ =
	     pcieCtrl_doneShifter_stageFifos_5_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_4_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_4_DEQ =
	     pcieCtrl_doneShifter_stageFifos_4_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_3_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_4_CLR = 1'b0 ;

  // submodule pcieCtrl_doneShifter_stageFifos_5
  assign pcieCtrl_doneShifter_stageFifos_5_D_IN =
	     { x__h17182, pcieCtrl_doneShifter_stageFifos_6_D_OUT[6:0] } ;
  assign pcieCtrl_doneShifter_stageFifos_5_ENQ =
	     pcieCtrl_doneShifter_stageFifos_6_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_5_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_5_DEQ =
	     pcieCtrl_doneShifter_stageFifos_5_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_4_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_5_CLR = 1'b0 ;

  // submodule pcieCtrl_doneShifter_stageFifos_6
  assign pcieCtrl_doneShifter_stageFifos_6_D_IN =
	     { 128'd1, pcieCtrl_readDoneTagQ_D_OUT[16:10] } ;
  assign pcieCtrl_doneShifter_stageFifos_6_ENQ =
	     pcieCtrl_doneMap_serverAdapterA_writeWithResp_whas ;
  assign pcieCtrl_doneShifter_stageFifos_6_DEQ =
	     pcieCtrl_doneShifter_stageFifos_6_EMPTY_N &&
	     pcieCtrl_doneShifter_stageFifos_5_FULL_N ;
  assign pcieCtrl_doneShifter_stageFifos_6_CLR = 1'b0 ;

  // submodule pcieCtrl_freeReadTagFQ
  assign pcieCtrl_freeReadTagFQ_D_IN =
	     pcieCtrl_orderedReadDoneTagQ_D_OUT[17:10] ;
  assign pcieCtrl_freeReadTagFQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_flushReadTag &&
	     pcieCtrl_readFlushTag[9:0] == 10'd0 &&
	     pcieCtrl_dmaReadOutCntUp_075_MINUS_pcieCtrl_dm_ETC___d1078 ;
  assign pcieCtrl_freeReadTagFQ_DEQ = WILL_FIRE_RL_pcieCtrl_relayFreeReadTag ;
  assign pcieCtrl_freeReadTagFQ_CLR = 1'b0 ;

  // submodule pcieCtrl_freeReadTagQ_memory
  assign pcieCtrl_freeReadTagQ_memory_ADDRA =
	     pcieCtrl_freeReadTagQ_rWrPtr[7:0] ;
  assign pcieCtrl_freeReadTagQ_memory_ADDRB =
	     WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ?
	       x__h11152[7:0] :
	       pcieCtrl_freeReadTagQ_rRdPtr[7:0] ;
  assign pcieCtrl_freeReadTagQ_memory_DIA = x3__h10996 ;
  assign pcieCtrl_freeReadTagQ_memory_DIB =
	     8'b10101010 /* unspecified value */  ;
  assign pcieCtrl_freeReadTagQ_memory_WEA =
	     pcieCtrl_freeReadTagQ_pwEnqueue_whas ;
  assign pcieCtrl_freeReadTagQ_memory_WEB = 1'd0 ;
  assign pcieCtrl_freeReadTagQ_memory_ENA = 1'b1 ;
  assign pcieCtrl_freeReadTagQ_memory_ENB = 1'b1 ;

  // submodule pcieCtrl_freeWriteTagQ_memory
  assign pcieCtrl_freeWriteTagQ_memory_ADDRA =
	     pcieCtrl_freeWriteTagQ_rWrPtr[7:0] ;
  assign pcieCtrl_freeWriteTagQ_memory_ADDRB =
	     pcieCtrl_freeWriteTagQ_pwDequeue_whas ?
	       x__h12043[7:0] :
	       pcieCtrl_freeWriteTagQ_rRdPtr[7:0] ;
  assign pcieCtrl_freeWriteTagQ_memory_DIA = x3__h11887 ;
  assign pcieCtrl_freeWriteTagQ_memory_DIB =
	     8'b10101010 /* unspecified value */  ;
  assign pcieCtrl_freeWriteTagQ_memory_WEA =
	     pcieCtrl_freeWriteTagQ_pwEnqueue_whas ;
  assign pcieCtrl_freeWriteTagQ_memory_WEB = 1'd0 ;
  assign pcieCtrl_freeWriteTagQ_memory_ENA = 1'b1 ;
  assign pcieCtrl_freeWriteTagQ_memory_ENB = 1'b1 ;

  // submodule pcieCtrl_freeWriteTagStageQ
  assign pcieCtrl_freeWriteTagStageQ_D_IN =
	     pcieCtrl_freeWriteTagQ_wDataOut_wget ;
  assign pcieCtrl_freeWriteTagStageQ_ENQ =
	     pcieCtrl_freeWriteTagQ_pwDequeue_whas ;
  assign pcieCtrl_freeWriteTagStageQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ;
  assign pcieCtrl_freeWriteTagStageQ_CLR = 1'b0 ;

  // submodule pcieCtrl_ioReadQ
  assign pcieCtrl_ioReadQ_D_IN =
	     { pcieCtrl_tlp2Q_D_OUT[63:40],
	       x__h39429,
	       pcieCtrl_tlp2Q_D_OUT[22:20],
	       pcieCtrl_tlp2Q_D_OUT[15:12] } ;
  assign pcieCtrl_ioReadQ_ENQ =
	     MUX_pcieCtrl_configBuffer_memory_a_put_1__SEL_1 ;
  assign pcieCtrl_ioReadQ_DEQ =
	     pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas ;
  assign pcieCtrl_ioReadQ_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShiftedQ
  assign pcieCtrl_orderShiftedQ_D_IN =
	     pcieCtrl_orderShifter_outputFifo_rv_port1__read[127:0] ;
  assign pcieCtrl_orderShiftedQ_ENQ =
	     pcieCtrl_orderShifter_outputFifo_rv_port1__read[128] &&
	     pcieCtrl_orderShiftedQ_FULL_N ;
  assign pcieCtrl_orderShiftedQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_compareOrder &&
	     !pcieCtrl_curOrderTag[128] ;
  assign pcieCtrl_orderShiftedQ_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShifter_stageFifos_0
  assign pcieCtrl_orderShifter_stageFifos_0_D_IN =
	     { x__h20121, pcieCtrl_orderShifter_stageFifos_1_D_OUT[6:0] } ;
  assign pcieCtrl_orderShifter_stageFifos_0_ENQ =
	     pcieCtrl_orderShifter_stageFifos_1_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_0_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_0_DEQ =
	     pcieCtrl_orderShifter_stageFifos_0_EMPTY_N &&
	     !pcieCtrl_orderShifter_outputFifo_rv[128] ;
  assign pcieCtrl_orderShifter_stageFifos_0_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShifter_stageFifos_1
  assign pcieCtrl_orderShifter_stageFifos_1_D_IN =
	     { x__h19986, pcieCtrl_orderShifter_stageFifos_2_D_OUT[6:0] } ;
  assign pcieCtrl_orderShifter_stageFifos_1_ENQ =
	     pcieCtrl_orderShifter_stageFifos_2_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_1_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_1_DEQ =
	     pcieCtrl_orderShifter_stageFifos_1_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_0_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_1_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShifter_stageFifos_2
  assign pcieCtrl_orderShifter_stageFifos_2_D_IN =
	     { x__h19851, pcieCtrl_orderShifter_stageFifos_3_D_OUT[6:0] } ;
  assign pcieCtrl_orderShifter_stageFifos_2_ENQ =
	     pcieCtrl_orderShifter_stageFifos_3_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_2_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_2_DEQ =
	     pcieCtrl_orderShifter_stageFifos_2_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_1_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_2_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShifter_stageFifos_3
  assign pcieCtrl_orderShifter_stageFifos_3_D_IN =
	     { x__h19716, pcieCtrl_orderShifter_stageFifos_4_D_OUT[6:0] } ;
  assign pcieCtrl_orderShifter_stageFifos_3_ENQ =
	     pcieCtrl_orderShifter_stageFifos_4_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_3_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_3_DEQ =
	     pcieCtrl_orderShifter_stageFifos_3_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_2_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_3_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShifter_stageFifos_4
  assign pcieCtrl_orderShifter_stageFifos_4_D_IN =
	     { x__h19581, pcieCtrl_orderShifter_stageFifos_5_D_OUT[6:0] } ;
  assign pcieCtrl_orderShifter_stageFifos_4_ENQ =
	     pcieCtrl_orderShifter_stageFifos_5_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_4_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_4_DEQ =
	     pcieCtrl_orderShifter_stageFifos_4_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_3_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_4_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShifter_stageFifos_5
  assign pcieCtrl_orderShifter_stageFifos_5_D_IN =
	     { x__h19444, pcieCtrl_orderShifter_stageFifos_6_D_OUT[6:0] } ;
  assign pcieCtrl_orderShifter_stageFifos_5_ENQ =
	     pcieCtrl_orderShifter_stageFifos_6_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_5_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_5_DEQ =
	     pcieCtrl_orderShifter_stageFifos_5_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_4_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_5_CLR = 1'b0 ;

  // submodule pcieCtrl_orderShifter_stageFifos_6
  assign pcieCtrl_orderShifter_stageFifos_6_D_IN =
	     { 128'd1, tag__h23604[6:0] } ;
  assign pcieCtrl_orderShifter_stageFifos_6_ENQ =
	     pcieCtrl_dmaReadTagOrderQ_pwDequeue_whas ;
  assign pcieCtrl_orderShifter_stageFifos_6_DEQ =
	     pcieCtrl_orderShifter_stageFifos_6_EMPTY_N &&
	     pcieCtrl_orderShifter_stageFifos_5_FULL_N ;
  assign pcieCtrl_orderShifter_stageFifos_6_CLR = 1'b0 ;

  // submodule pcieCtrl_orderTagBypassQ1
  assign pcieCtrl_orderTagBypassQ1_D_IN = tag__h23604 ;
  assign pcieCtrl_orderTagBypassQ1_ENQ =
	     pcieCtrl_dmaReadTagOrderQ_pwDequeue_whas ;
  assign pcieCtrl_orderTagBypassQ1_DEQ =
	     pcieCtrl_orderTagBypassQ1_EMPTY_N &&
	     pcieCtrl_orderTagBypassQ2_FULL_N ;
  assign pcieCtrl_orderTagBypassQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_orderTagBypassQ2
  assign pcieCtrl_orderTagBypassQ2_D_IN = pcieCtrl_orderTagBypassQ1_D_OUT ;
  assign pcieCtrl_orderTagBypassQ2_ENQ =
	     pcieCtrl_orderTagBypassQ1_EMPTY_N &&
	     pcieCtrl_orderTagBypassQ2_FULL_N ;
  assign pcieCtrl_orderTagBypassQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_compareOrder &&
	     (pcieCtrl_curOrderTag[128] && x__h24132 != 128'd0 ||
	      !pcieCtrl_curOrderTag[128] && x__h24274 != 128'd0) ;
  assign pcieCtrl_orderTagBypassQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_orderedReadDoneTagQ
  assign pcieCtrl_orderedReadDoneTagQ_D_IN =
	     pcieCtrl_doneMap_serverAdapterB_outData_outData_wget ;
  assign pcieCtrl_orderedReadDoneTagQ_ENQ =
	     pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas ;
  assign pcieCtrl_orderedReadDoneTagQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_flushReadTag &&
	     pcieCtrl_readFlushTag[9:0] == 10'd0 &&
	     pcieCtrl_dmaReadOutCntUp_075_MINUS_pcieCtrl_dm_ETC___d1078 ;
  assign pcieCtrl_orderedReadDoneTagQ_CLR = 1'b0 ;

  // submodule pcieCtrl_readBurst2Q
  assign pcieCtrl_readBurst2Q_D_IN = pcieCtrl_readBurstQ_D_OUT ;
  assign pcieCtrl_readBurst2Q_ENQ =
	     pcieCtrl_readBurstQ_EMPTY_N && pcieCtrl_readBurst2Q_FULL_N ;
  assign pcieCtrl_readBurst2Q_DEQ =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;
  assign pcieCtrl_readBurst2Q_CLR = 1'b0 ;

  // submodule pcieCtrl_readBurstQ
  assign pcieCtrl_readBurstQ_D_IN =
	     { pcieCtrl_tlpQ_D_OUT[79:72], pcieCtrl_tlpQ_D_OUT[9:0] } ;
  assign pcieCtrl_readBurstQ_ENQ =
	     MUX_pcieCtrl_completionRecvLength_write_1__SEL_1 ;
  assign pcieCtrl_readBurstQ_DEQ =
	     pcieCtrl_readBurstQ_EMPTY_N && pcieCtrl_readBurst2Q_FULL_N ;
  assign pcieCtrl_readBurstQ_CLR = 1'b0 ;

  // submodule pcieCtrl_readDoneTagQ
  assign pcieCtrl_readDoneTagQ_D_IN =
	     { pcieCtrl_tagWordsLeft[47:40], x__h24567 } ;
  assign pcieCtrl_readDoneTagQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_writeReadBuffer &&
	     pcieCtrl_tagWordsLeft_00_BITS_29_TO_20_01_ULE_4___d1010 &&
	     !pcieCtrl_tagWordsLeft_00_BITS_39_TO_30_012_PLU_ETC___d1017 ;
  assign pcieCtrl_readDoneTagQ_DEQ =
	     pcieCtrl_doneMap_serverAdapterA_writeWithResp_whas ;
  assign pcieCtrl_readDoneTagQ_CLR = 1'b0 ;

  // submodule pcieCtrl_readReorder_memory
  assign pcieCtrl_readReorder_memory_ADDRA = x__h24760 | y__h24761 ;
  assign pcieCtrl_readReorder_memory_ADDRB =
	     (pcieCtrl_readFlushTag[9:0] == 10'd0) ? x2__h26059 : x2__h26196 ;
  assign pcieCtrl_readReorder_memory_DIA =
	     pcieCtrl_dmaReadWordRQ_D_OUT[135:8] ;
  assign pcieCtrl_readReorder_memory_DIB =
	     128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pcieCtrl_readReorder_memory_WEA = 1'd1 ;
  assign pcieCtrl_readReorder_memory_WEB = 1'd0 ;
  assign pcieCtrl_readReorder_memory_ENA =
	     WILL_FIRE_RL_pcieCtrl_writeReadBuffer ;
  assign pcieCtrl_readReorder_memory_ENB =
	     WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways ;

  // submodule pcieCtrl_readReorder_serverAdapterA_outDataCore
  assign pcieCtrl_readReorder_serverAdapterA_outDataCore_D_IN =
	     pcieCtrl_readReorder_memory_DOA ;
  assign pcieCtrl_readReorder_serverAdapterA_outDataCore_ENQ =
	     pcieCtrl_readReorder_serverAdapterA_outDataCore_FULL_N &&
	     pcieCtrl_readReorder_serverAdapterA_outData_enqData_whas ;
  assign pcieCtrl_readReorder_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pcieCtrl_readReorder_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_readReorder_serverAdapterB_outDataCore
  assign pcieCtrl_readReorder_serverAdapterB_outDataCore_D_IN =
	     pcieCtrl_readReorder_memory_DOB ;
  assign pcieCtrl_readReorder_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_readReorder_serverAdapterB_outDataCore_FULL_N &&
	     !pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas &&
	     pcieCtrl_readReorder_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_readReorder_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas &&
	     !pcieCtrl_readReorder_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_readReorder_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPQ
  always@(WILL_FIRE_RL_pcieCtrl_generateHeaderTLP or
	  MUX_pcieCtrl_sendTLPQ_enq_1__VAL_1 or
	  WILL_FIRE_RL_pcieCtrl_generateDataTLP or
	  MUX_pcieCtrl_sendTLPQ_enq_1__VAL_2 or
	  WILL_FIRE_RL_pcieCtrl_relayTLPm or pcieCtrl_sendTLPm_mb_outQ_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_pcieCtrl_generateHeaderTLP:
	  pcieCtrl_sendTLPQ_D_IN = MUX_pcieCtrl_sendTLPQ_enq_1__VAL_1;
      WILL_FIRE_RL_pcieCtrl_generateDataTLP:
	  pcieCtrl_sendTLPQ_D_IN = MUX_pcieCtrl_sendTLPQ_enq_1__VAL_2;
      WILL_FIRE_RL_pcieCtrl_relayTLPm:
	  pcieCtrl_sendTLPQ_D_IN = pcieCtrl_sendTLPm_mb_outQ_D_OUT;
      default: pcieCtrl_sendTLPQ_D_IN =
		   145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pcieCtrl_sendTLPQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_generateHeaderTLP ||
	     WILL_FIRE_RL_pcieCtrl_generateDataTLP ||
	     WILL_FIRE_RL_pcieCtrl_relayTLPm ;
  assign pcieCtrl_sendTLPQ_DEQ =
	     pcie_s_axis_tx_tready && pcieCtrl_sendTLPQ_EMPTY_N ;
  assign pcieCtrl_sendTLPQ_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_D_IN =
	     { CASE_pcieCtrl_tlpQD_OUT_BITS_83_TO_66_0_23173_ETC__q11,
	       cdw2__h37096,
	       cdw1__h37095,
	       cdw0__h37094,
	       17'd131071 } ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_ENQ =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP &&
	     (pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0000010 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0) &&
	     (pcieCtrl_tlpQ_D_OUT[83:66] == 18'd0 ||
	      pcieCtrl_tlpQ_D_OUT[83:66] == 18'd1 ||
	      pcieCtrl_tlpQ_D_OUT[83:66] == 18'd4094 ||
	      pcieCtrl_tlpQ_D_OUT[83:66] == 18'd4095) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio &&
	      pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_D_IN = { x__h40871, 17'd8191 } ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_ENQ =
	     WILL_FIRE_RL_pcieCtrl_procIOWrite &&
	     pcieCtrl_tlp3Q_D_OUT[30:24] == 7'b1000010 ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio &&
	      pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_D_IN =
	     pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_D_OUT :
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_D_OUT) :
	       (pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_D_OUT :
		  pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_D_OUT) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N) ||
	      !pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ2_EMPTY_N)) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_DEQ =
	     pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_0_mb_inQ1_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_D_IN =
	     { x__h40151, 17'd131071 } ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_ENQ =
	     pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio &&
	      pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_D_IN = { x__h42423, 17'd8191 } ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_ENQ =
	     pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio &&
	      pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_D_IN =
	     pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_D_OUT :
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_D_OUT) :
	       (pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_D_OUT :
		  pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_D_OUT) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N) ||
	      !pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ1_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_0_ma_1_mb_inQ2_EMPTY_N)) ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_DEQ =
	     pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_0_mb_inQ2_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_mb_inQ1
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ1_D_IN =
	     pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_D_OUT ;
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ1_ENQ =
	     pcieCtrl_sendTLPm_ma_0_ma_0_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_0_mb_inQ1_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ1_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_0_mb_prio &&
	      pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_mb_inQ2
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ2_D_IN =
	     pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_D_OUT ;
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ2_ENQ =
	     pcieCtrl_sendTLPm_ma_0_ma_1_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_0_mb_inQ2_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_mb_prio &&
	      pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_0_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_0_mb_inQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_0_mb_outQ
  assign pcieCtrl_sendTLPm_ma_0_mb_outQ_D_IN =
	     pcieCtrl_sendTLPm_ma_0_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_mb_inQ2_D_OUT :
		  pcieCtrl_sendTLPm_ma_0_mb_inQ1_D_OUT) :
	       (pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_0_mb_inQ1_D_OUT :
		  pcieCtrl_sendTLPm_ma_0_mb_inQ2_D_OUT) ;
  assign pcieCtrl_sendTLPm_ma_0_mb_outQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_0_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N) ||
	      !pcieCtrl_sendTLPm_ma_0_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_0_mb_inQ1_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_0_mb_inQ2_EMPTY_N)) ;
  assign pcieCtrl_sendTLPm_ma_0_mb_outQ_DEQ =
	     pcieCtrl_sendTLPm_ma_0_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_mb_inQ1_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_0_mb_outQ_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_D_IN = 145'h0 ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_ENQ = 1'b0 ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio &&
	      pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_D_IN =
	     pcieCtrl_userSendTLPQ_D_OUT ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_ENQ =
	     pcieCtrl_userSendTLPQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio &&
	      pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_D_IN =
	     pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_D_OUT :
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_D_OUT) :
	       (pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_D_OUT :
		  pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_D_OUT) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_0_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N) ||
	      !pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ1_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_EMPTY_N)) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_DEQ =
	     pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_1_mb_inQ1_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_D_IN = 145'h0 ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_ENQ = 1'b0 ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio &&
	      pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_D_IN = 145'h0 ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_ENQ = 1'b0 ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio &&
	      pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_D_IN =
	     pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_D_OUT :
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_D_OUT) :
	       (pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_D_OUT :
		  pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_D_OUT) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N) ||
	      !pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ1_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_1_ma_1_mb_inQ2_EMPTY_N)) ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_DEQ =
	     pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_1_mb_inQ2_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_mb_inQ1
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ1_D_IN =
	     pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_D_OUT ;
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ1_ENQ =
	     pcieCtrl_sendTLPm_ma_1_ma_0_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_1_mb_inQ1_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ1_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_1_mb_prio &&
	      pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_mb_inQ2
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ2_D_IN =
	     pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_D_OUT ;
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ2_ENQ =
	     pcieCtrl_sendTLPm_ma_1_ma_1_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_1_mb_inQ2_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_mb_prio &&
	      pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N ||
	      !pcieCtrl_sendTLPm_ma_1_mb_prio &&
	      !pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N &&
	      pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_ma_1_mb_inQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_ma_1_mb_outQ
  assign pcieCtrl_sendTLPm_ma_1_mb_outQ_D_IN =
	     pcieCtrl_sendTLPm_ma_1_mb_prio ?
	       (pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_mb_inQ2_D_OUT :
		  pcieCtrl_sendTLPm_ma_1_mb_inQ1_D_OUT) :
	       (pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_ma_1_mb_inQ1_D_OUT :
		  pcieCtrl_sendTLPm_ma_1_mb_inQ2_D_OUT) ;
  assign pcieCtrl_sendTLPm_ma_1_mb_outQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_ma_1_mb_merge &&
	     (pcieCtrl_sendTLPm_ma_1_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N) ||
	      !pcieCtrl_sendTLPm_ma_1_mb_prio &&
	      (pcieCtrl_sendTLPm_ma_1_mb_inQ1_EMPTY_N ||
	       pcieCtrl_sendTLPm_ma_1_mb_inQ2_EMPTY_N)) ;
  assign pcieCtrl_sendTLPm_ma_1_mb_outQ_DEQ =
	     pcieCtrl_sendTLPm_ma_1_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_mb_inQ2_FULL_N ;
  assign pcieCtrl_sendTLPm_ma_1_mb_outQ_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_mb_inQ1
  assign pcieCtrl_sendTLPm_mb_inQ1_D_IN =
	     pcieCtrl_sendTLPm_ma_0_mb_outQ_D_OUT ;
  assign pcieCtrl_sendTLPm_mb_inQ1_ENQ =
	     pcieCtrl_sendTLPm_ma_0_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_mb_inQ1_FULL_N ;
  assign pcieCtrl_sendTLPm_mb_inQ1_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_mb_merge &&
	     (pcieCtrl_sendTLPm_mb_prio &&
	      !pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N &&
	      pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N ||
	      !pcieCtrl_sendTLPm_mb_prio &&
	      pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_mb_inQ1_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_mb_inQ2
  assign pcieCtrl_sendTLPm_mb_inQ2_D_IN =
	     pcieCtrl_sendTLPm_ma_1_mb_outQ_D_OUT ;
  assign pcieCtrl_sendTLPm_mb_inQ2_ENQ =
	     pcieCtrl_sendTLPm_ma_1_mb_outQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_mb_inQ2_FULL_N ;
  assign pcieCtrl_sendTLPm_mb_inQ2_DEQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_mb_merge &&
	     (pcieCtrl_sendTLPm_mb_prio &&
	      pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N ||
	      !pcieCtrl_sendTLPm_mb_prio &&
	      !pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N &&
	      pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N) ;
  assign pcieCtrl_sendTLPm_mb_inQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_sendTLPm_mb_outQ
  assign pcieCtrl_sendTLPm_mb_outQ_D_IN =
	     pcieCtrl_sendTLPm_mb_prio ?
	       (pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N ?
		  pcieCtrl_sendTLPm_mb_inQ2_D_OUT :
		  pcieCtrl_sendTLPm_mb_inQ1_D_OUT) :
	       (pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N ?
		  pcieCtrl_sendTLPm_mb_inQ1_D_OUT :
		  pcieCtrl_sendTLPm_mb_inQ2_D_OUT) ;
  assign pcieCtrl_sendTLPm_mb_outQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_sendTLPm_mb_merge &&
	     (pcieCtrl_sendTLPm_mb_prio &&
	      (pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N ||
	       pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N) ||
	      !pcieCtrl_sendTLPm_mb_prio &&
	      (pcieCtrl_sendTLPm_mb_inQ1_EMPTY_N ||
	       pcieCtrl_sendTLPm_mb_inQ2_EMPTY_N)) ;
  assign pcieCtrl_sendTLPm_mb_outQ_DEQ = WILL_FIRE_RL_pcieCtrl_relayTLPm ;
  assign pcieCtrl_sendTLPm_mb_outQ_CLR = 1'b0 ;

  // submodule pcieCtrl_tagMapReadAQ
  assign pcieCtrl_tagMapReadAQ_D_IN =
	     pcieCtrl_tagMap_serverAdapterB_outData_outData_wget ;
  assign pcieCtrl_tagMapReadAQ_ENQ =
	     pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas ;
  assign pcieCtrl_tagMapReadAQ_DEQ = WILL_FIRE_RL_pcieCtrl_updateReadBurst2 ;
  assign pcieCtrl_tagMapReadAQ_CLR = 1'b0 ;

  // submodule pcieCtrl_tagMap_memory
  assign pcieCtrl_tagMap_memory_ADDRA = x2__h42106 ;
  assign pcieCtrl_tagMap_memory_ADDRB =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ?
	       pcieCtrl_readBurst2Q_D_OUT[17:10] :
	       pcieCtrl_burstUpdReqQ_D_OUT[17:10] ;
  assign pcieCtrl_tagMap_memory_DIA =
	     { _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1831 ?
		 _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1827[11:4] :
		 _theResult____h41705[7:0],
	       12'd0 } ;
  assign pcieCtrl_tagMap_memory_DIB =
	     MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ?
	       20'b10101010101010101010 /* unspecified value */  :
	       MUX_pcieCtrl_tagMap_memory_b_put_3__VAL_2 ;
  assign pcieCtrl_tagMap_memory_WEA = 1'd1 ;
  assign pcieCtrl_tagMap_memory_WEB =
	     !MUX_pcieCtrl_tagMap_memory_b_put_1__SEL_1 ;
  assign pcieCtrl_tagMap_memory_ENA = WILL_FIRE_RL_pcieCtrl_splitDmaReadReq2 ;
  assign pcieCtrl_tagMap_memory_ENB =
	     WILL_FIRE_RL_pcieCtrl_updateReadBurst1 &&
	     (pcieCtrl_readBurst2Q_D_OUT[17:10] == 8'd0 ||
	      IF_pcieCtrl_readCompletionsb_datav_3_96_EQ_pci_ETC___d582) ||
	     WILL_FIRE_RL_pcieCtrl_updateReadBurst2 ;

  // submodule pcieCtrl_tagMap_serverAdapterA_outDataCore
  assign pcieCtrl_tagMap_serverAdapterA_outDataCore_D_IN =
	     pcieCtrl_tagMap_memory_DOA ;
  assign pcieCtrl_tagMap_serverAdapterA_outDataCore_ENQ =
	     pcieCtrl_tagMap_serverAdapterA_outDataCore_FULL_N &&
	     pcieCtrl_tagMap_serverAdapterA_outData_enqData_whas ;
  assign pcieCtrl_tagMap_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pcieCtrl_tagMap_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_tagMap_serverAdapterB_outDataCore
  assign pcieCtrl_tagMap_serverAdapterB_outDataCore_D_IN =
	     pcieCtrl_tagMap_memory_DOB ;
  assign pcieCtrl_tagMap_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_tagMap_serverAdapterB_outDataCore_FULL_N &&
	     !pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas &&
	     pcieCtrl_tagMap_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_tagMap_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pcieCtrl_tagMap_serverAdapterB_outData_enqAndDeq ||
	     pcieCtrl_tagMap_serverAdapterB_outDataCore_EMPTY_N &&
	     pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas &&
	     !pcieCtrl_tagMap_serverAdapterB_outData_enqData_whas ;
  assign pcieCtrl_tagMap_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pcieCtrl_tlp2Q
  assign pcieCtrl_tlp2Q_D_IN = pcieCtrl_tlpQ_D_OUT ;
  assign pcieCtrl_tlp2Q_ENQ =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP &&
	     ((pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0000010 ||
	       pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0) &&
	      pcieCtrl_tlpQ_D_OUT[83:66] != 18'd0 &&
	      pcieCtrl_tlpQ_D_OUT[83:66] != 18'd1 &&
	      pcieCtrl_tlpQ_D_OUT[83:66] != 18'd4094 &&
	      pcieCtrl_tlpQ_D_OUT[83:66] != 18'd4095 ||
	      pcieCtrl_tlpQ_D_OUT[30:24] != 7'b0000010 &&
	      pcieCtrl_tlpQ_D_OUT[30:24] != 7'b0 &&
	      pcieCtrl_tlpQ_D_OUT[30:24] != 7'b1001010 &&
	      pcieCtrl_tlpQ_D_OUT[30:24] != 7'b1101010 &&
	      pcieCtrl_tlpQ_D_OUT[30:24] != 7'b0001010 &&
	      pcieCtrl_tlpQ_D_OUT[30:24] != 7'b0101010) ;
  assign pcieCtrl_tlp2Q_DEQ = WILL_FIRE_RL_pcieCtrl_procTLP ;
  assign pcieCtrl_tlp2Q_CLR = 1'b0 ;

  // submodule pcieCtrl_tlp3Q
  assign pcieCtrl_tlp3Q_D_IN = pcieCtrl_tlp2Q_D_OUT ;
  assign pcieCtrl_tlp3Q_ENQ =
	     WILL_FIRE_RL_pcieCtrl_procTLP &&
	     (pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b1000010 ||
	      pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b1000000) ;
  assign pcieCtrl_tlp3Q_DEQ = WILL_FIRE_RL_pcieCtrl_procIOWrite ;
  assign pcieCtrl_tlp3Q_CLR = 1'b0 ;

  // submodule pcieCtrl_tlpKeepQ
  assign pcieCtrl_tlpKeepQ_D_IN =
	     (pcie_m_axis_rx_tuser[13:10] == 4'b0 &&
	      pcie_m_axis_rx_tuser[14]) ?
	       pcie_m_axis_rx_tkeep :
	       IF_pcie_user_receiveUser_138_BITS_13_TO_10_139_ETC___d1177 ;
  assign pcieCtrl_tlpKeepQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_recvTLP &&
	     (pcieCtrl_partBuffer[128] ||
	      pcie_m_axis_rx_tuser[13:10] != 4'b1000 ||
	      !pcie_m_axis_rx_tuser[14]) ;
  assign pcieCtrl_tlpKeepQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP ||
	     WILL_FIRE_RL_pcieCtrl_procCompletionTLP ;
  assign pcieCtrl_tlpKeepQ_CLR = 1'b0 ;

  // submodule pcieCtrl_tlpQ
  assign pcieCtrl_tlpQ_D_IN =
	     (pcie_m_axis_rx_tuser[13:10] == 4'b0 &&
	      pcie_m_axis_rx_tuser[14]) ?
	       pcie_m_axis_rx_tdata :
	       IF_pcie_user_receiveUser_138_BITS_13_TO_10_139_ETC___d1170 ;
  assign pcieCtrl_tlpQ_ENQ =
	     WILL_FIRE_RL_pcieCtrl_recvTLP &&
	     (pcieCtrl_partBuffer[128] ||
	      pcie_m_axis_rx_tuser[13:10] != 4'b1000 ||
	      !pcie_m_axis_rx_tuser[14]) ;
  assign pcieCtrl_tlpQ_DEQ =
	     WILL_FIRE_RL_pcieCtrl_filterStatReadTLP ||
	     WILL_FIRE_RL_pcieCtrl_procCompletionTLP ;
  assign pcieCtrl_tlpQ_CLR = 1'b0 ;

  // submodule pcieCtrl_userReadQ0
  assign pcieCtrl_userReadQ0_D_IN =
	     { pcieCtrl_tlp2Q_D_OUT[63:40],
	       x__h39533,
	       pcieCtrl_tlp2Q_D_OUT[22:20],
	       pcieCtrl_tlp2Q_D_OUT[15:12] } ;
  assign pcieCtrl_userReadQ0_ENQ =
	     WILL_FIRE_RL_pcieCtrl_procTLP &&
	     (pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b0000010 ||
	      pcieCtrl_tlp2Q_D_OUT[30:24] == 7'b0) &&
	     !pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1677 ;
  assign pcieCtrl_userReadQ0_DEQ = pcieCtrl_userReadQ1_pwEnqueue_whas ;
  assign pcieCtrl_userReadQ0_CLR = 1'b0 ;

  // submodule pcieCtrl_userReadQ1_memory
  assign pcieCtrl_userReadQ1_memory_ADDRA = pcieCtrl_userReadQ1_rWrPtr[9:0] ;
  assign pcieCtrl_userReadQ1_memory_ADDRB =
	     pcieCtrl_userReadQ1_pwDequeue_whas ?
	       x__h35870[9:0] :
	       pcieCtrl_userReadQ1_rRdPtr[9:0] ;
  assign pcieCtrl_userReadQ1_memory_DIA =
	     { x__h35689,
	       x__h35585,
	       x__h35595,
	       x__h35605,
	       x__h35616,
	       x__h35626,
	       x__h35637 } ;
  assign pcieCtrl_userReadQ1_memory_DIB =
	     51'h2AAAAAAAAAAAA /* unspecified value */  ;
  assign pcieCtrl_userReadQ1_memory_WEA = pcieCtrl_userReadQ1_pwEnqueue_whas ;
  assign pcieCtrl_userReadQ1_memory_WEB = 1'd0 ;
  assign pcieCtrl_userReadQ1_memory_ENA = 1'b1 ;
  assign pcieCtrl_userReadQ1_memory_ENB = 1'b1 ;

  // submodule pcieCtrl_userReadQ2
  assign pcieCtrl_userReadQ2_D_IN = pcieCtrl_userReadQ1_wDataOut_wget ;
  assign pcieCtrl_userReadQ2_ENQ = pcieCtrl_userReadQ1_pwDequeue_whas ;
  assign pcieCtrl_userReadQ2_DEQ = EN_ctrl_user_dataReq ;
  assign pcieCtrl_userReadQ2_CLR = 1'b0 ;

  // submodule pcieCtrl_userSendTLPQ
  assign pcieCtrl_userSendTLPQ_D_IN = { x__h47109, 17'd131071 } ;
  assign pcieCtrl_userSendTLPQ_ENQ = EN_ctrl_user_dataSend ;
  assign pcieCtrl_userSendTLPQ_DEQ =
	     pcieCtrl_userSendTLPQ_EMPTY_N &&
	     pcieCtrl_sendTLPm_ma_1_ma_0_mb_inQ2_FULL_N ;
  assign pcieCtrl_userSendTLPQ_CLR = 1'b0 ;

  // submodule pcieCtrl_userWrite1Q
  assign pcieCtrl_userWrite1Q_D_IN = { x__h40720, x3__h40645 } ;
  assign pcieCtrl_userWrite1Q_ENQ =
	     WILL_FIRE_RL_pcieCtrl_procIOWrite &&
	     pcieCtrl_tlp3Q_D_OUT[83:66] != 18'd0 &&
	     !pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_CO_ETC___d1754 ;
  assign pcieCtrl_userWrite1Q_DEQ = pcieCtrl_userWriteQ_pwEnqueue_whas ;
  assign pcieCtrl_userWrite1Q_CLR = 1'b0 ;

  // submodule pcieCtrl_userWrite2Q
  assign pcieCtrl_userWrite2Q_D_IN = pcieCtrl_userWriteQ_wDataOut_wget ;
  assign pcieCtrl_userWrite2Q_ENQ = pcieCtrl_userWriteQ_pwDequeue_whas ;
  assign pcieCtrl_userWrite2Q_DEQ = EN_ctrl_user_dataReceive ;
  assign pcieCtrl_userWrite2Q_CLR = 1'b0 ;

  // submodule pcieCtrl_userWriteQ_memory
  assign pcieCtrl_userWriteQ_memory_ADDRA = pcieCtrl_userWriteQ_rWrPtr[9:0] ;
  assign pcieCtrl_userWriteQ_memory_ADDRB =
	     pcieCtrl_userWriteQ_pwDequeue_whas ?
	       x__h34554[9:0] :
	       pcieCtrl_userWriteQ_rRdPtr[9:0] ;
  assign pcieCtrl_userWriteQ_memory_DIA =
	     pcieCtrl_userWriteQ_pwEnqueue_whas ?
	       pcieCtrl_userWrite1Q_D_OUT :
	       52'd0 ;
  assign pcieCtrl_userWriteQ_memory_DIB =
	     52'hAAAAAAAAAAAAA /* unspecified value */  ;
  assign pcieCtrl_userWriteQ_memory_WEA = pcieCtrl_userWriteQ_pwEnqueue_whas ;
  assign pcieCtrl_userWriteQ_memory_WEB = 1'd0 ;
  assign pcieCtrl_userWriteQ_memory_ENA = 1'b1 ;
  assign pcieCtrl_userWriteQ_memory_ENB = 1'b1 ;

  // remaining internal signals
  assign IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d522 =
	     pcieCtrl_readCompletionsb_datav_1_07_EQ_pcieCt_ETC___d508 ?
	       !pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 &&
	       !pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509 &&
	       pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512 ||
	       pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d520 :
	       pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d520 ;
  assign IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d536 =
	     pcieCtrl_readCompletionsb_datav_1_07_EQ_pcieCt_ETC___d508 ?
	       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d535 :
	       pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515 &&
	       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d532 ;
  assign IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d564 =
	     pcieCtrl_readCompletionsb_datav_1_07_EQ_pcieCt_ETC___d508 ?
	       (pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 ||
		pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509 ||
		!pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512) &&
	       NOT_pcieCtrl_readCompletionsb_datav_0_14_EQ_pc_ETC___d562 :
	       NOT_pcieCtrl_readCompletionsb_datav_0_14_EQ_pc_ETC___d562 ;
  assign IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d578 =
	     pcieCtrl_readCompletionsb_datav_1_07_EQ_pcieCt_ETC___d508 ?
	       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d577 :
	       !pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515 ||
	       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d574 ;
  assign IF_pcieCtrl_readCompletionsb_datav_3_96_EQ_pci_ETC___d540 =
	     pcieCtrl_readCompletionsb_datav_3_96_EQ_pcieCt_ETC___d497 ?
	       pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d525 :
	       (pcieCtrl_readCompletionsb_datav_2_99_EQ_pcieCt_ETC___d500 ?
		  pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d538 :
		  IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d536) ;
  assign IF_pcieCtrl_readCompletionsb_datav_3_96_EQ_pci_ETC___d582 =
	     pcieCtrl_readCompletionsb_datav_3_96_EQ_pcieCt_ETC___d497 ?
	       NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d567 :
	       (pcieCtrl_readCompletionsb_datav_2_99_EQ_pcieCt_ETC___d500 ?
		  NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d580 :
		  IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d578) ;
  assign IF_pcie_user_receiveUser_138_BITS_13_TO_10_139_ETC___d1170 =
	     (pcie_m_axis_rx_tuser[13:10] == 4'b1000 &&
	      pcie_m_axis_rx_tuser[14] ||
	      pcieCtrl_partOffset[3]) ?
	       x__h26984 :
	       pcie_m_axis_rx_tdata ;
  assign IF_pcie_user_receiveUser_138_BITS_13_TO_10_139_ETC___d1177 =
	     (pcie_m_axis_rx_tuser[13:10] == 4'b1000 &&
	      pcie_m_axis_rx_tuser[14] ||
	      pcieCtrl_partOffset[3]) ?
	       x__h27018 :
	       pcie_m_axis_rx_tkeep ;
  assign NOT_pcieCtrl_dmaReadWordQ_rRdPtr_read__77_PLUS_ETC___d1527 =
	     pcieCtrl_dmaReadWordQ_rRdPtr + 9'd128 !=
	     pcieCtrl_dmaReadWordQ_rWrPtr ;
  assign NOT_pcieCtrl_freeReadTagQ_rRdPtr_read__00_PLUS_ETC___d446 =
	     pcieCtrl_freeReadTagQ_rRdPtr + 9'd128 !=
	     pcieCtrl_freeReadTagQ_rWrPtr ;
  assign NOT_pcieCtrl_freeWriteTagQ_rRdPtr_read__30_PLU_ETC___d449 =
	     pcieCtrl_freeWriteTagQ_rRdPtr + 9'd128 !=
	     pcieCtrl_freeWriteTagQ_rWrPtr ;
  assign NOT_pcieCtrl_readBurst2Q_first__92_BITS_17_TO__ETC___d548 =
	     pcieCtrl_readBurst2Q_D_OUT[17:10] != 8'd0 &&
	     IF_pcieCtrl_readCompletionsb_datav_3_96_EQ_pci_ETC___d540 ||
	     pcieCtrl_readCompletionsb_deqoff != x__h14198[1:0] &&
	     pcieCtrl_tagMap_serverAdapterB_cnt_03_SLT_3___d544 &&
	     pcieCtrl_burstUpdReqQ_FULL_N ;
  assign NOT_pcieCtrl_readCompletionsb_datav_0_14_EQ_pc_ETC___d562 =
	     !pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515 ||
	     pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 ||
	     pcieCtrl_readCompletionsb_enqoff == 2'd0 ||
	     pcieCtrl_readCompletionsb_deqoff != 2'd0 ;
  assign NOT_pcieCtrl_readCompletionsb_deqoff_58_EQ_pci_ETC___d599 =
	     pcieCtrl_readCompletionsb_deqoff !=
	     pcieCtrl_readCompletionsb_enqoff &&
	     pcieCtrl_tagMap_serverAdapterB_cnt_03_SLT_3___d544 &&
	     pcieCtrl_tagMapReadAQ_EMPTY_N &&
	     pcieCtrl_burstUpdReqQ_EMPTY_N ;
  assign NOT_pcieCtrl_readCompletionsb_enqoff_67_ULE_pc_ETC___d534 =
	     !pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 &&
	     !pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509 &&
	     pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512 ||
	     pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515 &&
	     pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d532 ;
  assign NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d567 =
	     !pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 &&
	     (pcieCtrl_readCompletionsb_datav_2_99_EQ_pcieCt_ETC___d500 ?
		(pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 ||
		 pcieCtrl_readCompletionsb_enqoff != 2'd3 ||
		 pcieCtrl_readCompletionsb_deqoff == 2'd3) &&
		IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d564 :
		IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d564) ;
  assign NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d574 =
	     (!pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 ||
	      pcieCtrl_readCompletionsb_enqoff == 2'd0 &&
	      pcieCtrl_readCompletionsb_deqoff != 2'd0) &&
	     (pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 ||
	      pcieCtrl_readCompletionsb_enqoff == 2'd0 ||
	      pcieCtrl_readCompletionsb_deqoff != 2'd0) ;
  assign NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d577 =
	     (!pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 ||
	      pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509 &&
	      !pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512) &&
	     pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d576 ;
  assign NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d580 =
	     (!pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 ||
	      pcieCtrl_readCompletionsb_enqoff != 2'd3 &&
	      pcieCtrl_readCompletionsb_deqoff == 2'd3) &&
	     (pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 ||
	      pcieCtrl_readCompletionsb_enqoff != 2'd3 ||
	      pcieCtrl_readCompletionsb_deqoff == 2'd3) &&
	     IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d578 ;
  assign NOT_pcieCtrl_tlpQ_first__538_BITS_30_TO_24_571_ETC___d1607 =
	     pcieCtrl_tlpQ_D_OUT[30:24] != 7'b1001010 &&
	     pcieCtrl_tlpQ_D_OUT[30:24] != 7'b1101010 &&
	     pcieCtrl_tlpQ_D_OUT[30:24] != 7'b0001010 &&
	     pcieCtrl_tlpQ_D_OUT[30:24] != 7'b0101010 ||
	     pcieCtrl_readBurstQ_FULL_N &&
	     (!pcieCtrl_tlpQ_first__538_BITS_9_TO_0_602_ULE_1___d1603 ||
	      NOT_pcieCtrl_dmaReadWordQ_rRdPtr_read__77_PLUS_ETC___d1527) ;
  assign _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1827 =
	     x__h42018 - pcieCtrl_dmaReadStartAddr ;
  assign _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1831 =
	     _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1827[13:4] <=
	     _theResult____h41705 ;
  assign _0_CONCAT_pcieCtrl_dmaStartAddr_928_BITS_31_TO__ETC___d1938 =
	     x4259_MINUS_pcieCtrl_dmaStartAddr__q4[13:4] <=
	     _theResult____h44006 ;
  assign _theResult____h41705 =
	     (pcieCtrl_dmaReadWords <= 10'd8) ?
	       pcieCtrl_dmaReadWords :
	       10'd8 ;
  assign _theResult____h44006 =
	     (pcieCtrl_dmaSendWords < 10'd8) ? pcieCtrl_dmaSendWords : 10'd8 ;
  assign bufidx1700_PLUS_1__q2 = bufidx__h41700 + 32'd1 ;
  assign bufidx4001_PLUS_1__q3 = bufidx__h44001 + 32'd1 ;
  assign bufidx__h41700 = { 12'd0, pcieCtrl_dmaReadStartAddr[31:12] } ;
  assign bufidx__h44001 = { 12'd0, pcieCtrl_dmaStartAddr[31:12] } ;
  assign cdw0__h37094 =
	     { 9'd148,
	       pcieCtrl_tlpQ_D_OUT[22:20],
	       4'h0,
	       pcieCtrl_tlpQ_D_OUT[15:12],
	       12'd1 } ;
  assign cdw0__h39873 =
	     { 9'd148,
	       pcieCtrl_ioReadQ_D_OUT[6:4],
	       4'h0,
	       pcieCtrl_ioReadQ_D_OUT[3:0],
	       12'd1 } ;
  assign cdw0__h42339 =
	     { 22'd0, pcieCtrl_dmaPageReadReqQ_D_OUT[15:8], 2'd0 } ;
  assign cdw0__h44596 =
	     { 22'd1048576, pcieCtrl_dmaPageWriteReqQ_D_OUT[15:8], 2'd0 } ;
  assign cdw0__h47096 =
	     { 9'd148,
	       ctrl_user_dataSend_ioreq[6:4],
	       4'h0,
	       ctrl_user_dataSend_ioreq[3:0],
	       12'd1 } ;
  assign cdw1__h37095 = { pcie_cfg_completer_id, 16'd4 } ;
  assign cdw1__h40759 = { pcie_cfg_completer_id, 16'd0 } ;
  assign cdw1__h42340 =
	     { pcie_cfg_completer_id,
	       pcieCtrl_dmaPageReadReqQ_D_OUT[7:0],
	       8'd255 } ;
  assign cdw1__h44597 =
	     { pcie_cfg_completer_id,
	       pcieCtrl_dmaPageWriteReqQ_D_OUT[7:0],
	       8'd255 } ;
  assign cdw2__h37096 =
	     { pcieCtrl_tlpQ_D_OUT[63:40],
	       1'b0,
	       pcieCtrl_tlpQ_D_OUT[70:66],
	       2'b0 } ;
  assign cdw2__h39875 =
	     { pcieCtrl_ioReadQ_D_OUT[50:27],
	       1'b0,
	       pcieCtrl_ioReadQ_D_OUT[13:7] } ;
  assign cdw2__h40760 =
	     { pcieCtrl_tlp3Q_D_OUT[63:40],
	       1'b0,
	       pcieCtrl_tlp3Q_D_OUT[70:66],
	       2'b0 } ;
  assign cdw2__h42341 =
	     { pcieCtrl_dmaReadBufAddrQD_OUT_PLUS_pcieCtrl_d_ETC__q7[31:2],
	       2'b0 } ;
  assign cdw2__h44598 =
	     { pcieCtrl_dmaWriteBufAddrQD_OUT_PLUS_pcieCtrl__ETC__q5[31:2],
	       2'b0 } ;
  assign cdw2__h47098 =
	     { ctrl_user_dataSend_ioreq[50:27],
	       1'b0,
	       ctrl_user_dataSend_ioreq_BITS_26_TO_7_PLUS_16384__q8[6:0] } ;
  assign cdw3__h37963 =
	     { pcieCtrl_debugCode[7:0],
	       pcieCtrl_debugCode[15:8],
	       pcieCtrl_debugCode[23:16],
	       pcieCtrl_debugCode[31:24] } ;
  assign cdw3__h38048 =
	     { pcieCtrl_userReadEmit[7:0],
	       pcieCtrl_userReadEmit[15:8],
	       pcieCtrl_userReadEmit[23:16],
	       pcieCtrl_userReadEmit[31:24] } ;
  assign cdw3__h38118 =
	     { pcieCtrl_userWriteEmit[7:0],
	       pcieCtrl_userWriteEmit[15:8],
	       pcieCtrl_userWriteEmit[23:16],
	       pcieCtrl_userWriteEmit[31:24] } ;
  assign cdw3__h39876 =
	     { pcieCtrl_configBuffer_serverAdapterA_outData_outData_wget[7:0],
	       pcieCtrl_configBuffer_serverAdapterA_outData_outData_wget[15:8],
	       pcieCtrl_configBuffer_serverAdapterA_outData_outData_wget[23:16],
	       pcieCtrl_configBuffer_serverAdapterA_outData_outData_wget[31:24] } ;
  assign cdw3__h44599 =
	     { pcieCtrl_dmaWriteWordQ_D_OUT[7:0],
	       pcieCtrl_dmaWriteWordQ_D_OUT[15:8],
	       pcieCtrl_dmaWriteWordQ_D_OUT[23:16],
	       pcieCtrl_dmaWriteWordQ_D_OUT[31:24] } ;
  assign cdw3__h47099 =
	     { ctrl_user_dataSend_data[7:0],
	       ctrl_user_dataSend_data[15:8],
	       ctrl_user_dataSend_data[23:16],
	       ctrl_user_dataSend_data[31:24] } ;
  assign ctrl_user_dataSend_ioreq_BITS_26_TO_7_PLUS_16384__q8 =
	     ctrl_user_dataSend_ioreq[26:7] + 20'd16384 ;
  assign data0__h36644 =
	     { pcieCtrl_tlpQ_D_OUT[7:0],
	       pcieCtrl_tlpQ_D_OUT[15:8],
	       pcieCtrl_tlpQ_D_OUT[23:16],
	       pcieCtrl_tlpQ_D_OUT[31:24] } ;
  assign data1__h36645 =
	     { pcieCtrl_tlpQ_D_OUT[39:32],
	       pcieCtrl_tlpQ_D_OUT[47:40],
	       pcieCtrl_tlpQ_D_OUT[55:48],
	       pcieCtrl_tlpQ_D_OUT[63:56] } ;
  assign data2__h36646 =
	     { pcieCtrl_tlpQ_D_OUT[71:64],
	       pcieCtrl_tlpQ_D_OUT[79:72],
	       pcieCtrl_tlpQ_D_OUT[87:80],
	       pcieCtrl_tlpQ_D_OUT[95:88] } ;
  assign internalAddr__h40500 = { pcieCtrl_tlp3Q_D_OUT[83:66], 2'b0 } ;
  assign newwords___1__h14763 =
	     pcieCtrl_tagMapReadAQ_D_OUT[19:10] -
	     pcieCtrl_tagMapReadAQ_D_OUT[9:0] ;
  assign p1__h10085 = { 1'd0, pcieCtrl_readCompletionsb_deqoff } + 3'd1 ;
  assign p1__h14195 = { 1'd0, pcieCtrl_readCompletionsb_enqoff } + 3'd1 ;
  assign pcieCtrl_bufidxRequestedWriteQ_i_notEmpty__788_ETC___d1793 =
	     pcieCtrl_bufidxRequestedWriteQ_EMPTY_N &&
	     (pcieCtrl_bufidxRequestedWriteQ_D_OUT ?
		pcieCtrl_dmaWriteBufAddrQ_FULL_N :
		pcieCtrl_dmaReadBufAddrQ_FULL_N) ;
  assign pcieCtrl_configBuffer_serverAdapterA_cnt_6_PLU_ETC___d32 =
	     pcieCtrl_configBuffer_serverAdapterA_cnt +
	     (pcieCtrl_configBuffer_serverAdapterA_cnt_1_whas ? 3'd1 : 3'd0) +
	     (pcieCtrl_configBuffer_serverAdapterA_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign pcieCtrl_configBuffer_serverAdapterA_cnt_6_SLT_3___d1681 =
	     (pcieCtrl_configBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pcieCtrl_configBuffer_serverAdapterB_cnt_5_PLU_ETC___d91 =
	     pcieCtrl_configBuffer_serverAdapterB_cnt +
	     (WILL_FIRE_RL_pcieCtrl_configBuffer_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pcieCtrl_relayBufIdxRead ? 3'd7 : 3'd0) ;
  assign pcieCtrl_configBuffer_serverAdapterB_cnt_5_SLT_3___d1813 =
	     (pcieCtrl_configBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pcieCtrl_dataWordsRemain_958_ULE_1___d1991 =
	     pcieCtrl_dataWordsRemain <= 10'd1 ;
  assign pcieCtrl_dmaReadBufAddrQD_OUT_PLUS_pcieCtrl_d_ETC__q7 =
	     pcieCtrl_dmaReadBufAddrQ_D_OUT +
	     pcieCtrl_dmaPageReadReqQ_D_OUT[49:18] ;
  assign pcieCtrl_dmaReadOutCntUp_075_MINUS_pcieCtrl_dm_ETC___d1078 =
	     pcieCtrl_dmaReadOutCntUp - pcieCtrl_dmaReadOutCntDn < 8'd56 ;
  assign pcieCtrl_dmaWriteBufAddrQD_OUT_PLUS_pcieCtrl__ETC__q5 =
	     pcieCtrl_dmaWriteBufAddrQ_D_OUT +
	     pcieCtrl_dmaPageWriteReqQ_D_OUT[49:18] ;
  assign pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029 =
	     pcieCtrl_dmaWriteBuf | y__h44927 ;
  assign pcieCtrl_doneMap_serverAdapterB_cnt_96_PLUS_IF_ETC___d902 =
	     pcieCtrl_doneMap_serverAdapterB_cnt +
	     (WILL_FIRE_RL_pcieCtrl_doneMap_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (pcieCtrl_doneMap_serverAdapterB_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign pcieCtrl_orderShiftedQ_i_notEmpty__77_AND_pcie_ETC___d982 =
	     pcieCtrl_orderShiftedQ_EMPTY_N &&
	     (x__h24274 == 128'd0 ||
	      pcieCtrl_orderTagBypassQ2_EMPTY_N &&
	      pcieCtrl_doneReorderedTagQ_FULL_N) ;
  assign pcieCtrl_partBuffer_BITS_127_TO_0__q6 = pcieCtrl_partBuffer[127:0] ;
  assign pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515 =
	     pcieCtrl_readCompletionsb_datav_0 ==
	     pcieCtrl_readBurst2Q_D_OUT[17:10] ;
  assign pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d520 =
	     pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515 &&
	     !pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 &&
	     pcieCtrl_readCompletionsb_enqoff != 2'd0 &&
	     pcieCtrl_readCompletionsb_deqoff == 2'd0 ;
  assign pcieCtrl_readCompletionsb_datav_1_07_EQ_pcieCt_ETC___d508 =
	     pcieCtrl_readCompletionsb_datav_1 ==
	     pcieCtrl_readBurst2Q_D_OUT[17:10] ;
  assign pcieCtrl_readCompletionsb_datav_2_99_EQ_pcieCt_ETC___d500 =
	     pcieCtrl_readCompletionsb_datav_2 ==
	     pcieCtrl_readBurst2Q_D_OUT[17:10] ;
  assign pcieCtrl_readCompletionsb_datav_3_96_EQ_pcieCt_ETC___d497 =
	     pcieCtrl_readCompletionsb_datav_3 ==
	     pcieCtrl_readBurst2Q_D_OUT[17:10] ;
  assign pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512 =
	     pcieCtrl_readCompletionsb_deqoff <= 2'd1 ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509 =
	     pcieCtrl_readCompletionsb_enqoff <= 2'd1 ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 =
	     pcieCtrl_readCompletionsb_enqoff <=
	     pcieCtrl_readCompletionsb_deqoff ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d576 =
	     (pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 ||
	      pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509 ||
	      !pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512) &&
	     (!pcieCtrl_readCompletionsb_datav_0_14_EQ_pcieCt_ETC___d515 ||
	      NOT_pcieCtrl_readCompletionsb_enqoff_67_ULT_pc_ETC___d574) ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 =
	     pcieCtrl_readCompletionsb_enqoff <
	     pcieCtrl_readCompletionsb_deqoff ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d525 =
	     pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 ||
	     (pcieCtrl_readCompletionsb_datav_2_99_EQ_pcieCt_ETC___d500 ?
		!pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 &&
		pcieCtrl_readCompletionsb_enqoff == 2'd3 &&
		pcieCtrl_readCompletionsb_deqoff != 2'd3 ||
		IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d522 :
		IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d522) ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d532 =
	     pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 &&
	     (pcieCtrl_readCompletionsb_enqoff != 2'd0 ||
	      pcieCtrl_readCompletionsb_deqoff == 2'd0) ||
	     !pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 &&
	     pcieCtrl_readCompletionsb_enqoff != 2'd0 &&
	     pcieCtrl_readCompletionsb_deqoff == 2'd0 ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d535 =
	     pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 &&
	     (!pcieCtrl_readCompletionsb_enqoff_67_ULE_1___d509 ||
	      pcieCtrl_readCompletionsb_deqoff_58_ULE_1___d512) ||
	     NOT_pcieCtrl_readCompletionsb_enqoff_67_ULE_pc_ETC___d534 ;
  assign pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d538 =
	     pcieCtrl_readCompletionsb_enqoff_67_ULT_pcieCt_ETC___d498 &&
	     (pcieCtrl_readCompletionsb_enqoff == 2'd3 ||
	      pcieCtrl_readCompletionsb_deqoff != 2'd3) ||
	     !pcieCtrl_readCompletionsb_enqoff_67_ULE_pcieCt_ETC___d501 &&
	     pcieCtrl_readCompletionsb_enqoff == 2'd3 &&
	     pcieCtrl_readCompletionsb_deqoff != 2'd3 ||
	     IF_pcieCtrl_readCompletionsb_datav_1_07_EQ_pci_ETC___d536 ;
  assign pcieCtrl_readFlushTag_BITS_19_TO_10_MINUS_pcie_ETC__q1 =
	     pcieCtrl_readFlushTag[19:10] - pcieCtrl_readFlushTag[9:0] ;
  assign pcieCtrl_readReorder_serverAdapterB_cnt_21_PLU_ETC___d327 =
	     pcieCtrl_readReorder_serverAdapterB_cnt +
	     (WILL_FIRE_RL_pcieCtrl_readReorder_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign pcieCtrl_readReorder_serverAdapterB_cnt_21_SLT_3___d1081 =
	     (pcieCtrl_readReorder_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pcieCtrl_sendTLPQ_i_notFull__954_AND_IF_pcieCt_ETC___d1998 =
	     pcieCtrl_sendTLPQ_FULL_N &&
	     (pcieCtrl_dataWordsRemain_958_ULE_1___d1991 ?
		NOT_pcieCtrl_freeWriteTagQ_rRdPtr_read__30_PLU_ETC___d449 &&
		pcieCtrl_busyWriteTagQ_rRdPtr !=
		pcieCtrl_busyWriteTagQ_rWrPtr :
		pcieCtrl_dmaWriteWordQ_EMPTY_N) ;
  assign pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d610 =
	     pcieCtrl_tagMapReadAQ_D_OUT[9:0] +
	     pcieCtrl_burstUpdReqQ_D_OUT[9:0] ;
  assign pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d612 =
	     pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d610 <
	     pcieCtrl_tagMapReadAQ_D_OUT[19:10] ;
  assign pcieCtrl_tagMap_serverAdapterB_cnt_03_PLUS_IF__ETC___d209 =
	     pcieCtrl_tagMap_serverAdapterB_cnt +
	     (pcieCtrl_tagMap_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (pcieCtrl_tagMap_serverAdapterB_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign pcieCtrl_tagMap_serverAdapterB_cnt_03_SLT_3___d544 =
	     (pcieCtrl_tagMap_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pcieCtrl_tagWordsLeft_00_BITS_29_TO_20_01_ULE_4___d1010 =
	     pcieCtrl_tagWordsLeft[29:20] <= 10'd4 ;
  assign pcieCtrl_tagWordsLeft_00_BITS_39_TO_30_012_PLU_ETC___d1017 =
	     x__h24567 < pcieCtrl_tagWordsLeft[9:0] ;
  assign pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1677 =
	     x__h39429 < 20'd16384 ;
  assign pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1685 =
	     (pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1677 ||
	      pcieCtrl_userReadQ0_FULL_N) &&
	     (!pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1677 ||
	      pcieCtrl_configBuffer_serverAdapterA_cnt_6_SLT_3___d1681 &&
	      pcieCtrl_ioReadQ_FULL_N) ;
  assign pcieCtrl_tlp2Q_i_notEmpty__669_AND_IF_pcieCtrl_ETC___d1694 =
	     pcieCtrl_tlp2Q_EMPTY_N &&
	     CASE_pcieCtrl_tlp2QD_OUT_BITS_30_TO_24_0b0_pc_ETC__q10 ;
  assign pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_CO_ETC___d1754 =
	     internalAddr__h40500 < 20'd16384 ;
  assign pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_EQ_ETC___d1757 =
	     pcieCtrl_tlp3Q_D_OUT[83:66] == 18'd0 ||
	     (pcieCtrl_tlp3Q_first__750_BITS_83_TO_66_751_CO_ETC___d1754 ?
		pcieCtrl_configBuffer_serverAdapterA_cnt_6_SLT_3___d1681 :
		pcieCtrl_userWrite1Q_FULL_N) ;
  assign pcieCtrl_tlpQ_first__538_BITS_9_TO_0_602_ULE_1___d1603 =
	     pcieCtrl_tlpQ_D_OUT[9:0] <= 10'd1 ;
  assign pcieCtrl_tlpQ_i_notEmpty__528_AND_pcieCtrl_tlp_ETC___d1611 =
	     pcieCtrl_tlpQ_EMPTY_N && pcieCtrl_tlpKeepQ_EMPTY_N &&
	     CASE_pcieCtrl_tlpQD_OUT_BITS_30_TO_24_0b0_IF__ETC__q9 ;
  assign tag__h23604 =
	     (pcieCtrl_dmaReadTagOrderQ_rCache[17] &&
	      pcieCtrl_dmaReadTagOrderQ_rCache[16:8] ==
	      pcieCtrl_dmaReadTagOrderQ_rRdPtr) ?
	       pcieCtrl_dmaReadTagOrderQ_rCache[7:0] :
	       pcieCtrl_dmaReadTagOrderQ_memory_DOB ;
  assign val___1__h17209 =
	     { pcieCtrl_doneShifter_stageFifos_6_D_OUT[70:7], 64'd0 } ;
  assign val___1__h17355 =
	     { pcieCtrl_doneShifter_stageFifos_5_D_OUT[102:7], 32'd0 } ;
  assign val___1__h17490 =
	     { pcieCtrl_doneShifter_stageFifos_4_D_OUT[118:7], 16'd0 } ;
  assign val___1__h17625 =
	     { pcieCtrl_doneShifter_stageFifos_3_D_OUT[126:7], 8'd0 } ;
  assign val___1__h17760 =
	     { pcieCtrl_doneShifter_stageFifos_2_D_OUT[130:7], 4'd0 } ;
  assign val___1__h17895 =
	     { pcieCtrl_doneShifter_stageFifos_1_D_OUT[132:7], 2'd0 } ;
  assign val___1__h18080 =
	     { pcieCtrl_doneShifter_stageFifos_0_D_OUT[133:7], 1'd0 } ;
  assign val___1__h19471 =
	     { pcieCtrl_orderShifter_stageFifos_6_D_OUT[70:7], 64'd0 } ;
  assign val___1__h19606 =
	     { pcieCtrl_orderShifter_stageFifos_5_D_OUT[102:7], 32'd0 } ;
  assign val___1__h19741 =
	     { pcieCtrl_orderShifter_stageFifos_4_D_OUT[118:7], 16'd0 } ;
  assign val___1__h19876 =
	     { pcieCtrl_orderShifter_stageFifos_3_D_OUT[126:7], 8'd0 } ;
  assign val___1__h20011 =
	     { pcieCtrl_orderShifter_stageFifos_2_D_OUT[130:7], 4'd0 } ;
  assign val___1__h20146 =
	     { pcieCtrl_orderShifter_stageFifos_1_D_OUT[132:7], 2'd0 } ;
  assign val___1__h20331 =
	     { pcieCtrl_orderShifter_stageFifos_0_D_OUT[133:7], 1'd0 } ;
  assign words__h24600 = pcieCtrl_tagWordsLeft[29:20] - 10'd4 ;
  assign wordsleft___1__h26013 = pcieCtrl_readFlushTag[9:0] - 10'd4 ;
  assign wordsleft___1__h26135 =
	     pcieCtrl_orderedReadDoneTagQ_D_OUT[9:0] - 10'd4 ;
  assign x2__h26059 = { pcieCtrl_orderedReadDoneTagQ_D_OUT[16:10], 3'd0 } ;
  assign x2__h26196 = x__h26217 | y__h26218 ;
  assign x2__h42106 =
	     (pcieCtrl_freeReadTagQ_rCache[17] &&
	      pcieCtrl_freeReadTagQ_rCache[16:8] ==
	      pcieCtrl_freeReadTagQ_rRdPtr) ?
	       pcieCtrl_freeReadTagQ_rCache[7:0] :
	       pcieCtrl_freeReadTagQ_memory_DOB ;
  assign x3__h10996 =
	     pcieCtrl_freeReadTagQ_wDataIn_whas ? x_wget__h10782 : 8'd0 ;
  assign x3__h11887 =
	     pcieCtrl_freeWriteTagQ_wDataIn_whas ? x_wget__h11673 : 8'd0 ;
  assign x3__h15586 =
	     pcieCtrl_dmaReadTagOrderQ_pwEnqueue_whas ?
	       pcieCtrl_dmaPageReadReqQ_D_OUT[7:0] :
	       8'd0 ;
  assign x3__h25488 =
	     pcieCtrl_readReorder_serverAdapterB_outData_deqCalled_whas ?
	       x_wget__h25274 :
	       128'd0 ;
  assign x3__h40645 =
	     { pcieCtrl_tlp3Q_D_OUT[103:96],
	       pcieCtrl_tlp3Q_D_OUT[111:104],
	       pcieCtrl_tlp3Q_D_OUT[119:112],
	       pcieCtrl_tlp3Q_D_OUT[127:120] } ;
  assign x3__h43494 =
	     WILL_FIRE_RL_pcieCtrl_splitDmaWriteReq2 ?
	       pcieCtrl_freeWriteTagStageQ_D_OUT :
	       8'd0 ;
  assign x4259_MINUS_pcieCtrl_dmaStartAddr__q4 =
	     x__h44259 - pcieCtrl_dmaStartAddr ;
  assign x__h10088 = (p1__h10085 < 3'd4) ? p1__h10085 : 3'd0 ;
  assign x__h11063 = pcieCtrl_freeReadTagQ_rWrPtr + 9'd1 ;
  assign x__h11152 = pcieCtrl_freeReadTagQ_rRdPtr + 9'd1 ;
  assign x__h11954 = pcieCtrl_freeWriteTagQ_rWrPtr + 9'd1 ;
  assign x__h12043 = pcieCtrl_freeWriteTagQ_rRdPtr + 9'd1 ;
  assign x__h13070 = pcieCtrl_dmaReadWordQ_rWrPtr + 9'd1 ;
  assign x__h13181 = pcieCtrl_dmaReadWordQ_rRdPtr + 9'd1 ;
  assign x__h14198 = (p1__h14195 < 3'd4) ? p1__h14195 : 3'd0 ;
  assign x__h14751 =
	     pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d612 ?
	       pcieCtrl_burstUpdReqQ_D_OUT[9:0] :
	       newwords___1__h14763 ;
  assign x__h14798 =
	     pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d612 ?
	       pcieCtrl_tagMapReadAQ_first__07_BITS_9_TO_0_08_ETC___d610 :
	       pcieCtrl_tagMapReadAQ_D_OUT[19:10] ;
  assign x__h15653 = pcieCtrl_dmaReadTagOrderQ_rWrPtr + 9'd1 ;
  assign x__h15742 = pcieCtrl_dmaReadTagOrderQ_rRdPtr + 9'd1 ;
  assign x__h17182 =
	     pcieCtrl_doneShifter_stageFifos_6_D_OUT[6] ?
	       val___1__h17209 :
	       pcieCtrl_doneShifter_stageFifos_6_D_OUT[134:7] ;
  assign x__h17330 =
	     pcieCtrl_doneShifter_stageFifos_5_D_OUT[5] ?
	       val___1__h17355 :
	       pcieCtrl_doneShifter_stageFifos_5_D_OUT[134:7] ;
  assign x__h17465 =
	     pcieCtrl_doneShifter_stageFifos_4_D_OUT[4] ?
	       val___1__h17490 :
	       pcieCtrl_doneShifter_stageFifos_4_D_OUT[134:7] ;
  assign x__h17600 =
	     pcieCtrl_doneShifter_stageFifos_3_D_OUT[3] ?
	       val___1__h17625 :
	       pcieCtrl_doneShifter_stageFifos_3_D_OUT[134:7] ;
  assign x__h17735 =
	     pcieCtrl_doneShifter_stageFifos_2_D_OUT[2] ?
	       val___1__h17760 :
	       pcieCtrl_doneShifter_stageFifos_2_D_OUT[134:7] ;
  assign x__h17870 =
	     pcieCtrl_doneShifter_stageFifos_1_D_OUT[1] ?
	       val___1__h17895 :
	       pcieCtrl_doneShifter_stageFifos_1_D_OUT[134:7] ;
  assign x__h19444 =
	     pcieCtrl_orderShifter_stageFifos_6_D_OUT[6] ?
	       val___1__h19471 :
	       pcieCtrl_orderShifter_stageFifos_6_D_OUT[134:7] ;
  assign x__h19581 =
	     pcieCtrl_orderShifter_stageFifos_5_D_OUT[5] ?
	       val___1__h19606 :
	       pcieCtrl_orderShifter_stageFifos_5_D_OUT[134:7] ;
  assign x__h19716 =
	     pcieCtrl_orderShifter_stageFifos_4_D_OUT[4] ?
	       val___1__h19741 :
	       pcieCtrl_orderShifter_stageFifos_4_D_OUT[134:7] ;
  assign x__h19851 =
	     pcieCtrl_orderShifter_stageFifos_3_D_OUT[3] ?
	       val___1__h19876 :
	       pcieCtrl_orderShifter_stageFifos_3_D_OUT[134:7] ;
  assign x__h19986 =
	     pcieCtrl_orderShifter_stageFifos_2_D_OUT[2] ?
	       val___1__h20011 :
	       pcieCtrl_orderShifter_stageFifos_2_D_OUT[134:7] ;
  assign x__h20121 =
	     pcieCtrl_orderShifter_stageFifos_1_D_OUT[1] ?
	       val___1__h20146 :
	       pcieCtrl_orderShifter_stageFifos_1_D_OUT[134:7] ;
  assign x__h24132 = pcieCtrl_curOrderTag[127:0] & y__h24276 ;
  assign x__h24180 = pcieCtrl_orderTagMap ^ pcieCtrl_curOrderTag[127:0] ;
  assign x__h24274 = pcieCtrl_orderShiftedQ_D_OUT & y__h24276 ;
  assign x__h24299 = pcieCtrl_orderTagMap ^ pcieCtrl_orderShiftedQ_D_OUT ;
  assign x__h24567 = x__h24583 + 10'd4 ;
  assign x__h24583 =
	     pcieCtrl_tagWordsLeft[39:30] + pcieCtrl_tagWordsLeft[19:10] ;
  assign x__h24673 =
	     (pcieCtrl_tagWordsLeft_00_BITS_29_TO_20_01_ULE_4___d1010 &&
	      !pcieCtrl_tagWordsLeft_00_BITS_39_TO_30_012_PLU_ETC___d1017) ?
	       10'd0 :
	       words__h24600 ;
  assign x__h24676 = pcieCtrl_tagWordsLeft[19:10] + 10'd4 ;
  assign x__h24760 = { pcieCtrl_tagWordsLeft[46:40], 3'd0 } ;
  assign x__h25555 = pcieCtrl_dmaReadOutQ_rWrPtr + 8'd1 ;
  assign x__h25644 = pcieCtrl_dmaReadOutQ_rRdPtr + 8'd1 ;
  assign x__h26007 =
	     (pcieCtrl_readFlushTag[9:0] <= 10'd4) ?
	       10'd0 :
	       wordsleft___1__h26013 ;
  assign x__h26129 =
	     (pcieCtrl_orderedReadDoneTagQ_D_OUT[9:0] <= 10'd4) ?
	       10'd0 :
	       wordsleft___1__h26135 ;
  assign x__h26217 = { pcieCtrl_readFlushTag[26:20], 3'd0 } ;
  assign x__h26984 =
	     { pcie_m_axis_rx_tdata[63:0],
	       pcieCtrl_partBuffer_BITS_127_TO_0__q6[63:0] } ;
  assign x__h27018 = { pcie_m_axis_rx_tkeep[7:0], pcieCtrl_keepBuffer[7:0] } ;
  assign x__h34443 = pcieCtrl_userWriteQ_rWrPtr + 11'd1 ;
  assign x__h34554 = pcieCtrl_userWriteQ_rRdPtr + 11'd1 ;
  assign x__h35585 =
	     pcieCtrl_userReadQ1_pwEnqueue_whas ?
	       pcieCtrl_userReadQ0_D_OUT[34:27] :
	       8'd0 ;
  assign x__h35595 =
	     pcieCtrl_userReadQ1_pwEnqueue_whas ?
	       pcieCtrl_userReadQ0_D_OUT[26:7] :
	       20'd0 ;
  assign x__h35605 =
	     pcieCtrl_userReadQ1_pwEnqueue_whas ?
	       pcieCtrl_userReadQ0_D_OUT[6:4] :
	       3'd0 ;
  assign x__h35616 =
	     pcieCtrl_userReadQ1_pwEnqueue_whas &&
	     pcieCtrl_userReadQ0_D_OUT[3] ;
  assign x__h35626 =
	     pcieCtrl_userReadQ1_pwEnqueue_whas &&
	     pcieCtrl_userReadQ0_D_OUT[2] ;
  assign x__h35637 =
	     pcieCtrl_userReadQ1_pwEnqueue_whas ?
	       pcieCtrl_userReadQ0_D_OUT[1:0] :
	       2'd0 ;
  assign x__h35689 =
	     pcieCtrl_userReadQ1_pwEnqueue_whas ?
	       pcieCtrl_userReadQ0_D_OUT[50:35] :
	       16'd0 ;
  assign x__h35713 = pcieCtrl_userReadQ1_rWrPtr + 11'd1 ;
  assign x__h35870 = pcieCtrl_userReadQ1_rRdPtr + 11'd1 ;
  assign x__h36687 =
	     { data2__h36646,
	       data1__h36645,
	       data0__h36644,
	       pcieCtrl_dmaReadBuffer } ;
  assign x__h36995 = pcieCtrl_completionRecvLength - 10'd4 ;
  assign x__h39429 = { pcieCtrl_tlp2Q_D_OUT[83:66], 2'b0 } ;
  assign x__h39533 = x__h39429 - 20'd16384 ;
  assign x__h40151 =
	     { cdw3__h39876, cdw2__h39875, cdw1__h37095, cdw0__h39873 } ;
  assign x__h40720 = internalAddr__h40500 - 20'd16384 ;
  assign x__h40871 = { 32'd0, cdw2__h40760, cdw1__h40759, 32'd167772161 } ;
  assign x__h41761 = pcieCtrl_dmaReadWords - _theResult____h41705 ;
  assign x__h41939 = pcieCtrl_dmaReadStartAddr + y__h41948 ;
  assign x__h41996 =
	     pcieCtrl_dmaReadWords -
	     _0_CONCAT_pcieCtrl_dmaReadStartAddr_821_BITS_31_ETC___d1827[13:4] ;
  assign x__h42018 = { bufidx1700_PLUS_1__q2[19:0], 12'd0 } ;
  assign x__h42049 = { 20'd0, pcieCtrl_dmaReadStartAddr[11:0] } ;
  assign x__h42423 = { 32'd0, cdw2__h42341, cdw1__h42340, cdw0__h42339 } ;
  assign x__h43561 = pcieCtrl_busyWriteTagQ_rWrPtr + 9'd1 ;
  assign x__h43650 = pcieCtrl_busyWriteTagQ_rRdPtr + 9'd1 ;
  assign x__h44126 = pcieCtrl_dmaSendWords - _theResult____h44006 ;
  assign x__h44203 = pcieCtrl_dmaStartAddr + y__h44212 ;
  assign x__h44237 =
	     pcieCtrl_dmaSendWords -
	     x4259_MINUS_pcieCtrl_dmaStartAddr__q4[13:4] ;
  assign x__h44259 = { bufidx4001_PLUS_1__q3[19:0], 12'd0 } ;
  assign x__h44290 = { 20'd0, pcieCtrl_dmaStartAddr[11:0] } ;
  assign x__h44459 = pcieCtrl_dmaWriteWordIn - pcieCtrl_dmaWriteWordOut ;
  assign x__h44618 =
	     { cdw3__h44599, cdw2__h44598, cdw1__h44597, cdw0__h44596 } ;
  assign x__h44872 =
	     { pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[103:96],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[111:104],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[119:112],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[127:120],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[71:64],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[79:72],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[87:80],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[95:88],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[39:32],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[47:40],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[55:48],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[63:56],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[7:0],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[15:8],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[23:16],
	       pcieCtrl_dmaWriteBuf_002_OR_pcieCtrl_dmaWriteW_ETC___d2029[31:24] } ;
  assign x__h45403 =
	     { pcieCtrl_dmaWriteBuf[103:96],
	       pcieCtrl_dmaWriteBuf[111:104],
	       pcieCtrl_dmaWriteBuf[119:112],
	       pcieCtrl_dmaWriteBuf[127:120],
	       pcieCtrl_dmaWriteBuf[71:64],
	       pcieCtrl_dmaWriteBuf[79:72],
	       pcieCtrl_dmaWriteBuf[87:80],
	       pcieCtrl_dmaWriteBuf[95:88],
	       pcieCtrl_dmaWriteBuf[39:32],
	       pcieCtrl_dmaWriteBuf[47:40],
	       pcieCtrl_dmaWriteBuf[55:48],
	       pcieCtrl_dmaWriteBuf[63:56],
	       pcieCtrl_dmaWriteBuf[7:0],
	       pcieCtrl_dmaWriteBuf[15:8],
	       pcieCtrl_dmaWriteBuf[23:16],
	       pcieCtrl_dmaWriteBuf[31:24] } ;
  assign x__h47109 =
	     { cdw3__h47099, cdw2__h47098, cdw1__h37095, cdw0__h47096 } ;
  assign x_wget__h10782 =
	     WILL_FIRE_RL_pcieCtrl_insertFreeTag ?
	       pcieCtrl_freeTagCnt :
	       pcieCtrl_freeReadTagFQ_D_OUT ;
  assign x_wget__h11673 =
	     MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__SEL_1 ?
	       MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__VAL_1 :
	       MUX_pcieCtrl_freeWriteTagQ_wDataIn_wset_1__VAL_2 ;
  assign x_wget__h25274 =
	     pcieCtrl_readReorder_serverAdapterB_outDataCore_EMPTY_N ?
	       pcieCtrl_readReorder_serverAdapterB_outDataCore_D_OUT :
	       pcieCtrl_readReorder_memory_DOB ;
  assign y__h24276 = pcieCtrl_orderTagMap ^ pcieCtrl_doneTagMap ;
  assign y__h24761 = { 2'd0, x__h24583[9:2] } ;
  assign y__h26218 =
	     { 2'd0,
	       pcieCtrl_readFlushTag_BITS_19_TO_10_MINUS_pcie_ETC__q1[9:2] } ;
  assign y__h41948 = { 18'd0, _theResult____h41705, 4'd0 } ;
  assign y__h44212 = { 18'd0, _theResult____h44006, 4'd0 } ;
  assign y__h44927 = { pcieCtrl_dmaWriteWordQ_D_OUT[31:0], 96'd0 } ;
  always@(pcieCtrl_tlpQ_D_OUT or
	  pcieCtrl_tlp2Q_FULL_N or pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_FULL_N)
  begin
    case (pcieCtrl_tlpQ_D_OUT[83:66])
      18'd0, 18'd1, 18'd4094, 18'd4095:
	  IF_pcieCtrl_tlpQ_first__538_BITS_83_TO_66_575__ETC___d1585 =
	      pcieCtrl_sendTLPm_ma_0_ma_0_mb_inQ1_FULL_N;
      default: IF_pcieCtrl_tlpQ_first__538_BITS_83_TO_66_575__ETC___d1585 =
		   pcieCtrl_tlp2Q_FULL_N;
    endcase
  end
  always@(pcieCtrl_tlpQ_D_OUT or
	  pcieCtrl_tlp2Q_FULL_N or
	  NOT_pcieCtrl_tlpQ_first__538_BITS_30_TO_24_571_ETC___d1607 or
	  IF_pcieCtrl_tlpQ_first__538_BITS_83_TO_66_575__ETC___d1585)
  begin
    case (pcieCtrl_tlpQ_D_OUT[30:24])
      7'b0, 7'b0000010:
	  CASE_pcieCtrl_tlpQD_OUT_BITS_30_TO_24_0b0_IF__ETC__q9 =
	      IF_pcieCtrl_tlpQ_first__538_BITS_83_TO_66_575__ETC___d1585;
      default: CASE_pcieCtrl_tlpQD_OUT_BITS_30_TO_24_0b0_IF__ETC__q9 =
		   (pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1001010 ||
		    pcieCtrl_tlpQ_D_OUT[30:24] == 7'b1101010 ||
		    pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0001010 ||
		    pcieCtrl_tlpQ_D_OUT[30:24] == 7'b0101010 ||
		    pcieCtrl_tlp2Q_FULL_N) &&
		   NOT_pcieCtrl_tlpQ_first__538_BITS_30_TO_24_571_ETC___d1607;
    endcase
  end
  always@(pcieCtrl_tlp2Q_D_OUT or
	  pcieCtrl_tlp3Q_FULL_N or
	  pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1685)
  begin
    case (pcieCtrl_tlp2Q_D_OUT[30:24])
      7'b0, 7'b0000010:
	  CASE_pcieCtrl_tlp2QD_OUT_BITS_30_TO_24_0b0_pc_ETC__q10 =
	      pcieCtrl_tlp2Q_first__670_BITS_83_TO_66_675_CO_ETC___d1685;
      default: CASE_pcieCtrl_tlp2QD_OUT_BITS_30_TO_24_0b0_pc_ETC__q10 =
		   pcieCtrl_tlp2Q_D_OUT[30:24] != 7'b1000010 &&
		   pcieCtrl_tlp2Q_D_OUT[30:24] != 7'b1000000 ||
		   pcieCtrl_tlp3Q_FULL_N;
    endcase
  end
  always@(pcieCtrl_tlpQ_D_OUT or cdw3__h38118 or cdw3__h37963 or cdw3__h38048)
  begin
    case (pcieCtrl_tlpQ_D_OUT[83:66])
      18'd0:
	  CASE_pcieCtrl_tlpQD_OUT_BITS_83_TO_66_0_23173_ETC__q11 =
	      32'd231735744;
      18'd1:
	  CASE_pcieCtrl_tlpQD_OUT_BITS_83_TO_66_0_23173_ETC__q11 =
	      cdw3__h37963;
      18'd4094:
	  CASE_pcieCtrl_tlpQD_OUT_BITS_83_TO_66_0_23173_ETC__q11 =
	      cdw3__h38048;
      default: CASE_pcieCtrl_tlpQD_OUT_BITS_83_TO_66_0_23173_ETC__q11 =
		   cdw3__h38118;
    endcase
  end

  // handling of inlined registers

  always@(posedge pcie_user_clk)
  begin
    if (pcie_user_reset_n == `BSV_RESET_VALUE)
      begin
        pcieCtrl_busyWriteTagQ_rCache <= `BSV_ASSIGNMENT_DELAY 18'd43690;
	pcieCtrl_busyWriteTagQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_busyWriteTagQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_completionRecvLength <= `BSV_ASSIGNMENT_DELAY 10'd0;
	pcieCtrl_completionRecvTag <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_configBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	pcieCtrl_configBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_configBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	pcieCtrl_configBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_curOrderTag <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	pcieCtrl_dataWordsRemain <= `BSV_ASSIGNMENT_DELAY 10'd0;
	pcieCtrl_debugCode <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieCtrl_dmaReadBuffer <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieCtrl_dmaReadOutCntDn <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_dmaReadOutCntUp <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_dmaReadOutQ_rCache <= `BSV_ASSIGNMENT_DELAY
	    137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	pcieCtrl_dmaReadOutQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_dmaReadOutQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_dmaReadStartAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieCtrl_dmaReadTag <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_dmaReadTagOrderQ_rCache <= `BSV_ASSIGNMENT_DELAY 18'd43690;
	pcieCtrl_dmaReadTagOrderQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_dmaReadTagOrderQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_dmaReadWordQ_rCache <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	pcieCtrl_dmaReadWordQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_dmaReadWordQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_dmaReadWords <= `BSV_ASSIGNMENT_DELAY 10'd0;
	pcieCtrl_dmaSendWords <= `BSV_ASSIGNMENT_DELAY 10'd0;
	pcieCtrl_dmaStartAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieCtrl_dmaWriteBuf <= `BSV_ASSIGNMENT_DELAY 128'd0;
	pcieCtrl_dmaWriteWordIn <= `BSV_ASSIGNMENT_DELAY 10'd0;
	pcieCtrl_dmaWriteWordOut <= `BSV_ASSIGNMENT_DELAY 10'd0;
	pcieCtrl_doneMap_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pcieCtrl_doneMap_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_doneMap_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pcieCtrl_doneMap_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_doneShifter_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	pcieCtrl_doneTagMap <= `BSV_ASSIGNMENT_DELAY 128'd0;
	pcieCtrl_freeReadTagQ_rCache <= `BSV_ASSIGNMENT_DELAY 18'd43690;
	pcieCtrl_freeReadTagQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_freeReadTagQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_freeTagCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_freeWriteTagQ_rCache <= `BSV_ASSIGNMENT_DELAY 18'd43690;
	pcieCtrl_freeWriteTagQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_freeWriteTagQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY 9'd0;
	pcieCtrl_keepBuffer <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pcieCtrl_leddata_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_leddata_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_leddata_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_leddata_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_orderShifter_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	pcieCtrl_orderTagMap <= `BSV_ASSIGNMENT_DELAY 128'd0;
	pcieCtrl_partBuffer <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	pcieCtrl_partOffset <= `BSV_ASSIGNMENT_DELAY 5'd0;
	pcieCtrl_read32data <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	pcieCtrl_readCompletionsb_datav_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_readCompletionsb_datav_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_readCompletionsb_datav_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_readCompletionsb_datav_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcieCtrl_readCompletionsb_deqoff <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_readCompletionsb_enqoff <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_readFlushTag <= `BSV_ASSIGNMENT_DELAY 28'd0;
	pcieCtrl_readReorder_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pcieCtrl_readReorder_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_readReorder_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pcieCtrl_readReorder_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_rxOffset <= `BSV_ASSIGNMENT_DELAY 10'd0;
	pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_sendTLPm_ma_0_mb_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_sendTLPm_ma_1_mb_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_sendTLPm_mb_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcieCtrl_tagMap_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pcieCtrl_tagMap_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_tagMap_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pcieCtrl_tagMap_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieCtrl_tagWordsLeft <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pcieCtrl_tlpCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieCtrl_userReadEmit <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieCtrl_userReadQ1_rCache <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	pcieCtrl_userReadQ1_rRdPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	pcieCtrl_userReadQ1_rWrPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	pcieCtrl_userWriteBudget <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pcieCtrl_userWriteEmit <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieCtrl_userWriteQ_rCache <= `BSV_ASSIGNMENT_DELAY
	    64'h2AAAAAAAAAAAAAAA;
	pcieCtrl_userWriteQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	pcieCtrl_userWriteQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
      end
    else
      begin
        if (pcieCtrl_busyWriteTagQ_rCache_EN)
	  pcieCtrl_busyWriteTagQ_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_busyWriteTagQ_rCache_D_IN;
	if (pcieCtrl_busyWriteTagQ_rRdPtr_EN)
	  pcieCtrl_busyWriteTagQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_busyWriteTagQ_rRdPtr_D_IN;
	if (pcieCtrl_busyWriteTagQ_rWrPtr_EN)
	  pcieCtrl_busyWriteTagQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_busyWriteTagQ_rWrPtr_D_IN;
	if (pcieCtrl_completionRecvLength_EN)
	  pcieCtrl_completionRecvLength <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_completionRecvLength_D_IN;
	if (pcieCtrl_completionRecvTag_EN)
	  pcieCtrl_completionRecvTag <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_completionRecvTag_D_IN;
	if (pcieCtrl_configBuffer_serverAdapterA_cnt_EN)
	  pcieCtrl_configBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_configBuffer_serverAdapterA_cnt_D_IN;
	if (pcieCtrl_configBuffer_serverAdapterA_s1_EN)
	  pcieCtrl_configBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_configBuffer_serverAdapterA_s1_D_IN;
	if (pcieCtrl_configBuffer_serverAdapterB_cnt_EN)
	  pcieCtrl_configBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_configBuffer_serverAdapterB_cnt_D_IN;
	if (pcieCtrl_configBuffer_serverAdapterB_s1_EN)
	  pcieCtrl_configBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_configBuffer_serverAdapterB_s1_D_IN;
	if (pcieCtrl_curOrderTag_EN)
	  pcieCtrl_curOrderTag <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_curOrderTag_D_IN;
	if (pcieCtrl_dataWordsRemain_EN)
	  pcieCtrl_dataWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dataWordsRemain_D_IN;
	if (pcieCtrl_debugCode_EN)
	  pcieCtrl_debugCode <= `BSV_ASSIGNMENT_DELAY pcieCtrl_debugCode_D_IN;
	if (pcieCtrl_dmaReadBuffer_EN)
	  pcieCtrl_dmaReadBuffer <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadBuffer_D_IN;
	if (pcieCtrl_dmaReadOutCntDn_EN)
	  pcieCtrl_dmaReadOutCntDn <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadOutCntDn_D_IN;
	if (pcieCtrl_dmaReadOutCntUp_EN)
	  pcieCtrl_dmaReadOutCntUp <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadOutCntUp_D_IN;
	if (pcieCtrl_dmaReadOutQ_rCache_EN)
	  pcieCtrl_dmaReadOutQ_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadOutQ_rCache_D_IN;
	if (pcieCtrl_dmaReadOutQ_rRdPtr_EN)
	  pcieCtrl_dmaReadOutQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadOutQ_rRdPtr_D_IN;
	if (pcieCtrl_dmaReadOutQ_rWrPtr_EN)
	  pcieCtrl_dmaReadOutQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadOutQ_rWrPtr_D_IN;
	if (pcieCtrl_dmaReadStartAddr_EN)
	  pcieCtrl_dmaReadStartAddr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadStartAddr_D_IN;
	if (pcieCtrl_dmaReadTag_EN)
	  pcieCtrl_dmaReadTag <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadTag_D_IN;
	if (pcieCtrl_dmaReadTagOrderQ_rCache_EN)
	  pcieCtrl_dmaReadTagOrderQ_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadTagOrderQ_rCache_D_IN;
	if (pcieCtrl_dmaReadTagOrderQ_rRdPtr_EN)
	  pcieCtrl_dmaReadTagOrderQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadTagOrderQ_rRdPtr_D_IN;
	if (pcieCtrl_dmaReadTagOrderQ_rWrPtr_EN)
	  pcieCtrl_dmaReadTagOrderQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadTagOrderQ_rWrPtr_D_IN;
	if (pcieCtrl_dmaReadWordQ_rCache_EN)
	  pcieCtrl_dmaReadWordQ_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadWordQ_rCache_D_IN;
	if (pcieCtrl_dmaReadWordQ_rRdPtr_EN)
	  pcieCtrl_dmaReadWordQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadWordQ_rRdPtr_D_IN;
	if (pcieCtrl_dmaReadWordQ_rWrPtr_EN)
	  pcieCtrl_dmaReadWordQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadWordQ_rWrPtr_D_IN;
	if (pcieCtrl_dmaReadWords_EN)
	  pcieCtrl_dmaReadWords <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaReadWords_D_IN;
	if (pcieCtrl_dmaSendWords_EN)
	  pcieCtrl_dmaSendWords <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaSendWords_D_IN;
	if (pcieCtrl_dmaStartAddr_EN)
	  pcieCtrl_dmaStartAddr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaStartAddr_D_IN;
	if (pcieCtrl_dmaWriteBuf_EN)
	  pcieCtrl_dmaWriteBuf <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaWriteBuf_D_IN;
	if (pcieCtrl_dmaWriteWordIn_EN)
	  pcieCtrl_dmaWriteWordIn <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaWriteWordIn_D_IN;
	if (pcieCtrl_dmaWriteWordOut_EN)
	  pcieCtrl_dmaWriteWordOut <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_dmaWriteWordOut_D_IN;
	if (pcieCtrl_doneMap_serverAdapterA_cnt_EN)
	  pcieCtrl_doneMap_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_doneMap_serverAdapterA_cnt_D_IN;
	if (pcieCtrl_doneMap_serverAdapterA_s1_EN)
	  pcieCtrl_doneMap_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_doneMap_serverAdapterA_s1_D_IN;
	if (pcieCtrl_doneMap_serverAdapterB_cnt_EN)
	  pcieCtrl_doneMap_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_doneMap_serverAdapterB_cnt_D_IN;
	if (pcieCtrl_doneMap_serverAdapterB_s1_EN)
	  pcieCtrl_doneMap_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_doneMap_serverAdapterB_s1_D_IN;
	if (pcieCtrl_doneShifter_outputFifo_rv_EN)
	  pcieCtrl_doneShifter_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_doneShifter_outputFifo_rv_D_IN;
	if (pcieCtrl_doneTagMap_EN)
	  pcieCtrl_doneTagMap <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_doneTagMap_D_IN;
	if (pcieCtrl_freeReadTagQ_rCache_EN)
	  pcieCtrl_freeReadTagQ_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_freeReadTagQ_rCache_D_IN;
	if (pcieCtrl_freeReadTagQ_rRdPtr_EN)
	  pcieCtrl_freeReadTagQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_freeReadTagQ_rRdPtr_D_IN;
	if (pcieCtrl_freeReadTagQ_rWrPtr_EN)
	  pcieCtrl_freeReadTagQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_freeReadTagQ_rWrPtr_D_IN;
	if (pcieCtrl_freeTagCnt_EN)
	  pcieCtrl_freeTagCnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_freeTagCnt_D_IN;
	if (pcieCtrl_freeWriteTagQ_rCache_EN)
	  pcieCtrl_freeWriteTagQ_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_freeWriteTagQ_rCache_D_IN;
	if (pcieCtrl_freeWriteTagQ_rRdPtr_EN)
	  pcieCtrl_freeWriteTagQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_freeWriteTagQ_rRdPtr_D_IN;
	if (pcieCtrl_freeWriteTagQ_rWrPtr_EN)
	  pcieCtrl_freeWriteTagQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_freeWriteTagQ_rWrPtr_D_IN;
	if (pcieCtrl_keepBuffer_EN)
	  pcieCtrl_keepBuffer <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_keepBuffer_D_IN;
	if (pcieCtrl_leddata_0_EN)
	  pcieCtrl_leddata_0 <= `BSV_ASSIGNMENT_DELAY pcieCtrl_leddata_0_D_IN;
	if (pcieCtrl_leddata_1_EN)
	  pcieCtrl_leddata_1 <= `BSV_ASSIGNMENT_DELAY pcieCtrl_leddata_1_D_IN;
	if (pcieCtrl_leddata_2_EN)
	  pcieCtrl_leddata_2 <= `BSV_ASSIGNMENT_DELAY pcieCtrl_leddata_2_D_IN;
	if (pcieCtrl_leddata_3_EN)
	  pcieCtrl_leddata_3 <= `BSV_ASSIGNMENT_DELAY pcieCtrl_leddata_3_D_IN;
	if (pcieCtrl_orderShifter_outputFifo_rv_EN)
	  pcieCtrl_orderShifter_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_orderShifter_outputFifo_rv_D_IN;
	if (pcieCtrl_orderTagMap_EN)
	  pcieCtrl_orderTagMap <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_orderTagMap_D_IN;
	if (pcieCtrl_partBuffer_EN)
	  pcieCtrl_partBuffer <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_partBuffer_D_IN;
	if (pcieCtrl_partOffset_EN)
	  pcieCtrl_partOffset <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_partOffset_D_IN;
	if (pcieCtrl_read32data_EN)
	  pcieCtrl_read32data <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_read32data_D_IN;
	if (pcieCtrl_readCompletionsb_datav_0_EN)
	  pcieCtrl_readCompletionsb_datav_0 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readCompletionsb_datav_0_D_IN;
	if (pcieCtrl_readCompletionsb_datav_1_EN)
	  pcieCtrl_readCompletionsb_datav_1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readCompletionsb_datav_1_D_IN;
	if (pcieCtrl_readCompletionsb_datav_2_EN)
	  pcieCtrl_readCompletionsb_datav_2 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readCompletionsb_datav_2_D_IN;
	if (pcieCtrl_readCompletionsb_datav_3_EN)
	  pcieCtrl_readCompletionsb_datav_3 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readCompletionsb_datav_3_D_IN;
	if (pcieCtrl_readCompletionsb_deqoff_EN)
	  pcieCtrl_readCompletionsb_deqoff <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readCompletionsb_deqoff_D_IN;
	if (pcieCtrl_readCompletionsb_enqoff_EN)
	  pcieCtrl_readCompletionsb_enqoff <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readCompletionsb_enqoff_D_IN;
	if (pcieCtrl_readFlushTag_EN)
	  pcieCtrl_readFlushTag <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readFlushTag_D_IN;
	if (pcieCtrl_readReorder_serverAdapterA_cnt_EN)
	  pcieCtrl_readReorder_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readReorder_serverAdapterA_cnt_D_IN;
	if (pcieCtrl_readReorder_serverAdapterA_s1_EN)
	  pcieCtrl_readReorder_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readReorder_serverAdapterA_s1_D_IN;
	if (pcieCtrl_readReorder_serverAdapterB_cnt_EN)
	  pcieCtrl_readReorder_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readReorder_serverAdapterB_cnt_D_IN;
	if (pcieCtrl_readReorder_serverAdapterB_s1_EN)
	  pcieCtrl_readReorder_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_readReorder_serverAdapterB_s1_D_IN;
	if (pcieCtrl_rxOffset_EN)
	  pcieCtrl_rxOffset <= `BSV_ASSIGNMENT_DELAY pcieCtrl_rxOffset_D_IN;
	if (pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio_EN)
	  pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio_D_IN;
	if (pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio_EN)
	  pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio_D_IN;
	if (pcieCtrl_sendTLPm_ma_0_mb_prio_EN)
	  pcieCtrl_sendTLPm_ma_0_mb_prio <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_sendTLPm_ma_0_mb_prio_D_IN;
	if (pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio_EN)
	  pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio_D_IN;
	if (pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio_EN)
	  pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio_D_IN;
	if (pcieCtrl_sendTLPm_ma_1_mb_prio_EN)
	  pcieCtrl_sendTLPm_ma_1_mb_prio <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_sendTLPm_ma_1_mb_prio_D_IN;
	if (pcieCtrl_sendTLPm_mb_prio_EN)
	  pcieCtrl_sendTLPm_mb_prio <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_sendTLPm_mb_prio_D_IN;
	if (pcieCtrl_tagMap_serverAdapterA_cnt_EN)
	  pcieCtrl_tagMap_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_tagMap_serverAdapterA_cnt_D_IN;
	if (pcieCtrl_tagMap_serverAdapterA_s1_EN)
	  pcieCtrl_tagMap_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_tagMap_serverAdapterA_s1_D_IN;
	if (pcieCtrl_tagMap_serverAdapterB_cnt_EN)
	  pcieCtrl_tagMap_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_tagMap_serverAdapterB_cnt_D_IN;
	if (pcieCtrl_tagMap_serverAdapterB_s1_EN)
	  pcieCtrl_tagMap_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_tagMap_serverAdapterB_s1_D_IN;
	if (pcieCtrl_tagWordsLeft_EN)
	  pcieCtrl_tagWordsLeft <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_tagWordsLeft_D_IN;
	if (pcieCtrl_tlpCount_EN)
	  pcieCtrl_tlpCount <= `BSV_ASSIGNMENT_DELAY pcieCtrl_tlpCount_D_IN;
	if (pcieCtrl_userReadEmit_EN)
	  pcieCtrl_userReadEmit <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userReadEmit_D_IN;
	if (pcieCtrl_userReadQ1_rCache_EN)
	  pcieCtrl_userReadQ1_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userReadQ1_rCache_D_IN;
	if (pcieCtrl_userReadQ1_rRdPtr_EN)
	  pcieCtrl_userReadQ1_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userReadQ1_rRdPtr_D_IN;
	if (pcieCtrl_userReadQ1_rWrPtr_EN)
	  pcieCtrl_userReadQ1_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userReadQ1_rWrPtr_D_IN;
	if (pcieCtrl_userWriteBudget_EN)
	  pcieCtrl_userWriteBudget <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userWriteBudget_D_IN;
	if (pcieCtrl_userWriteEmit_EN)
	  pcieCtrl_userWriteEmit <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userWriteEmit_D_IN;
	if (pcieCtrl_userWriteQ_rCache_EN)
	  pcieCtrl_userWriteQ_rCache <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userWriteQ_rCache_D_IN;
	if (pcieCtrl_userWriteQ_rRdPtr_EN)
	  pcieCtrl_userWriteQ_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userWriteQ_rRdPtr_D_IN;
	if (pcieCtrl_userWriteQ_rWrPtr_EN)
	  pcieCtrl_userWriteQ_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      pcieCtrl_userWriteQ_rWrPtr_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    pcieCtrl_busyWriteTagQ_rCache = 18'h2AAAA;
    pcieCtrl_busyWriteTagQ_rRdPtr = 9'h0AA;
    pcieCtrl_busyWriteTagQ_rWrPtr = 9'h0AA;
    pcieCtrl_completionRecvLength = 10'h2AA;
    pcieCtrl_completionRecvTag = 8'hAA;
    pcieCtrl_configBuffer_serverAdapterA_cnt = 3'h2;
    pcieCtrl_configBuffer_serverAdapterA_s1 = 2'h2;
    pcieCtrl_configBuffer_serverAdapterB_cnt = 3'h2;
    pcieCtrl_configBuffer_serverAdapterB_s1 = 2'h2;
    pcieCtrl_curOrderTag = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_dataWordsRemain = 10'h2AA;
    pcieCtrl_debugCode = 32'hAAAAAAAA;
    pcieCtrl_dmaReadBuffer = 32'hAAAAAAAA;
    pcieCtrl_dmaReadOutCntDn = 8'hAA;
    pcieCtrl_dmaReadOutCntUp = 8'hAA;
    pcieCtrl_dmaReadOutQ_rCache = 137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_dmaReadOutQ_rRdPtr = 8'hAA;
    pcieCtrl_dmaReadOutQ_rWrPtr = 8'hAA;
    pcieCtrl_dmaReadStartAddr = 32'hAAAAAAAA;
    pcieCtrl_dmaReadTag = 8'hAA;
    pcieCtrl_dmaReadTagOrderQ_rCache = 18'h2AAAA;
    pcieCtrl_dmaReadTagOrderQ_rRdPtr = 9'h0AA;
    pcieCtrl_dmaReadTagOrderQ_rWrPtr = 9'h0AA;
    pcieCtrl_dmaReadWordQ_rCache = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_dmaReadWordQ_rRdPtr = 9'h0AA;
    pcieCtrl_dmaReadWordQ_rWrPtr = 9'h0AA;
    pcieCtrl_dmaReadWords = 10'h2AA;
    pcieCtrl_dmaSendWords = 10'h2AA;
    pcieCtrl_dmaStartAddr = 32'hAAAAAAAA;
    pcieCtrl_dmaWriteBuf = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_dmaWriteWordIn = 10'h2AA;
    pcieCtrl_dmaWriteWordOut = 10'h2AA;
    pcieCtrl_doneMap_serverAdapterA_cnt = 3'h2;
    pcieCtrl_doneMap_serverAdapterA_s1 = 2'h2;
    pcieCtrl_doneMap_serverAdapterB_cnt = 3'h2;
    pcieCtrl_doneMap_serverAdapterB_s1 = 2'h2;
    pcieCtrl_doneShifter_outputFifo_rv =
	129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_doneTagMap = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_freeReadTagQ_rCache = 18'h2AAAA;
    pcieCtrl_freeReadTagQ_rRdPtr = 9'h0AA;
    pcieCtrl_freeReadTagQ_rWrPtr = 9'h0AA;
    pcieCtrl_freeTagCnt = 8'hAA;
    pcieCtrl_freeWriteTagQ_rCache = 18'h2AAAA;
    pcieCtrl_freeWriteTagQ_rRdPtr = 9'h0AA;
    pcieCtrl_freeWriteTagQ_rWrPtr = 9'h0AA;
    pcieCtrl_keepBuffer = 16'hAAAA;
    pcieCtrl_leddata_0 = 1'h0;
    pcieCtrl_leddata_1 = 1'h0;
    pcieCtrl_leddata_2 = 1'h0;
    pcieCtrl_leddata_3 = 1'h0;
    pcieCtrl_orderShifter_outputFifo_rv =
	129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_orderTagMap = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_partBuffer = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcieCtrl_partOffset = 5'h0A;
    pcieCtrl_read32data = 32'hAAAAAAAA;
    pcieCtrl_readCompletionsb_datav_0 = 8'hAA;
    pcieCtrl_readCompletionsb_datav_1 = 8'hAA;
    pcieCtrl_readCompletionsb_datav_2 = 8'hAA;
    pcieCtrl_readCompletionsb_datav_3 = 8'hAA;
    pcieCtrl_readCompletionsb_deqoff = 2'h2;
    pcieCtrl_readCompletionsb_enqoff = 2'h2;
    pcieCtrl_readFlushTag = 28'hAAAAAAA;
    pcieCtrl_readReorder_serverAdapterA_cnt = 3'h2;
    pcieCtrl_readReorder_serverAdapterA_s1 = 2'h2;
    pcieCtrl_readReorder_serverAdapterB_cnt = 3'h2;
    pcieCtrl_readReorder_serverAdapterB_s1 = 2'h2;
    pcieCtrl_rxOffset = 10'h2AA;
    pcieCtrl_sendTLPm_ma_0_ma_0_mb_prio = 1'h0;
    pcieCtrl_sendTLPm_ma_0_ma_1_mb_prio = 1'h0;
    pcieCtrl_sendTLPm_ma_0_mb_prio = 1'h0;
    pcieCtrl_sendTLPm_ma_1_ma_0_mb_prio = 1'h0;
    pcieCtrl_sendTLPm_ma_1_ma_1_mb_prio = 1'h0;
    pcieCtrl_sendTLPm_ma_1_mb_prio = 1'h0;
    pcieCtrl_sendTLPm_mb_prio = 1'h0;
    pcieCtrl_tagMap_serverAdapterA_cnt = 3'h2;
    pcieCtrl_tagMap_serverAdapterA_s1 = 2'h2;
    pcieCtrl_tagMap_serverAdapterB_cnt = 3'h2;
    pcieCtrl_tagMap_serverAdapterB_s1 = 2'h2;
    pcieCtrl_tagWordsLeft = 48'hAAAAAAAAAAAA;
    pcieCtrl_tlpCount = 32'hAAAAAAAA;
    pcieCtrl_userReadEmit = 32'hAAAAAAAA;
    pcieCtrl_userReadQ1_rCache = 63'h2AAAAAAAAAAAAAAA;
    pcieCtrl_userReadQ1_rRdPtr = 11'h2AA;
    pcieCtrl_userReadQ1_rWrPtr = 11'h2AA;
    pcieCtrl_userWriteBudget = 16'hAAAA;
    pcieCtrl_userWriteEmit = 32'hAAAAAAAA;
    pcieCtrl_userWriteQ_rCache = 64'hAAAAAAAAAAAAAAAA;
    pcieCtrl_userWriteQ_rRdPtr = 11'h2AA;
    pcieCtrl_userWriteQ_rWrPtr = 11'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pcie_user_clk)
  begin
    #0;
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_configBuffer_serverAdapterA_s1[1] &&
	  !pcieCtrl_configBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_configBuffer_serverAdapterB_s1[1] &&
	  !pcieCtrl_configBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_tagMap_serverAdapterA_s1[1] &&
	  !pcieCtrl_tagMap_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_tagMap_serverAdapterB_s1[1] &&
	  !pcieCtrl_tagMap_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_readReorder_serverAdapterA_s1[1] &&
	  !pcieCtrl_readReorder_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_readReorder_serverAdapterB_s1[1] &&
	  !pcieCtrl_readReorder_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_doneMap_serverAdapterA_s1[1] &&
	  !pcieCtrl_doneMap_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (pcie_user_reset_n != `BSV_RESET_VALUE)
      if (pcieCtrl_doneMap_serverAdapterB_s1[1] &&
	  !pcieCtrl_doneMap_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkPcieEngine

